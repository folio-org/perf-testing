<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.2">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="GET_item-storage_items" enabled="true">
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="hostname" elementType="Argument">
            <stringProp name="Argument.name">hostname</stringProp>
            <stringProp name="Argument.value">${__P(HOSTNAME,localhost)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="global_BaseDir" elementType="Argument">
            <stringProp name="Argument.name">global_BaseDir</stringProp>
            <stringProp name="Argument.value">${__BeanShell(import org.apache.jmeter.services.FileServer; FileServer.getFileServer().getBaseDir();)}${__BeanShell(File.separator,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="global_vusers" elementType="Argument">
            <stringProp name="Argument.name">global_vusers</stringProp>
            <stringProp name="Argument.value">${__P(VUSERS,8)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="global_rampup" elementType="Argument">
            <stringProp name="Argument.name">global_rampup</stringProp>
            <stringProp name="Argument.value">${__P(RAMP_UP,80)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="duration" elementType="Argument">
            <stringProp name="Argument.name">duration</stringProp>
            <stringProp name="Argument.value">${__P(DURATION,180)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="port" elementType="Argument">
            <stringProp name="Argument.name">port</stringProp>
            <stringProp name="Argument.value">${__P(PORT,6443)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="charset" elementType="Argument">
            <stringProp name="Argument.name">charset</stringProp>
            <stringProp name="Argument.value">${__P(CHARSET,UTF-8)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="messageDelimiter" elementType="Argument">
            <stringProp name="Argument.name">messageDelimiter</stringProp>
            <stringProp name="Argument.value">|</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="errorDetectionEnabled" elementType="Argument">
            <stringProp name="Argument.name">errorDetectionEnabled</stringProp>
            <stringProp name="Argument.value">true</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="serverTimezone" elementType="Argument">
            <stringProp name="Argument.name">serverTimezone</stringProp>
            <stringProp name="Argument.value">${__P(SERVER_TIMEZONE,UTC)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="useSsl" elementType="Argument">
            <stringProp name="Argument.name">useSsl</stringProp>
            <stringProp name="Argument.value">${__P(USE_SSL:false)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="credentialsSrc" elementType="Argument">
            <stringProp name="Argument.name">credentialsSrc</stringProp>
            <stringProp name="Argument.value">credentials.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="itemBarcodesSrc" elementType="Argument">
            <stringProp name="Argument.name">itemBarcodesSrc</stringProp>
            <stringProp name="Argument.value">item-barcodes.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="socketTimeout" elementType="Argument">
            <stringProp name="Argument.name">socketTimeout</stringProp>
            <stringProp name="Argument.value">${__P(SOCKET_TIMEOUT_SECONDS:180)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Sunflower BF" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="hostname" elementType="Argument">
            <stringProp name="Argument.name">hostname</stringProp>
            <stringProp name="Argument.value">sip2-bugfest-sunflower.int.aws.folio.org</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="port" elementType="Argument">
            <stringProp name="Argument.name">port</stringProp>
            <stringProp name="Argument.value">443</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="useSsl" elementType="Argument">
            <stringProp name="Argument.name">useSsl</stringProp>
            <stringProp name="Argument.value">true</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="credentialsSrc" elementType="Argument">
            <stringProp name="Argument.name">credentialsSrc</stringProp>
            <stringProp name="Argument.value">credentials-sebf.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="itemBarcodesSrc" elementType="Argument">
            <stringProp name="Argument.name">itemBarcodesSrc</stringProp>
            <stringProp name="Argument.value">item-barcodes-sebf.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="duration" elementType="Argument">
            <stringProp name="Argument.name">duration</stringProp>
            <stringProp name="Argument.value">30</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="relctls2" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="hostname" elementType="Argument">
            <stringProp name="Argument.name">hostname</stringProp>
            <stringProp name="Argument.value">sip2-bugfest-sunflower.int.aws.folio.org</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="port" elementType="Argument">
            <stringProp name="Argument.name">port</stringProp>
            <stringProp name="Argument.value">443</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="useSsl" elementType="Argument">
            <stringProp name="Argument.name">useSsl</stringProp>
            <stringProp name="Argument.value">true</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="credentialsSrc" elementType="Argument">
            <stringProp name="Argument.name">credentialsSrc</stringProp>
            <stringProp name="Argument.value">credentials-sebf.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="itemBarcodesSrc" elementType="Argument">
            <stringProp name="Argument.name">itemBarcodesSrc</stringProp>
            <stringProp name="Argument.value">item-barcodes-sebf.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="duration" elementType="Argument">
            <stringProp name="Argument.name">duration</stringProp>
            <stringProp name="Argument.value">30</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="volaris-1st" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="hostname" elementType="Argument">
            <stringProp name="Argument.name">hostname</stringProp>
            <stringProp name="Argument.value">k8s-volaris-edgesip2-1ea00cab26-b3a63adc3860896b.elb.us-west-2.amazonaws.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="port" elementType="Argument">
            <stringProp name="Argument.name">port</stringProp>
            <stringProp name="Argument.value">80</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="useSsl" elementType="Argument">
            <stringProp name="Argument.name">useSsl</stringProp>
            <stringProp name="Argument.value">false</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="credentialsSrc" elementType="Argument">
            <stringProp name="Argument.name">credentialsSrc</stringProp>
            <stringProp name="Argument.value">credentials-v1.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="itemBarcodesSrc" elementType="Argument">
            <stringProp name="Argument.name">itemBarcodesSrc</stringProp>
            <stringProp name="Argument.value">item-barcodes-v1.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="socketTimeout" elementType="Argument">
            <stringProp name="Argument.name">socketTimeout</stringProp>
            <stringProp name="Argument.value">300</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="duration" elementType="Argument">
            <stringProp name="Argument.name">duration</stringProp>
            <stringProp name="Argument.value">300</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config - credentials" enabled="true">
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="filename">${global_BaseDir}/jmeter-supported-data/${credentialsSrc}</stringProp>
        <boolProp name="ignoreFirstLine">false</boolProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="variableNames">username,password,servicePointId</stringProp>
      </CSVDataSet>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp" enabled="true">
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </SetupThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Create support classes" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import javax.net.ssl.SSLContext
import javax.net.ssl.SSLSocket
import java.nio.charset.Charset
import java.time.Duration
import java.util.concurrent.ConcurrentHashMap;
import org.slf4j.LoggerFactory;
import org.slf4j.Logger;

class Sip2Session {

  private final boolean useSSL
  private final Charset charset
  private final String hostname
  private final Duration socketTimeout
  private final int port

  private Socket sip2Socket
  private static final Logger log = LoggerFactory.getLogger(Sip2Session.class)

  private Sip2Session(String hostname, Integer port, String charset, Boolean useSSL, Long socketTimeoutSeconds) {
    this.useSSL = useSSL ?: false
    this.hostname = hostname ?: &quot;localhost&quot;
    this.port = port ?: 80
    this.charset = Charset.forName(charset ?: &quot;UTF-8&quot;)
    this.socketTimeout = Duration.ofSeconds(socketTimeoutSeconds)
  }
  
  static create(String hostname, Integer port, String charset, Boolean useSSL, Long socketTimeoutSecods) {
    return new Sip2Session(hostname, port, charset, useSSL, socketTimeoutSecods)
  }

  Object open() {
    def threadName = Thread.currentThread().getName()
    log.info(&quot;Initializing connection for thread: {}&quot;, threadName)
    def startTime = System.currentTimeMillis()
    try {
      log.info(&quot;Creating socket connection {}:{}&quot;, hostname, port)
      def socket = new Socket(hostname, port)
      socket.setSoTimeout((int) this.socketTimeout.toMillis())
      socket.setTcpNoDelay(true)
      socket.setKeepAlive(true)

      if (useSSL) {
        def sslContext = SSLContext.getInstance(&quot;TLS&quot;)
        sslContext.init(null, null, null)
        def sslSocketFactory = sslContext.getSocketFactory()

        socket = sslSocketFactory.createSocket(socket, hostname, port, true)
        if (socket instanceof SSLSocket) {
          def sslSocket = (SSLSocket) socket
          sslSocket.setUseClientMode(true)
          sslSocket.startHandshake()
          log.info(&quot;SSL handshake completed successfully&quot;)
        }
      }

      this.sip2Socket = socket
      log.info(&quot;SIP2 Connection is open for thread: {}&quot;, threadName)
      return [
        startTime      : startTime,
        endTime        : System.currentTimeMillis(),
        threadName     : threadName,
        successful     : true,
        responseData   : &quot;SUCCESS: Connection Initialized&quot;,
        responseMessage: &quot;Connection initialized successfully&quot;
      ]
    } catch (Exception e) {
      log.error(&quot;Failed to create socket: &quot; + e.getMessage(), e)
      return [
        startTime      : startTime,
        endTime        : System.currentTimeMillis(),
        threadName     : threadName,
        successful     : false,
        responseData   : &quot;FAILED: Socket connection failed - &quot; + e.getMessage(),
        responseMessage: &quot;Socket connection failed: &quot; + e.getMessage(),
      ]
    }
  }

  void close() {
    def threadName = Thread.currentThread().getName()
    log.info(&quot;Closing connection for: {}&quot;, threadName)
    try {
      if (this.sip2Socket != null &amp;&amp; !this.sip2Socket.isClosed()) {
        this.sip2Socket.close()
        log.info(&quot;Connection closed: {}&quot;, threadName)
      } else {
        log.info(&quot;Socket already closed: {}&quot;, threadName)
      }
    } catch (Exception e) {
      log.error(&quot;Error closing connection for thread: {}&quot;, threadName, e)
    } finally {
      this.sip2Socket = null
    }
  }

  boolean hasConnection() {
    return sip2Socket != null &amp;&amp; !sip2Socket.isClosed();
  }

  Object writeMessage(String rawMessage, int messageNumber) {
    def threadName = Thread.currentThread().getName()
    return writeMessage(threadName, rawMessage, messageNumber)
  }

  Object executeCommand(String message, int messageNumber) {
    if (!hasConnection()) {
      return [
        writeStartTime : null,
        writeEndTime   : null,
        readStartTime  : null,
        readEndTime    : null,
        successful     : false,
        samplerData    : message,
        responseMessage: &quot;FAILED: no open connection&quot;,
        responseData   : &quot;FAILED: no open connection&quot;
      ]
    }

    def writeResult = writeMessage(message, messageNumber)
    if (!writeResult?.successful ?: false) {
      return [
        writeStartTime : writeResult?.writeStartTime,
        writeEndTime   : writeResult?.writeStartTime,
        readStartTime  : null,
        readEndTime    : null,
        successful     : false,
        requestMessage : writeResult?.requestMessage,
        responseData   : &quot;FAILED: write failed&quot;,
        responseMessage: &quot;FAILED: write failed&quot;
      ]
    }

    def readResult = readMessage()
    return [
      writeStartTime : writeResult?.writeStartTime,
      writeEndTime   : writeResult?.writeStartTime,
      readStartTime  : readResult?.readStartTime,
      readEndTime    : readResult?.readEndTime,
      successful     : writeResult?.successful &amp;&amp; readResult?.successful ?: false,
      requestMessage : writeResult?.requestMessage,
      responseData   : readResult?.responseData,
      responseMessage: readResult?.responseMessage
    ]
  }

  Object writeMessage(String threadName, String command, int seqNumber) {
    log.info(&quot;Sending SIP2 Command ({}): &apos;{}&apos;&quot;, seqNumber, command)
    def startTime = System.currentTimeMillis()
    try {
      def outStream = sip2Socket.getOutputStream()
      def resultMessage = command + &quot;\r&quot;
      outStream.write(resultMessage.getBytes(charset))
      outStream.flush()
      return [
        writeStartTime: startTime,
        writeEndTime  : System.currentTimeMillis(),
        successful    : true,
        requestMessage: &quot;SUCCESS: message sent&quot;
      ]
    } catch (Exception e) {
      log.error(&quot;Error writing message: {}&quot;, e.getMessage(), e)
      close()
      return [
        writeStartTime: startTime,
        writeEndTime  : System.currentTimeMillis(),
        successful    : false,
        requestMessage: &quot;FAILED: Error writing message - &quot; + e.getMessage()
      ]
    }
  }

  Object readMessage() {
    log.info(&apos;Reading message: {}&apos;, Thread.currentThread().getName())
    def startTime = System.currentTimeMillis()
    try  {
      def inputStream = sip2Socket.getInputStream()
      def buffer = new byte[2048]
      def bytesRead = inputStream.read(buffer)
      def responseMessage = &quot;&quot;

      if (bytesRead &gt; 0) {
        responseMessage = new String(buffer, 0, bytesRead, charset)?.trim()
      }

      log.debug(&quot;SIP2 Response Message: &apos;{}&apos;&quot;, responseMessage)
      return [
        readStartTime  : startTime,
        readEndTime    : System.currentTimeMillis(),
        successful     : true,
        responseData   : responseMessage,
        responseMessage: &quot;SUCCESS: message read&quot;,
      ]
    } catch (SocketTimeoutException e) {
      log.error(&quot;Connection timeout during writeMessage: {}&quot;, e.getMessage(), e)
      close()
      return [
        readStartTime  : startTime,
        readEndTime    : System.currentTimeMillis(),
        successful     : false,
        responseMessage: &quot;FAILED: Connection timeout during write&quot;,
        responseData   : &quot;FAILED: Connection timeout during write&quot;
      ]
    } catch (IOException e) {
      log.error(&quot;IO error during writeMessage: {}&quot;, e.getMessage(), e)
      close()
      return [
        readStartTime  : startTime,
        readEndTime    : System.currentTimeMillis(),
        successful     : false,
        responseMessage: &quot;FAILED: IO error during write&quot;,
        responseData   : &quot;FAILED: IO error during write&quot;
      ]
    } catch (Exception e) {
      log.error(&quot;Unexpected error during readMessage: {}&quot;, e.getMessage(), e)
      close()
      return [
        readStartTime  : startTime,
        readEndTime    : System.currentTimeMillis(),
        successful     : false,
        responseMessage: &quot;FAILED: Unexpected error during read&quot;,
        responseData   : &quot;FAILED: Unexpected error during read&quot;
      ]
    }
  }
}

props.put(&quot;sip2_sessionClass&quot;, Sip2Session.class)
log.info(&quot;SIP2ConnectionManager class defined and stored in props&quot;)

SampleResult.setSuccessful(true)
SampleResult.setSamplerData(&quot;Initializing SIP2 Session&quot;)
SampleResult.setResponseData(&quot;SUCCESS: SIP2 Session Initialized&quot;)
SampleResult.setResponseMessage(&quot;SUCCESS: SIP2 Session Initialized&quot;)
</stringProp>
        </JSR223Sampler>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Define Helper class" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import java.nio.charset.Charset
import java.time.LocalDateTime
import java.time.ZoneId
import java.time.format.DateTimeFormatter

class Sip2Helper {

    private final Object vars
    private final Charset charset
    private final ZoneId serverTimezone

    Sip2Helper(Object vars) {
        this.vars = vars
        this.serverTimezone = ZoneId.of(vars.get(&quot;serverTimezone&quot;))
        this.charset = Charset.forName(vars.get(&quot;charset&quot;) ?: &quot;UTF-8&quot;)
    }

    String calculateChecksum(String message) {
        def bytes = message.getBytes(charset)
        int checksum = 0

        bytes.each { byte b -&gt;
            checksum += b &amp; 0xff
        }

        checksum = -checksum &amp; 0xffff
        return String.format(&quot;%04X&quot;, checksum)
    }

    String prepareMessage(String rawMessage) {
        def delimiter = vars.get(&quot;messageDelimiter&quot;) ?: &quot;|&quot;
        def seqNumber = vars.get(&quot;seqNumber&quot;) ?: &quot;1&quot;
        def newMessage = rawMessage + &quot;${delimiter}AY${seqNumber}&quot;
        def errorDetectionEnabled = vars.get(&quot;errorDetectionEnabled&quot;)?.toBoolean() ?: false

        return errorDetectionEnabled
                ? newMessage + &quot;AZ${calculateChecksum(newMessage + &quot;AZ&quot;)}&quot;
                : newMessage
    }

    Object validateChecksum(String message) {
        def result = [
                isValid               : false,
                receivedChecksum      : &quot;&quot;,
                messageWithoutChecksum: &quot;&quot;,
                errorMessage          : &quot;&quot;
        ]

        def charsetName = vars.get(&quot;charset&quot;) ?: &quot;UTF-8&quot;
        try {
            if (!message.contains(&quot;AZ&quot;)) {
                result.errorMessage = &quot;Message does not contain checksum identifier &apos;AZ&apos;&quot;
                return result
            }

            def azIndex = message.lastIndexOf(&quot;AZ&quot;)
            if (azIndex &lt; 0 || azIndex + 6 &gt; message.length()) {
                result.errorMessage = &quot;Invalid checksum format or message too short&quot;
                return result
            }

            def messageWithoutChecksum = message.substring(0, azIndex + 2)
            def receivedChecksum = message.substring(azIndex + 2, azIndex + 6)
            result.messageWithoutChecksum = messageWithoutChecksum.substring(0, azIndex)
            result.receivedChecksum = receivedChecksum

            if (!receivedChecksum.matches(/^[0-9A-Fa-f]{4}$/)) {
                result.errorMessage = &quot;Invalid checksum format: ${receivedChecksum}&quot;
                return result
            }

            def bytes = messageWithoutChecksum.getBytes(Charset.forName(charsetName))
            int calculatedSum = 0

            bytes.each { byte b -&gt;
                calculatedSum += b &amp; 0xff
            }

            calculatedSum += Integer.parseUnsignedInt(receivedChecksum, 16)
            calculatedSum &amp;= 0xffff
            result.isValid = (calculatedSum == 0)
            if (!result.isValid) {
                result.errorMessage = &quot;Checksum validation failed. Sum: ${calculatedSum}, Expected: 0&quot;
            }

        } catch (Exception e) {
            result.errorMessage = &quot;Exception during checksum validation: ${e.message}&quot;
        }

        return result
    }
}

props.put(&quot;sip2_helper&quot;, new Sip2Helper(vars))
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Define Sip2SessionManager" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import org.slf4j.Logger
import org.slf4j.LoggerFactory

import java.util.concurrent.ConcurrentHashMap

class SIP2SessionManager {

  private static final Logger log = LoggerFactory.getLogger(SIP2SessionManager.class)
  private static final Map&lt;String, Object&gt; sip2Sessions = new ConcurrentHashMap&lt;&gt;()

  static Object get(String name) {
    return sip2Sessions.get(name)
  }

  static void register(String name, Object sip2Session) {
    sip2Sessions.put(name, sip2Session)
    log.info(&quot;Registered session for name: {}&quot;, name)
  }

  static void closeConnection(String name) {
    log.info(&quot;Closing connection for: {}&quot;, name)
    try {

      def sip2Session = sip2Sessions.remove(name)
      if (sip2Session != null &amp;&amp; sip2Session.hasConnection()) {
        sip2Session.close()
        log.info(&quot;Connection closed: {}&quot;, name)
      } else {
        log.info(&quot;Socket already closed: {}&quot;, name)
      }
    } catch (Exception e) {
      log.error(&quot;Error closing connection for thread: {}&quot;, name, e)
    }
  }

  static void closeAllConnections() {
    log.info(&quot;Closing all connection...&quot;)
    sip2Sessions.keySet().each { name -&gt; closeConnection(name) }
  }
}

props.put(&quot;sip2_sessionManager&quot;, SIP2SessionManager.class)
log.info(&quot;SIP2ConnectionManager class defined and stored in props&quot;)
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Define MessageProvider" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import java.nio.charset.Charset
import java.time.LocalDateTime
import java.time.ZoneId
import java.time.format.DateTimeFormatter

class Sip2MessageProvider {

  private static final DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&quot;yyyyMMdd    HHmmss&quot;)
  private Object vars
  private final Charset charset
  private final ZoneId serverTimezone
  private final String delimiter
  private final boolean checksumEnabled

  Sip2MessageProvider(String delimiter, String timezone, boolean checksumEnabled, String charset) {
    this.delimiter = delimiter
    this.serverTimezone = ZoneId.of(timezone)
    this.checksumEnabled = checksumEnabled
    this.charset = Charset.forName(charset)
  }

  String login(String username, String password, String servicePointId, int seqNumber) {
    servicePointId = servicePointId?.trim()
    def rawMessage = servicePointId
      ? &quot;9300CN${username}${delimiter}CO${password}${delimiter}CP${servicePointId}&quot;
      : &quot;9300CN${username}${delimiter}CO${password}&quot;

    return prepareMessage(rawMessage, seqNumber)
  }

  String itemInformation(String itemBarcode, int seqNumber) {
    def currentDateTime = getFormattedDateTime()
    def commandCode = &quot;17&quot;
    def institutionId = &quot;&quot;
    def terminalPassword = &quot;&quot;

    def rawMessage = new StringBuilder()
      .append(commandCode).append(currentDateTime)
      .append(&quot;AO&quot;).append(institutionId)
      .append(delimiter)
      .append(&quot;AB&quot;).append(itemBarcode)
      .append(delimiter)
      .append(&quot;AC&quot;).append(terminalPassword)
      .toString()

    return prepareMessage(rawMessage, seqNumber)
  }

  String checkin(String itemBarcode, int seqNumber) {
    def transactionDateTime = getFormattedDateTime()
    def returnDateTime = transactionDateTime
    def noBlock = &quot;N&quot;
    def currentLocation = &quot;&quot;
    def commandCode = &quot;09&quot;
    def institutionId = &quot;&quot;
    def terminalPassword = &quot;&quot;

    def rawMessage = new StringBuilder()
      .append(commandCode)
      .append(noBlock)
      .append(transactionDateTime)
      .append(returnDateTime)
      .append(&quot;AP&quot;).append(currentLocation).append(delimiter)
      .append(&quot;AO&quot;).append(institutionId).append(delimiter)
      .append(&quot;AB&quot;).append(itemBarcode).append(delimiter)
      .append(&quot;AC&quot;).append(terminalPassword)
      .toString()

    return prepareMessage(rawMessage, seqNumber)
  }

  String getFormattedDateTime() {
    return LocalDateTime.now(serverTimezone).format(formatter)
  }

  String prepareMessage(String rawMessage, int seqNumber) {
    def msgSeqNumber = seqNumber % 10
    def newMessage = rawMessage + &quot;${delimiter}AY${msgSeqNumber}&quot;
    return checksumEnabled
      ? newMessage + &quot;AZ${calculateChecksum(newMessage + &quot;AZ&quot;)}&quot;
      : newMessage
  }

  String calculateChecksum(String message) {
    def bytes = message.getBytes(charset)
    int checksum = 0

    bytes.each { byte b -&gt;
      checksum += b &amp; 0xff
    }

    checksum = -checksum &amp; 0xffff
    return String.format(&quot;%04X&quot;, checksum)
  }
}

def partDelimiter = vars.get(&quot;messageDelimiter&quot;) ?: &quot;|&quot;
def serverTimezone = vars.get(&quot;serverTimezone&quot;) ?: &quot;UTC&quot;
def checksumEnabled = vars.get(&quot;errorDetectionEnabled&quot;)?.toBoolean() ?: false
def charset = vars.get(&quot;charset&quot;) ?: &quot;UTF-8&quot;

def messageProvider = new Sip2MessageProvider(partDelimiter, serverTimezone, checksumEnabled, charset)
props.put(&quot;sip2_messageProvider&quot;, messageProvider)
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Sorting Kiosk" enabled="true">
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">stoptest</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <intProp name="LoopController.loops">-1</intProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <boolProp name="ThreadGroup.delayedStart">false</boolProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config - IDs" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="filename">${global_BaseDir}/jmeter-supported-data/${itemBarcodesSrc}</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="quotedData">true</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">itemBarcode</stringProp>
        </CSVDataSet>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Init connection" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">SampleResult.setSamplerData(&quot;Initializing SIP2 connection&quot;)
def Sip2Session = props.get(&quot;sip2_sessionClass&quot;)
def sip2SessionManager = props.get(&quot;sip2_sessionManager&quot;)

def port = vars.get(&quot;port&quot;)?.toInteger() ?: 80
def hostname = vars.get(&quot;hostname&quot;) ?: &quot;localhost&quot;
def useSSL = vars.get(&quot;useSsl&quot;)?.toBoolean() ?: false
def charset = vars.get(&quot;charset&quot;) ?: &quot;UTF-8&quot;
def socketTimeout = vars.get(&quot;socketTimeout&quot;).toInteger() ?: 60

def sip2Session = Sip2Session.create(hostname, port, charset, useSSL, socketTimeout)
def result = sip2Session.open()

SampleResult.setStartTime(result.startTime)
SampleResult.setEndTime(result.endTime)
SampleResult.setSuccessful(result?.successful ?: false)
SampleResult.setResponseData(result?.responseData ?: &quot;FAILED: Unknown failure&quot;)
SampleResult.setResponseMessage(result?.responseMessage ?: &quot;FAILED: Unknown responseMessage&quot;)

vars.putObject(&quot;sip2_session&quot;, sip2Session)

def threadName = Thread.currentThread().getName()
sip2SessionManager.register(threadName, sip2Session)</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Login" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">def sip2Session = vars.getObject(&quot;sip2_session&quot;)
def messageProvider = props.get(&quot;sip2_messageProvider&quot;)
def username = vars.get(&quot;username&quot;)?.trim()
def password = vars.get(&quot;password&quot;)?.trim()
def servicePointId = vars.get(&quot;servicePointId&quot;)?.trim()

def seqNumber = 1
def command = messageProvider.login(username, password, servicePointId, seqNumber)
def result = sip2Session.executeCommand(command, seqNumber)

SampleResult.setContentType(&quot;text&quot;)
SampleResult.setSamplerData(command)
SampleResult.setStartTime(result.writeStartTime)
SampleResult.setEndTime(result.readEndTime)
SampleResult.setContentType(&quot;text&quot;)
SampleResult.setSamplerData(command)
SampleResult.setLatency((int) (result.writeStartTime ?: 0- result.readEndTime ?: 0))
SampleResult.setSuccessful(result?.successful ?: false)
SampleResult.setResponseData(result?.responseData ?: &quot;FAILED: Unknown failure&quot;)
SampleResult.setResponseMessage(result?.responseMessage ?: &quot;FAILED: Unknown responseMessage&quot;)
vars.put(&quot;seqNumber&quot;, &quot;${seqNumber}&quot;)</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Checksum Validation" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">def errorDetectionEnabled = vars.get(&quot;errorDetectionEnabled&quot;)?.toBoolean() ?: false
def sip2Helper = props.get(&quot;sip2_helper&quot;)

if (errorDetectionEnabled) {
	def responseMsg = prev.getResponseDataAsString()
	def result = sip2Helper.validateChecksum(responseMsg)
	
	AssertionResult.setFailure(!result.isValid)
	AssertionResult.setFailureMessage(result.errorMessage)
	if (!result.isValid) {
		vars.put(&quot;sip2_loginSuccess&quot;, &quot;false&quot;)		
	}
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Message Validation" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">def responseMsg = prev.getResponseDataAsString()

if (responseMsg == null || responseMsg.isBlank()  || responseMsg.size() &lt; 2) {
  AssertionResult.setFailure(true)
  AssertionResult.setFailureMessage(&quot;Must not be empty&quot;)
  vars.put(&quot;sip2_loginSuccess&quot;, &quot;false&quot;)
  return
}

if (!responseMsg.startsWith(&quot;94&quot;)) {
  AssertionResult.setFailure(true)
  AssertionResult.setFailureMessage(&quot;Must be a valid login response, expect to start with 94&quot;)
  vars.put(&quot;sip2_loginSuccess&quot;, &quot;false&quot;)
  return
}


if (responseMsg.charAt(2) != &apos;1&apos;) {
  AssertionResult.setFailure(true)
  AssertionResult.setFailureMessage(&quot;Login failed, expected status 1, received 0 (char position: 2)&quot;)
  vars.put(&quot;sip2_loginSuccess&quot;, &quot;false&quot;)
  return
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Item Information Request" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">def itemBarcode = vars.get(&quot;itemBarcode&quot;).trim()
log.debug(&quot;Performing item information request: {} ...&quot;, itemBarcode)

def sip2Session = vars.getObject(&quot;sip2_session&quot;)
def messageProvider = props.get(&quot;sip2_messageProvider&quot;)

def seqNumber = vars.get(&quot;seqNumber&quot;).toInteger()
def command = messageProvider.itemInformation(itemBarcode, seqNumber)
def result = sip2Session.executeCommand(command, seqNumber)

SampleResult.setContentType(&quot;text&quot;)
SampleResult.setSamplerData(command)
SampleResult.setStartTime(result.writeStartTime)
SampleResult.setEndTime(result.readEndTime)
SampleResult.setContentType(&quot;text&quot;)
SampleResult.setSamplerData(command)
SampleResult.setLatency((int) (result.writeStartTime ?: 0- result.readEndTime ?: 0))
SampleResult.setSuccessful(result?.successful ?: false)
SampleResult.setResponseData(result?.responseData ?: &quot;FAILED: Unknown failure&quot;)
SampleResult.setResponseMessage(result?.responseMessage ?: &quot;FAILED: Unknown responseMessage&quot;)</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Checksum Validation" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">def errorDetectionEnabled = vars.get(&quot;errorDetectionEnabled&quot;)?.toBoolean() ?: false
def sip2Helper = props.get(&quot;sip2_helper&quot;)

if (errorDetectionEnabled) {
	def responseMsg = prev.getResponseDataAsString()
	def result = sip2Helper.validateChecksum(responseMsg)
	
	AssertionResult.setFailure(!result.isValid)
	AssertionResult.setFailureMessage(result.errorMessage)
	if (!result.isValid) {
		vars.put(&quot;sip2_loginSuccess&quot;, &quot;false&quot;)		
	}
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Message Validation" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">def responseMsg = prev.getResponseDataAsString()

if (!responseMsg.startsWith(&quot;18&quot;)) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Must be a valid item information response, expect to start with 18&quot;)
	log.info(&quot;Setting item info false: 3&quot;)
}

if (responseMsg.contains(&quot;|AJUnknown|&quot;) &amp;&amp; responseMsg.contains(&quot;|AFItem does not exist&quot;)) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Nessage must not contain &apos;|AJUnknown|&apos; and &apos;|AFItem does not exist&apos;&quot;)
	vars.put(&quot;sip2_itemInfoSuccess&quot;, &quot;false&quot;)
}
</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="SeqNum++" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">def seqNumber = vars.get(&quot;seqNumber&quot;).toInteger()
vars.put(&quot;seqNumber&quot;, &quot;${seqNumber + 1}&quot;)</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Item Checkin Request" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">def itemBarcode = vars.get(&quot;itemBarcode&quot;).trim()
log.debug(&quot;Performing item checking request: {} ...&quot;, itemBarcode)

def sip2Session = vars.getObject(&quot;sip2_session&quot;)
def messageProvider = props.get(&quot;sip2_messageProvider&quot;)

def seqNumber = vars.get(&quot;seqNumber&quot;).toInteger()
def command = messageProvider.checkin(itemBarcode, seqNumber)
def result = sip2Session.executeCommand(command, seqNumber)

SampleResult.setContentType(&quot;text&quot;)
SampleResult.setSamplerData(command)
SampleResult.setStartTime(result.writeStartTime)
SampleResult.setEndTime(result.readEndTime)
SampleResult.setContentType(&quot;text&quot;)
SampleResult.setSamplerData(command)
SampleResult.setLatency((int) (result.writeStartTime ?: 0- result.readEndTime ?: 0))
SampleResult.setSuccessful(result?.successful ?: false)
SampleResult.setResponseData(result?.responseData ?: &quot;FAILED: Unknown failure&quot;)
SampleResult.setResponseMessage(result?.responseMessage ?: &quot;FAILED: Unknown responseMessage&quot;)</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Checksum Validation" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">def errorDetectionEnabled = vars.get(&quot;errorDetectionEnabled&quot;)?.toBoolean() ?: false
def sip2Helper = props.get(&quot;sip2_helper&quot;)

if (errorDetectionEnabled) {
	def responseMsg = prev.getResponseDataAsString()
	def result = sip2Helper.validateChecksum(responseMsg)
	
	AssertionResult.setFailure(!result.isValid)
	AssertionResult.setFailureMessage(result.errorMessage)
	if (!result.isValid) {
		vars.put(&quot;sip2_loginSuccess&quot;, &quot;false&quot;)		
	}
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Message Validation" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">def responseMsg = prev.getResponseDataAsString()


if (!responseMsg.startsWith(&quot;10&quot;)) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Invalid check-in response message, must start with 10&quot;)
	vars.put(&quot;sip2_itemCheckinSuccess&quot;, &quot;true&quot;)
}

if (responseMsg.charAt(2) != &apos;1&apos;) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Check-in request failed, expected 1, reseived 0 for response status (char position: 2)&quot;)
	vars.put(&quot;sip2_itemCheckinSuccess&quot;, &quot;true&quot;)
}
</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="SeqNum++" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">def seqNumber = vars.get(&quot;seqNumber&quot;).toInteger()
vars.put(&quot;seqNumber&quot;, &quot;${seqNumber + 1}&quot;)</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Close connection" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">def sip2Session = vars.getObject(&quot;sip2_session&quot;).close()

SampleResult.setSamplerData(&quot;Close SIP2 connection&quot;);

try {
	def threadName = Thread.currentThread().getName()
	def manager = props.get(&quot;SIP2ConnectionManager&quot;)?.closeConnection(threadName)
} finally {
	props.get(&quot;SIP2ConnectionManager&quot;)?.closeConnection(threadName)
	vars.remove(&quot;sip2_socket&quot;)
	vars.remove(&quot;sip2_in&quot;)
	vars.remove(&quot;sip2_out&quot;)
}</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <PostThreadGroup guiclass="PostThreadGroupGui" testclass="PostThreadGroup" testname="tearDown" enabled="true">
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </PostThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Destroy remaining connections" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">def sip2SessionManager = props.get(&quot;sip2_sessionManager&quot;)
log.info(&quot;Closing remaining connections...&quot;)
sip2SessionManager.closeAllConnections()

SampleResult.setSuccessful(true)
SampleResult.setSamplerData(&quot;Destroy Remaining Connections&quot;)
SampleResult.setResponseData(&quot;SUCCESS: All remaining SIP2 connection closed&quot;)
SampleResult.setResponseMessage(&quot;SUCCESS: All remaining SIP2 connection closed&quot;)</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
