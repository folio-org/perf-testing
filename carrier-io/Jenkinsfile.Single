#!groovy

properties([
/* Only keep the 30 most recent builds. */
    [$class  : 'BuildDiscarderProperty',
    strategy: [$class: 'LogRotator', numToKeepStr: '30']],
    disableConcurrentBuilds(), 
    parameters([
        choice(choices: "fix_load\ncapacity\nbaseline\nlongevity", description: "Test type", name: "testType"),
        string(defaultValue: "", description: "Test Name", name: "testName"),
        string(defaultValue: "automation", description: "Galloper bucket with tests artifact", name: "bucket"),
        string(defaultValue: "ptf-okapi.ci.folio.org", description: "Target Okapi url", name: "targetUrl"),
        string(defaultValue: "ptf-influxdb.ci.folio.org", description: "InfluxDB url", name: "influxDbUrl"),
        string(defaultValue: "8086", description: "InfluxDB port", name: "influxDbPort"),
        string(defaultValue: "8", description: "vUsers count for test execution", name: "users"),
        string(defaultValue: "80", description: "Ramp up, s", name: "rampUp"),
        string(defaultValue: "30", description: "Test duration, s", name: "duration"),
        string(defaultValue: "1", description: "Quantity of load generators", name: "loadGeneratorsCount")
    ])
])
    
def sharedLib
def context

node {

    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', 
                        credentialsId: "jenkins-aws",
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID', 
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {

        try {

            stage("Checkout") {
                deleteDir()
                step([$class: 'WsCleanup'])
                checkout scm
                sharedLib = load "carrier-io/shared.groovy"
                context = sharedLib.getContextSingle()
            }

            /*stage("Populate data to db") {
                if(params.populateDatabase){
                    sharedLib.populateData(params.tenant)
                }    
            }*/

            stage("Configure load generators") {
                sharedLib.createStack(context)
            }    

            stage("Configure resources monitoring") {
                sharedLib.installTelegrafAgent(context)
            }

            stage("Execute tests") {
                sharedLib.executePerformanceTest(context, params.excludeTestsList, params.sendReports)
            }

        } catch (Exception err){
            println err
        } finally { 
            stage('Shut down load generators and FOLIO environment'){
                 // wait until all containers are completed
                sleep 60
                sharedLib.stopAllServices(context)
                sharedLib.stopAllInstances(context)
                sharedLib.deleteStack(context)
            }
        }
    }

}
