#!groovy

properties([
/* Only keep the 30 most recent builds. */
    [$class  : 'BuildDiscarderProperty',
    strategy: [$class: 'LogRotator', numToKeepStr: '30']],
    disableConcurrentBuilds(), 
    //parameters([
    //    choice(choices: "baseline\ncapacity\nfix_load\nlongevity", description: "Test type", name: "testType"),
    //    string(defaultValue: "8", description: "vUsers count for test execution", name: "users"),
    //    string(defaultValue: "80", description: "Ramp up, s", name: "rampUp"),
    //    string(defaultValue: "30", description: "Test duration, s", name: "duration"),
    //    booleanParam(name: 'populateDatabase', defaultValue: false, description: "Repopulate data to database"),
    //    string(defaultValue: "fs09000000", description: "Tenant", name: "tenant"),
    //    string(defaultValue: "1", description: "Project ID in Carrier.IO", name: "projectId"),
    //    string(defaultValue: "1", description: "Quantity of load generators", name: "loadGeneratorsCount"),
    //    string(defaultValue: "jmeter", description: "Galloper bucket with tests artifact", name: "bucket"),
    //    string(defaultValue: "t3.medium", description: "Instance type for load generator, all instance types with specs could be found here https://aws.amazon.com/ec2/instance-types", name: "instanceType"),
    //    string(defaultValue: "0.0125", description: "The maximum hourly price to be paid for any Spot Instance launched to fulfill the request. Default is for t3.medium instance type, more information could be found here https://aws.amazon.com/ec2/spot/pricing", name: "spotPrice"),
    //    string(defaultValue: "3", description: "Ram memory in GB avaliable per load generator", name: "lgMemory"),
    //    string(defaultValue: "okapi-gcp1-us-east-1.int.aws.folio.org", description: "FOLIO environment (Okapi URI) against which tests will be executed", name: "targetUrl"),
    //    string(defaultValue: "ec2-54-87-82-65.compute-1.amazonaws.com", description: "Environment where reporting tools are located", name: "reportingInstanceUrl"),
    //    string(defaultValue: "", description: """Recipients for email notification in format "user1@mail.com","user2@mail.com","user3@mail.com" """, name: "emailsList"),
    //    string(defaultValue: "7e28f971-6499-4799-b42c-fd1a6bb8f585", description: "Galloper task id for post processing", name: "galloperPostProccessingTaskId"),
    //    string(defaultValue: "481d5b9d-fd90-45c6-a38f-0fad1b4d8572", description: "Galloper task id for notifications", name: "galloperTaskIdForNotifications"),
    //    string(defaultValue: "43-57", description: "user flow distribution", name: "distribution"),
    //    string(defaultValue: "us-east-1", description: "region", name: "targetRegion"),
    //    string(defaultValue: "gcp1-pvt", description: "cluster name to monitor", name: "targetCluster")
// ])
])
    
def sharedLib
def context

node {

    try {

        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', 
                            credentialsId: "jenkins-aws",
                            accessKeyVariable: 'AWS_ACCESS_KEY_ID', 
                            secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {


            stage("Checkout") {
                deleteDir()
                step([$class: 'WsCleanup'])
                checkout scm
                sharedLib = load "carrier-io/shared.groovy"
                context = sharedLib.getContext()
            }

            /*stage("Populate data to db") {
                if(params.populateDatabase){
                    populateData(params.tenant)
                }    
            }

            stage("Configure resources monitoring") {
                installTelegrafAgent(params.reportingInstanceUrl, params.targetCluster)
            }*/

            stage("Configure load generators") {
                createStack(context)
            }    

            stage("Execute tests") {
                executePerformanceTest(context)
            }

            //stage("Send Notification") {
            //    sendNotification(params.testName, params.testType, params.users.toInteger(), params.reportingInstanceUrl, params.emailsList, params.galloperTaskIdForNotifications)
            //}
        }

    } catch (Exception err){
		println err
	} finally { 
        stage('Shut down load generators and FOLIO environment'){
            //stopMonitoringTask(context)
            deleteStack(context)
        }
	}
}
