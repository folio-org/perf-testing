<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.0 r1840935">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Profiles_multitenant" enabled="true">
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <stringProp name="TestPlan.comments">This script was created to monitor inventory records</stringProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="total_tenants" elementType="Argument">
            <stringProp name="Argument.name">total_tenants</stringProp>
            <stringProp name="Argument.value">${__P(total_tenants ,6)}</stringProp>
            <stringProp name="Argument.desc">Should equals the total number of tenants  (environments) in tenants_credentials.csv file</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="global_BaseDir" elementType="Argument">
            <stringProp name="Argument.name">global_BaseDir</stringProp>
            <stringProp name="Argument.value">${__BeanShell(import org.apache.jmeter.services.FileServer; FileServer.getFileServer().getBaseDir();)}${__BeanShell(File.separator,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Global_duration" elementType="Argument">
            <stringProp name="Argument.name">Global_duration</stringProp>
            <stringProp name="Argument.value">${__P(Global_duration, 1800)}</stringProp>
            <stringProp name="Argument.desc">Default duration | 1800 sec</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="env_type" elementType="Argument">
            <stringProp name="Argument.name">env_type</stringProp>
            <stringProp name="Argument.value">${__P(env_type,[])}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="centralTenantId" elementType="Argument">
            <stringProp name="Argument.name">centralTenantId</stringProp>
            <stringProp name="Argument.value">${__P(centralTenantId,[])}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Authentication" elementType="Argument">
            <stringProp name="Argument.name">Authentication</stringProp>
            <stringProp name="Argument.value">[]</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Global_ramp-up" elementType="Argument">
            <stringProp name="Argument.name">Global_ramp-up</stringProp>
            <stringProp name="Argument.value">3</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
      </CookieManager>
      <hashTree/>
      <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
        <boolProp name="clearEachIteration">true</boolProp>
        <boolProp name="useExpires">false</boolProp>
        <boolProp name="CacheManager.controlledByThread">false</boolProp>
      </CacheManager>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="User-Agent" elementType="Header">
            <stringProp name="Header.name">User-Agent</stringProp>
            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36</stringProp>
          </elementProp>
          <elementProp name="Accept-Language" elementType="Header">
            <stringProp name="Header.name">Accept-Language</stringProp>
            <stringProp name="Header.value">en-US</stringProp>
          </elementProp>
          <elementProp name="Accept-Encoding" elementType="Header">
            <stringProp name="Header.name">Accept-Encoding</stringProp>
            <stringProp name="Header.value">gzip, deflate, br</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Accept</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="Login" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </SetupThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Credentials_central" enabled="false">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">${global_BaseDir}/jmeter-supported-data/tenants_credentials_central.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="variableNames">central_username,central_password,central_tenant,hostName,origin</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostName}</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </ConfigTestElement>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">x-okapi-tenant</stringProp>
              <stringProp name="Header.value">${tenant}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">content-type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Origin</stringProp>
              <stringProp name="Header.value">https://${origin}</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FOLIO: Login Central tenant" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;username&quot;:&quot;${central_username}&quot;,&quot;password&quot;:&quot;${central_password}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/authn/login</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-okapi-tenant" elementType="Header">
                <stringProp name="Header.name">x-okapi-tenant</stringProp>
                <stringProp name="Header.value">${central_tenant}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 201" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49587">201</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - x-okapi-token" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
            <stringProp name="RegexExtractor.refname">x-okapi-token-central</stringProp>
            <stringProp name="RegexExtractor.regex">x-okapi-token: (.+)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <ResultAction guiclass="ResultActionGui" testclass="ResultAction" testname="Result Status Action Handler" enabled="true">
            <intProp name="OnError.action">2</intProp>
          </ResultAction>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">props.put(&quot;x-okapi-token-central&quot;, vars.get(&quot;x-okapi-token-central&quot;));
props.put(&quot;central_tenant&quot;, vars.get(&quot;central_tenant&quot;));</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET bl-users/_self central" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/bl-users/_self</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-okapi-token" elementType="Header">
                <stringProp name="Header.name">x-okapi-token</stringProp>
                <stringProp name="Header.value">${x-okapi-token-central}</stringProp>
              </elementProp>
              <elementProp name="x-okapi-tenant" elementType="Header">
                <stringProp name="Header.name">x-okapi-tenant</stringProp>
                <stringProp name="Header.value">${central_tenant}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">central_userID;central_servicePointId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.user.id;$..defaultServicePointId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">not_found;not_found</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">props.put(&quot;central_userID&quot;, vars.get(&quot;central_userID&quot;));
props.put(&quot;central_servicePointId&quot;, vars.get(&quot;central_servicePointId&quot;));</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${total_tenants}</stringProp>
        </LoopController>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Credentials" enabled="true">
            <stringProp name="delimiter">,</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="filename">${global_BaseDir}/jmeter-supported-data/tenants_credentials.csv</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
            <boolProp name="stopThread">true</boolProp>
            <stringProp name="variableNames">username,password,tenant,hostName,origin</stringProp>
          </CSVDataSet>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FOLIO: Login" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;username&quot;:&quot;${username}&quot;,&quot;password&quot;:&quot;${password}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/authn/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 201" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - x-okapi-token" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">x-okapi-token</stringProp>
              <stringProp name="RegexExtractor.regex">x-okapi-token: (.+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResultAction guiclass="ResultActionGui" testclass="ResultAction" testname="Result Status Action Handler" enabled="true">
              <intProp name="OnError.action">2</intProp>
            </ResultAction>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET bl-users/_self" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/bl-users/_self</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="x-okapi-token" elementType="Header">
                  <stringProp name="Header.name">x-okapi-token</stringProp>
                  <stringProp name="Header.value">${x-okapi-token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">current_userID;servicePointId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.user.id;$..defaultServicePointId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">not_found;not_found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler User info extractor" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import org.apache.jmeter.services.FileServer;
import java.io.FileWriter;
import java.io.IOException;

String xokapitoken = vars.get(&quot;x-okapi-token&quot;);
String current_userID = vars.get(&quot;current_userID&quot;);
String servicePointId = vars.get(&quot;servicePointId&quot;);
String hostname = vars.get(&quot;hostName&quot;);
String tenant = vars.get(&quot;tenant&quot;);
String separator = &quot;,&quot;;

try {
    FileWriter writer = new FileWriter(FileServer.getFileServer().getBaseDir() + &quot;/jmeter-supported-data/UsersInfo.csv&quot;, true);
    writer.append(xokapitoken + separator + current_userID + separator + servicePointId + separator + hostname + separator + tenant + &quot;\n&quot;);
    writer.close();
} catch (IOException ex) {
    log.error(&quot;Failed to write to CSV file: &quot; + ex.getMessage());
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">1000</stringProp>
          </TestAction>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Export for Data Import updates profile creation" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${total_tenants}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${Global_ramp-up}</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV UsersInfo" enabled="true">
          <stringProp name="filename">${global_BaseDir}/jmeter-supported-data/UsersInfo.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">x-okapi-token,current_userID,servicePointId,hostname,tenant</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </ConfigTestElement>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="X-Okapi-Token" elementType="Header">
              <stringProp name="Header.name">X-Okapi-Tenant</stringProp>
              <stringProp name="Header.value">${tenant}</stringProp>
            </elementProp>
            <elementProp name="X-Okapi-Tenant" elementType="Header">
              <stringProp name="Header.name">X-Okapi-Token</stringProp>
              <stringProp name="Header.value">${x-okapi-token}</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="DE for DI mapping profiles ${tenant}" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST/mappingProfiles" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;name&quot;:&quot;MARC Bib with Holdings and Item HRIDs(script)&quot;,&quot;default&quot;:false,&quot;recordTypes&quot;:[&quot;SRS&quot;,&quot;HOLDINGS&quot;,&quot;ITEM&quot;],&quot;outputFormat&quot;:&quot;MARC&quot;,&quot;transformations&quot;:[{&quot;fieldId&quot;:&quot;holdings.hrid&quot;,&quot;path&quot;:&quot;$.holdings[*].hrid&quot;,&quot;enabled&quot;:true,&quot;transformation&quot;:&quot;901  $a&quot;,&quot;recordType&quot;:&quot;HOLDINGS&quot;},{&quot;fieldId&quot;:&quot;item.hrid&quot;,&quot;path&quot;:&quot;$.holdings[*].items[*].hrid&quot;,&quot;enabled&quot;:true,&quot;transformation&quot;:&quot;902  $a&quot;,&quot;recordType&quot;:&quot;ITEM&quot;}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">data-export/mapping-profiles</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor mappingProfiles_id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">mappingProfiles_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="DE for DI Create Job profiles ${tenant}" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST/jobProfiles" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;name&quot;:&quot;Export for Data Import updates(script)&quot;,&quot;mappingProfileId&quot;:&quot;${mappingProfiles_id}&quot;,&quot;description&quot;:&quot;created with script&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">data-export/job-profiles</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="PTF - Create 2 profile" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${total_tenants}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${Global_ramp-up}</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV UsersInfo" enabled="true">
          <stringProp name="filename">${global_BaseDir}/jmeter-supported-data/UsersInfo.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">x-okapi-token,current_userID,servicePointId,hostname,tenant</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </ConfigTestElement>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="X-Okapi-Token" elementType="Header">
              <stringProp name="Header.name">X-Okapi-Tenant</stringProp>
              <stringProp name="Header.value">${tenant}</stringProp>
            </elementProp>
            <elementProp name="X-Okapi-Tenant" elementType="Header">
              <stringProp name="Header.name">X-Okapi-Token</stringProp>
              <stringProp name="Header.value">${x-okapi-token}</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="DI Create instance Field mapping profiles ${tenant}" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET/instance-statuses" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">cql.allRecords=1%20sortby%20name</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">instance-statuses</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor instanceStatuses_id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">instanceStatuses_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.instanceStatuses.[0].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor instanceStatuses_name" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">instanceStatuses_name</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.instanceStatuses.[0].name</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion instanceStatuses_id" enabled="true">
              <stringProp name="JSON_PATH">$.instanceStatuses.[0].id</stringProp>
              <stringProp name="EXPECTED_VALUE"></stringProp>
              <boolProp name="JSONVALIDATION">false</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion instanceStatuses_name" enabled="true">
              <stringProp name="JSON_PATH">$.instanceStatuses.[0].name</stringProp>
              <stringProp name="EXPECTED_VALUE"></stringProp>
              <boolProp name="JSONVALIDATION">false</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET/statistical-codes" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">cql.allRecords=1%20sortby%20name</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">statistical-codes</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor statisticalCodes_name" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">statisticalCodes_name</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.statisticalCodes.[0].name</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor statisticalCodes_id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">statisticalCodes_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.statisticalCodes.[0].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor statisticalCodeTypeId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">statisticalCodeTypeId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.statisticalCodes.[0].statisticalCodeTypeId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor statisticalCodes_code" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">statisticalCodes_code</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.statisticalCodes.[0].code</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET/statistical-code-types" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">cql.allRecords=1%20sortby%20name</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">statistical-code-types</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor statisticalCodeTypes_name" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">statisticalCodeTypes_name</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.statisticalCodeTypes.[?(@.id == &quot;${statisticalCodeTypeId}&quot;)].name</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST/mappingProfiles" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;profile&quot;:{&quot;name&quot;:&quot;PTF - Create instance 2(script)&quot;,&quot;incomingRecordType&quot;:&quot;MARC_BIBLIOGRAPHIC&quot;,&quot;existingRecordType&quot;:&quot;INSTANCE&quot;,&quot;description&quot;:&quot;&quot;,&quot;mappingDetails&quot;:{&quot;name&quot;:&quot;instance&quot;,&quot;recordType&quot;:&quot;INSTANCE&quot;,&quot;mappingFields&quot;:[{&quot;name&quot;:&quot;discoverySuppress&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;instance.discoverySuppress&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[],&quot;booleanFieldAction&quot;:null},{&quot;name&quot;:&quot;staffSuppress&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;instance.staffSuppress&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;previouslyHeld&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;instance.previouslyHeld&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;hrid&quot;,&quot;enabled&quot;:false,&quot;path&quot;:&quot;instance.hrid&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;source&quot;,&quot;enabled&quot;:false,&quot;path&quot;:&quot;instance.source&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;catalogedDate&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;instance.catalogedDate&quot;,&quot;value&quot;:&quot;###TODAY###&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;statusId&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;instance.statusId&quot;,&quot;value&quot;:&quot;\&quot;${instanceStatuses_name} \&quot;&quot;,&quot;subfields&quot;:[],&quot;acceptedValues&quot;:{&quot;${instanceStatuses_id}&quot;:&quot;${instanceStatuses_name} &quot;}},{&quot;name&quot;:&quot;modeOfIssuanceId&quot;,&quot;enabled&quot;:false,&quot;path&quot;:&quot;instance.modeOfIssuanceId&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;statisticalCodeIds&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;instance.statisticalCodeIds[]&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[{&quot;order&quot;:0,&quot;path&quot;:&quot;instance.statisticalCodeIds[]&quot;,&quot;fields&quot;:[{&quot;name&quot;:&quot;statisticalCodeId&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;instance.statisticalCodeIds[]&quot;,&quot;value&quot;:&quot;\&quot;${statisticalCodeTypes_name}: ${statisticalCodes_code} - ${statisticalCodes_name}\&quot;&quot;,&quot;acceptedValues&quot;:{&quot;${statisticalCodes_id}&quot;:&quot;${statisticalCodeTypes_name}: ${statisticalCodes_code} - ${statisticalCodes_name}&quot;}}]}],&quot;repeatableFieldAction&quot;:&quot;EXTEND_EXISTING&quot;},{&quot;name&quot;:&quot;administrativeNotes&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;instance.administrativeNotes[]&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;title&quot;,&quot;enabled&quot;:false,&quot;path&quot;:&quot;instance.title&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;alternativeTitles&quot;,&quot;enabled&quot;:false,&quot;path&quot;:&quot;instance.alternativeTitles[]&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;indexTitle&quot;,&quot;enabled&quot;:false,&quot;path&quot;:&quot;instance.indexTitle&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;series&quot;,&quot;enabled&quot;:false,&quot;path&quot;:&quot;instance.series[]&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;precedingTitles&quot;,&quot;enabled&quot;:false,&quot;path&quot;:&quot;instance.precedingTitles[]&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;succeedingTitles&quot;,&quot;enabled&quot;:false,&quot;path&quot;:&quot;instance.succeedingTitles[]&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;identifiers&quot;,&quot;enabled&quot;:false,&quot;path&quot;:&quot;instance.identifiers[]&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;contributors&quot;,&quot;enabled&quot;:false,&quot;path&quot;:&quot;instance.contributors[]&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;publication&quot;,&quot;enabled&quot;:false,&quot;path&quot;:&quot;instance.publication[]&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;editions&quot;,&quot;enabled&quot;:false,&quot;path&quot;:&quot;instance.editions[]&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;physicalDescriptions&quot;,&quot;enabled&quot;:false,&quot;path&quot;:&quot;instance.physicalDescriptions[]&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;instanceTypeId&quot;,&quot;enabled&quot;:false,&quot;path&quot;:&quot;instance.instanceTypeId&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;natureOfContentTermIds&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;instance.natureOfContentTermIds[]&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;instanceFormatIds&quot;,&quot;enabled&quot;:false,&quot;path&quot;:&quot;instance.instanceFormatIds[]&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;languages&quot;,&quot;enabled&quot;:false,&quot;path&quot;:&quot;instance.languages[]&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;publicationFrequency&quot;,&quot;enabled&quot;:false,&quot;path&quot;:&quot;instance.publicationFrequency[]&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;publicationRange&quot;,&quot;enabled&quot;:false,&quot;path&quot;:&quot;instance.publicationRange[]&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;notes&quot;,&quot;enabled&quot;:false,&quot;path&quot;:&quot;instance.notes[]&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;electronicAccess&quot;,&quot;enabled&quot;:false,&quot;path&quot;:&quot;instance.electronicAccess[]&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;subjects&quot;,&quot;enabled&quot;:false,&quot;path&quot;:&quot;instance.subjects[]&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;classifications&quot;,&quot;enabled&quot;:false,&quot;path&quot;:&quot;instance.classifications[]&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;parentInstances&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;instance.parentInstances[]&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;childInstances&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;instance.childInstances[]&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]}]}},&quot;addedRelations&quot;:[],&quot;deletedRelations&quot;:[]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">data-import-profiles/mappingProfiles</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor instance_mappingProfiles_id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">instance_mappingProfiles_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="DI Create holding Field mapping profile ${tenant}" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET/holdings-types" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">cql.allRecords=1%20sortby%20name</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">holdings-types</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor holdingsType_id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">holdingsType_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.holdingsTypes.[0]..id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor holdingsType_name" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">holdingsType_name</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.holdingsTypes.[0]..name</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion iholdingsType_id" enabled="true">
              <stringProp name="JSON_PATH">$.holdingsTypes.[0]..id</stringProp>
              <stringProp name="EXPECTED_VALUE"></stringProp>
              <boolProp name="JSONVALIDATION">false</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion holdingsType_name" enabled="true">
              <stringProp name="JSON_PATH">$.holdingsTypes.[0]..name</stringProp>
              <stringProp name="EXPECTED_VALUE"></stringProp>
              <boolProp name="JSONVALIDATION">false</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET/locations" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">cql.allRecords=1%20sortby%20name</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">locations</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor locations_id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">locations_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.locations.[0]..id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor locations_name" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">locations_name</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.locations.[0]..name</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor locations_code" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">locations_code</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.locations.[0]..code</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET/call-number-types" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">cql.allRecords=1%20sortby%20name</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">call-number-types</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor callNumberTypes_name" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">callNumberTypes_name</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.callNumberTypes.[0]..name</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor callNumberTypes_id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">callNumberTypes_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.callNumberTypes.[0]..id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET/ill-policies" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">cql.allRecords=1%20sortby%20name</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">ill-policies</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor illPolicies_id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">illPolicies_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.illPolicies.[0]..id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor illPolicies_name" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">illPolicies_name</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.illPolicies.[0]..name</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST/mappingProfiles" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;profile&quot;:{&quot;name&quot;:&quot;PTF - Create holdings 2(script)&quot;,&quot;incomingRecordType&quot;:&quot;MARC_BIBLIOGRAPHIC&quot;,&quot;existingRecordType&quot;:&quot;HOLDINGS&quot;,&quot;description&quot;:&quot;&quot;,&quot;mappingDetails&quot;:{&quot;name&quot;:&quot;holdings&quot;,&quot;recordType&quot;:&quot;HOLDINGS&quot;,&quot;mappingFields&quot;:[{&quot;name&quot;:&quot;discoverySuppress&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;holdings.discoverySuppress&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;hrid&quot;,&quot;enabled&quot;:false,&quot;path&quot;:&quot;holdings.discoverySuppress&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;formerIds&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;holdings.formerIds[]&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;holdingsTypeId&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;holdings.holdingsTypeId&quot;,&quot;value&quot;:&quot;\&quot;${holdingsType_name}\&quot;&quot;,&quot;subfields&quot;:[],&quot;acceptedValues&quot;:{&quot;${holdingsType_id}&quot;:&quot;${holdingsType_name}&quot;}},{&quot;name&quot;:&quot;statisticalCodeIds&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;holdings.statisticalCodeIds[]&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;administrativeNotes&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;holdings.administrativeNotes[]&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;permanentLocationId&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;holdings.permanentLocationId&quot;,&quot;value&quot;:&quot;\&quot;${locations_code}\&quot;&quot;,&quot;subfields&quot;:[],&quot;acceptedValues&quot;:{&quot;${locations_id}&quot;:&quot;${locations_name}&quot;}},{&quot;name&quot;:&quot;temporaryLocationId&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;holdings.temporaryLocationId&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[],&quot;acceptedValues&quot;:{&quot;${locations_id}&quot;:&quot;${locations_name}&quot;}},{&quot;name&quot;:&quot;shelvingOrder&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;holdings.shelvingOrder&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;shelvingTitle&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;holdings.shelvingTitle&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;copyNumber&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;holdings.copyNumber&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;callNumberTypeId&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;holdings.callNumberTypeId&quot;,&quot;value&quot;:&quot;\&quot;${callNumberTypes_name}\&quot;&quot;,&quot;subfields&quot;:[],&quot;acceptedValues&quot;:{&quot;${callNumberTypes_id}&quot;:&quot;${callNumberTypes_name}&quot;}},{&quot;name&quot;:&quot;callNumberPrefix&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;holdings.callNumberPrefix&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;callNumber&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;holdings.callNumber&quot;,&quot;value&quot;:&quot;050$a \&quot; \&quot; 050$b&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;callNumberSuffix&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;holdings.callNumberSuffix&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;numberOfItems&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;holdings.numberOfItems&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;holdingsStatements&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;holdings.holdingsStatements[]&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;holdingsStatementsForSupplements&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;holdings.holdingsStatementsForSupplements[]&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;holdingsStatementsForIndexes&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;holdings.holdingsStatementsForIndexes[]&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;illPolicyId&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;holdings.illPolicyId&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[],&quot;acceptedValues&quot;:{&quot;${illPolicies_id}&quot;:&quot;${illPolicies_name}&quot;}},{&quot;name&quot;:&quot;digitizationPolicy&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;holdings.digitizationPolicy&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;retentionPolicy&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;holdings.retentionPolicy&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;notes&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;holdings.notes[]&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;electronicAccess&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;holdings.electronicAccess[]&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;receivingHistory.entries&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;holdings.receivingHistory.entries[]&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]}]}},&quot;addedRelations&quot;:[],&quot;deletedRelations&quot;:[]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">data-import-profiles/mappingProfiles</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor holding_mappingProfiles_id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">holding_mappingProfiles_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="DI Create item Field mapping profiles ${tenant}" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET/material-types" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">cql.allRecords=1%20sortby%20name</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">material-types</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor mtypes_id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">mtypes_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.mtypes.[0]..id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor mtypes_name" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">mtypes_name</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.mtypes.[0]..name</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion mtypes_id" enabled="true">
              <stringProp name="JSON_PATH">$.mtypes.[0]..id</stringProp>
              <stringProp name="EXPECTED_VALUE"></stringProp>
              <boolProp name="JSONVALIDATION">false</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion mtypes_name" enabled="true">
              <stringProp name="JSON_PATH">$.mtypes.[0]..name</stringProp>
              <stringProp name="EXPECTED_VALUE"></stringProp>
              <boolProp name="JSONVALIDATION">false</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET/locations" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">cql.allRecords=1%20sortby%20name</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">locations</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor locations_id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">locations_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.locations.[0]..id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor locations_name" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">locations_name</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.locations.[0]..name</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor locations_code" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">locations_code</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.locations.[0]..code</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET/call-number-types" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">cql.allRecords=1%20sortby%20name</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">call-number-types</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor callNumberTypes_name" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">callNumberTypes_name</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.callNumberTypes.[0]..name</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor callNumberTypes_id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">callNumberTypes_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.callNumberTypes.[0]..id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET/loan-types" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">cql.allRecords=1%20sortby%20name</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">loan-types</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor loantypes_id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">loantypes_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.loantypes.[0]..id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor loantypes_name" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">loantypes_name</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.loantypes.[0]..name</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET/item-note-types" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">cql.allRecords=1%20sortby%20name</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">item-note-types</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor itemNoteTypes_id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">itemNoteTypes_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.itemNoteTypes.[0]..id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor itemNoteTypes_name" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">itemNoteTypes_name</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.itemNoteTypes.[0]..name</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET/item-damaged-statuses" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">cql.allRecords=1%20sortby%20name</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">item-damaged-statuses</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor itemDamageStatuses_id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">itemDamageStatuses_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.itemDamageStatuses.[0]..id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor itemDamageStatuses_name" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">itemDamageStatuses_name</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.itemDamageStatuses.[0]..name</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST/mappingProfiles" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;profile&quot;:{&quot;name&quot;:&quot;PTF - Create item 2(script)&quot;,&quot;incomingRecordType&quot;:&quot;MARC_BIBLIOGRAPHIC&quot;,&quot;existingRecordType&quot;:&quot;ITEM&quot;,&quot;description&quot;:&quot;&quot;,&quot;mappingDetails&quot;:{&quot;name&quot;:&quot;item&quot;,&quot;recordType&quot;:&quot;ITEM&quot;,&quot;mappingFields&quot;:[{&quot;name&quot;:&quot;discoverySuppress&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;item.discoverySuppress&quot;,&quot;value&quot;:null,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;hrid&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;item.hrid&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;barcode&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;item.barcode&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;accessionNumber&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;item.accessionNumber&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;itemIdentifier&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;item.itemIdentifier&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;formerIds&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;item.formerIds[]&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;statisticalCodeIds&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;item.statisticalCodeIds[]&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;administrativeNotes&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;item.administrativeNotes[]&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;materialType.id&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;item.materialType.id&quot;,&quot;value&quot;:&quot;\&quot;${mtypes_name}\&quot;&quot;,&quot;subfields&quot;:[],&quot;acceptedValues&quot;:{&quot;${mtypes_id}&quot;:&quot;${mtypes_name}&quot;}},{&quot;name&quot;:&quot;copyNumber&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;item.copyNumber&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;itemLevelCallNumberTypeId&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;item.itemLevelCallNumberTypeId&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[],&quot;acceptedValues&quot;:{&quot;${callNumberTypes_id}&quot;:&quot;${callNumberTypes_name}&quot;}},{&quot;name&quot;:&quot;itemLevelCallNumberPrefix&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;item.itemLevelCallNumberPrefix&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;itemLevelCallNumber&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;item.itemLevelCallNumber&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;itemLevelCallNumberSuffix&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;item.itemLevelCallNumberSuffix&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;numberOfPieces&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;item.numberOfPieces&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;descriptionOfPieces&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;item.descriptionOfPieces&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;enumeration&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;item.enumeration&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;chronology&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;item.chronology&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;volume&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;item.volume&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;yearCaption&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;item.yearCaption[]&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;numberOfMissingPieces&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;item.numberOfMissingPieces&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;missingPieces&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;item.missingPieces&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;missingPiecesDate&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;item.missingPiecesDate&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;itemDamagedStatusId&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;item.itemDamagedStatusId&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[],&quot;acceptedValues&quot;:{&quot;${itemDamageStatuses_id}&quot;:&quot;${itemDamageStatuses_name}&quot;}},{&quot;name&quot;:&quot;itemDamagedStatusDate&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;item.itemDamagedStatusDate&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;notes&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;item.notes[]&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[{&quot;order&quot;:0,&quot;path&quot;:&quot;item.notes[]&quot;,&quot;fields&quot;:[{&quot;name&quot;:&quot;itemNoteTypeId&quot;,&quot;enabled&quot;:true,&quot;required&quot;:true,&quot;path&quot;:&quot;item.notes[].itemNoteTypeId&quot;,&quot;value&quot;:&quot;\&quot;${itemNoteTypes_name}\&quot;&quot;,&quot;acceptedValues&quot;:{&quot;${itemNoteTypes_id}&quot;:&quot;${itemNoteTypes_name}&quot;}},{&quot;name&quot;:&quot;note&quot;,&quot;enabled&quot;:true,&quot;required&quot;:true,&quot;path&quot;:&quot;item.notes[].note&quot;,&quot;value&quot;:&quot;\&quot;Smith Family Foundation\&quot;&quot;},{&quot;name&quot;:&quot;staffOnly&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;item.notes[].staffOnly&quot;,&quot;value&quot;:null,&quot;booleanFieldAction&quot;:&quot;ALL_TRUE&quot;}]}],&quot;repeatableFieldAction&quot;:&quot;EXTEND_EXISTING&quot;},{&quot;name&quot;:&quot;permanentLoanType.id&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;item.permanentLoanType.id&quot;,&quot;value&quot;:&quot;\&quot;${loantypes_name}\&quot;&quot;,&quot;subfields&quot;:[],&quot;acceptedValues&quot;:{&quot;${loantypes_id}&quot;:&quot;${loantypes_name}&quot;}},{&quot;name&quot;:&quot;temporaryLoanType.id&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;item.temporaryLoanType.id&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[],&quot;acceptedValues&quot;:{&quot;${loantypes_id}&quot;:&quot;${loantypes_name}&quot;}},{&quot;name&quot;:&quot;status.name&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;item.status.name&quot;,&quot;value&quot;:&quot;\&quot;Available\&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;circulationNotes&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;item.circulationNotes[]&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;permanentLocation.id&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;item.permanentLocation.id&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[],&quot;acceptedValues&quot;:{&quot;${locations_id}&quot;:&quot;${locations_name}&quot;}},{&quot;name&quot;:&quot;temporaryLocation.id&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;item.temporaryLocation.id&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[],&quot;acceptedValues&quot;:{&quot;${locations_id}&quot;:&quot;${locations_name}&quot;}},{&quot;name&quot;:&quot;electronicAccess&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;item.electronicAccess[]&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]}]}},&quot;addedRelations&quot;:[],&quot;deletedRelations&quot;:[]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">data-import-profiles/mappingProfiles</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor item_mappingProfiles_id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">item_mappingProfiles_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="DI Create instance Action profiles ${tenant}" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST/instance actionProfiles" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;profile&quot;:{&quot;name&quot;:&quot;PTF - Create instance 2(script)&quot;,&quot;description&quot;:&quot;&quot;,&quot;action&quot;:&quot;CREATE&quot;,&quot;folioRecord&quot;:&quot;INSTANCE&quot;},&quot;addedRelations&quot;:[{&quot;masterProfileId&quot;:null,&quot;masterProfileType&quot;:&quot;ACTION_PROFILE&quot;,&quot;detailProfileId&quot;:&quot;${instance_mappingProfiles_id}&quot;,&quot;detailProfileType&quot;:&quot;MAPPING_PROFILE&quot;}],&quot;deletedRelations&quot;:[]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">data-import-profiles/actionProfiles</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor instance_actionProfiles_id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">instance_actionProfiles_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="DI Create holding Action profiles ${tenant}" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST/holding actionProfiles" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;profile&quot;:{&quot;name&quot;:&quot;PTF - Create holdings 2(script)&quot;,&quot;description&quot;:&quot;&quot;,&quot;action&quot;:&quot;CREATE&quot;,&quot;folioRecord&quot;:&quot;HOLDINGS&quot;},&quot;addedRelations&quot;:[{&quot;masterProfileId&quot;:null,&quot;masterProfileType&quot;:&quot;ACTION_PROFILE&quot;,&quot;detailProfileId&quot;:&quot;${holding_mappingProfiles_id}&quot;,&quot;detailProfileType&quot;:&quot;MAPPING_PROFILE&quot;}],&quot;deletedRelations&quot;:[]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">data-import-profiles/actionProfiles</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor holding_actionProfiles_id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">holding_actionProfiles_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="DI Create item Action profiles ${tenant}" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST/item actionProfiles" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;profile&quot;:{&quot;name&quot;:&quot;PTF - Create item 2(script)&quot;,&quot;description&quot;:&quot;&quot;,&quot;action&quot;:&quot;CREATE&quot;,&quot;folioRecord&quot;:&quot;ITEM&quot;},&quot;addedRelations&quot;:[{&quot;masterProfileId&quot;:null,&quot;masterProfileType&quot;:&quot;ACTION_PROFILE&quot;,&quot;detailProfileId&quot;:&quot;${item_mappingProfiles_id}&quot;,&quot;detailProfileType&quot;:&quot;MAPPING_PROFILE&quot;}],&quot;deletedRelations&quot;:[]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">data-import-profiles/actionProfiles</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor item_actionProfiles_id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">item_actionProfiles_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="DI Create Job profiles ${tenant}" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST/jobProfiles" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;profile&quot;:{&quot;name&quot;:&quot;PTF - Create 2(script)&quot;,&quot;description&quot;:&quot;&quot;,&quot;dataType&quot;:&quot;MARC&quot;},&quot;addedRelations&quot;:[{&quot;masterProfileId&quot;:null,&quot;masterWrapperId&quot;:null,&quot;masterProfileType&quot;:&quot;JOB_PROFILE&quot;,&quot;detailProfileId&quot;:&quot;${instance_actionProfiles_id}&quot;,&quot;detailWrapperId&quot;:null,&quot;detailProfileType&quot;:&quot;ACTION_PROFILE&quot;,&quot;order&quot;:0},{&quot;masterProfileId&quot;:null,&quot;masterWrapperId&quot;:null,&quot;masterProfileType&quot;:&quot;JOB_PROFILE&quot;,&quot;detailProfileId&quot;:&quot;${holding_actionProfiles_id}&quot;,&quot;detailWrapperId&quot;:null,&quot;detailProfileType&quot;:&quot;ACTION_PROFILE&quot;,&quot;order&quot;:1},{&quot;masterProfileId&quot;:null,&quot;masterWrapperId&quot;:null,&quot;masterProfileType&quot;:&quot;JOB_PROFILE&quot;,&quot;detailProfileId&quot;:&quot;${item_actionProfiles_id}&quot;,&quot;detailWrapperId&quot;:null,&quot;detailProfileType&quot;:&quot;ACTION_PROFILE&quot;,&quot;order&quot;:2}],&quot;deletedRelations&quot;:[]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">data-import-profiles/jobProfiles</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="PTF - Updates Success - 1" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${total_tenants}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${Global_ramp-up}</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV UsersInfo" enabled="true">
          <stringProp name="filename">${global_BaseDir}/jmeter-supported-data/UsersInfo.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">x-okapi-token,current_userID,servicePointId,hostname,tenant</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </ConfigTestElement>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="X-Okapi-Token" elementType="Header">
              <stringProp name="Header.name">X-Okapi-Tenant</stringProp>
              <stringProp name="Header.value">${tenant}</stringProp>
            </elementProp>
            <elementProp name="X-Okapi-Tenant" elementType="Header">
              <stringProp name="Header.name">X-Okapi-Token</stringProp>
              <stringProp name="Header.value">${x-okapi-token}</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="DIU_TC: Modify MARC Bib Field mapping profiles ${tenant}" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST/mappingProfiles" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;profile&quot;:{&quot;name&quot;:&quot;PTF - Modify MARC Bib(script)&quot;,&quot;incomingRecordType&quot;:&quot;MARC_BIBLIOGRAPHIC&quot;,&quot;existingRecordType&quot;:&quot;MARC_BIBLIOGRAPHIC&quot;,&quot;description&quot;:&quot;&quot;,&quot;mappingDetails&quot;:{&quot;name&quot;:&quot;marcBib&quot;,&quot;recordType&quot;:&quot;MARC_BIBLIOGRAPHIC&quot;,&quot;marcMappingDetails&quot;:[{&quot;order&quot;:0,&quot;field&quot;:{&quot;subfields&quot;:[{&quot;subaction&quot;:&quot;ADD_SUBFIELD&quot;,&quot;data&quot;:{&quot;text&quot;:&quot;Test&quot;},&quot;subfield&quot;:&quot;a&quot;},{&quot;subfield&quot;:&quot;b&quot;,&quot;data&quot;:{&quot;text&quot;:&quot;Addition&quot;}}],&quot;field&quot;:&quot;947&quot;},&quot;action&quot;:&quot;ADD&quot;}],&quot;marcMappingOption&quot;:&quot;MODIFY&quot;}},&quot;addedRelations&quot;:[],&quot;deletedRelations&quot;:[]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">data-import-profiles/mappingProfiles</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor mbib_mappingProfiles_id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">mbib_mappingProfiles_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="DIU_TC: Update holdings Field mapping profiles ${tenant}" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET/holdings-types" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">cql.allRecords=1%20sortby%20name</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">holdings-types</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor holdingsType_id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">holdingsType_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.holdingsTypes.[0]..id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor holdingsType_name" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">holdingsType_name</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.holdingsTypes.[0]..name</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion iholdingsType_id" enabled="true">
              <stringProp name="JSON_PATH">$.holdingsTypes.[0]..id</stringProp>
              <stringProp name="EXPECTED_VALUE"></stringProp>
              <boolProp name="JSONVALIDATION">false</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion holdingsType_name" enabled="true">
              <stringProp name="JSON_PATH">$.holdingsTypes.[0]..name</stringProp>
              <stringProp name="EXPECTED_VALUE"></stringProp>
              <boolProp name="JSONVALIDATION">false</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET/statistical-codes" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">cql.allRecords=1%20sortby%20name</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">statistical-codes</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor statisticalCodes_name" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">statisticalCodes_name</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.statisticalCodes.[0].name</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor statisticalCodes_id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">statisticalCodes_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.statisticalCodes.[0].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor statisticalCodeTypeId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">statisticalCodeTypeId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.statisticalCodes.[0].statisticalCodeTypeId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor statisticalCodes_code" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">statisticalCodes_code</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.statisticalCodes.[0].code</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET/statistical-code-types" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">cql.allRecords=1%20sortby%20name</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">statistical-code-types</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor statisticalCodeTypes_name" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">statisticalCodeTypes_name</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.statisticalCodeTypes.[?(@.id == &quot;${statisticalCodeTypeId}&quot;)].name</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET/locations" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">cql.allRecords=1%20sortby%20name</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">locations</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor locations_id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">locations_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.locations.[0]..id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor locations_name" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">locations_name</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.locations.[0]..name</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor locations_code" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">locations_code</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.locations.[0]..code</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET/call-number-types" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">cql.allRecords=1%20sortby%20name</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">call-number-types</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor callNumberTypes_name" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">callNumberTypes_name</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.callNumberTypes.[0]..name</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor callNumberTypes_id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">callNumberTypes_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.callNumberTypes.[0]..id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET/holdings-note-types" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">cql.allRecords=1%20sortby%20name</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">holdings-note-types</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor NoteTypes_name" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">NoteTypes_name</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.holdingsNoteTypes.[0]..name</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor NoteTypes_id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">NoteTypes_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.holdingsNoteTypes.[0]..id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET/ill-policies" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">cql.allRecords=1%20sortby%20name</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">ill-policies</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor illPolicies_id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">illPolicies_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.illPolicies.[0]..id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor illPolicies_name" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">illPolicies_name</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.illPolicies.[0]..name</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST/mappingProfiles" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;profile&quot;:{&quot;name&quot;:&quot;PTF - Update holdings 1(script)&quot;,&quot;incomingRecordType&quot;:&quot;MARC_BIBLIOGRAPHIC&quot;,&quot;existingRecordType&quot;:&quot;HOLDINGS&quot;,&quot;description&quot;:&quot;Adds the Holdings HRID as the former Holdings ID from 901$a; digitization policy from 300$a; adds a default stat code, Temp location, call number prefix, call number suffix, ILL policy, note&quot;,&quot;mappingDetails&quot;:{&quot;name&quot;:&quot;holdings&quot;,&quot;recordType&quot;:&quot;HOLDINGS&quot;,&quot;mappingFields&quot;:[{&quot;name&quot;:&quot;discoverySuppress&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;holdings.discoverySuppress&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;hrid&quot;,&quot;enabled&quot;:false,&quot;path&quot;:&quot;holdings.discoverySuppress&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;formerIds&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;holdings.formerIds[]&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[{&quot;order&quot;:0,&quot;path&quot;:&quot;holdings.formerIds[]&quot;,&quot;fields&quot;:[{&quot;name&quot;:&quot;formerId&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;holdings.formerIds[]&quot;,&quot;value&quot;:&quot;901$a&quot;}]}],&quot;repeatableFieldAction&quot;:&quot;EXTEND_EXISTING&quot;},{&quot;name&quot;:&quot;holdingsTypeId&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;holdings.holdingsTypeId&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[],&quot;acceptedValues&quot;:{&quot;${holdingsType_id}&quot;:&quot;${holdingsType_name}&quot;}},{&quot;name&quot;:&quot;statisticalCodeIds&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;holdings.statisticalCodeIds[]&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[{&quot;order&quot;:0,&quot;path&quot;:&quot;holdings.statisticalCodeIds[]&quot;,&quot;fields&quot;:[{&quot;name&quot;:&quot;statisticalCodeId&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;holdings.statisticalCodeIds[]&quot;,&quot;value&quot;:&quot;\&quot;${statisticalCodeTypes_name}: ${statisticalCodes_code} - ${statisticalCodes_name}\&quot;&quot;,&quot;acceptedValues&quot;:{&quot;${statisticalCodes_id}&quot;:&quot;${statisticalCodeTypes_name}: ${statisticalCodes_code} - ${statisticalCodes_name}&quot;}}]}],&quot;repeatableFieldAction&quot;:&quot;EXTEND_EXISTING&quot;},{&quot;name&quot;:&quot;administrativeNotes&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;holdings.administrativeNotes[]&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;permanentLocationId&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;holdings.permanentLocationId&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[],&quot;acceptedValues&quot;:{&quot;${locations_id}&quot;:&quot;${locations_name}&quot;}},{&quot;name&quot;:&quot;temporaryLocationId&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;holdings.temporaryLocationId&quot;,&quot;value&quot;:&quot;\&quot;${locations_name} (${locations_code})\&quot;&quot;,&quot;subfields&quot;:[],&quot;acceptedValues&quot;:{&quot;${locations_id}&quot;:&quot;${locations_name}&quot;}},{&quot;name&quot;:&quot;shelvingOrder&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;holdings.shelvingOrder&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;shelvingTitle&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;holdings.shelvingTitle&quot;,&quot;value&quot;:&quot;\&quot;TEST\&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;copyNumber&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;holdings.copyNumber&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;callNumberTypeId&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;holdings.callNumberTypeId&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[],&quot;acceptedValues&quot;:{&quot;${callNumberTypes_id}&quot;:&quot;${callNumberTypes_name}&quot;}},{&quot;name&quot;:&quot;callNumberPrefix&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;holdings.callNumberPrefix&quot;,&quot;value&quot;:&quot;\&quot;PREF\&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;callNumber&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;holdings.callNumber&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;callNumberSuffix&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;holdings.callNumberSuffix&quot;,&quot;value&quot;:&quot;\&quot;SUF\&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;numberOfItems&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;holdings.numberOfItems&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;holdingsStatements&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;holdings.holdingsStatements[]&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;holdingsStatementsForSupplements&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;holdings.holdingsStatementsForSupplements[]&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;holdingsStatementsForIndexes&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;holdings.holdingsStatementsForIndexes[]&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;illPolicyId&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;holdings.illPolicyId&quot;,&quot;value&quot;:&quot;\&quot;${illPolicies_name}\&quot;&quot;,&quot;subfields&quot;:[],&quot;acceptedValues&quot;:{&quot;${illPolicies_id}&quot;:&quot;${illPolicies_name}&quot;}},{&quot;name&quot;:&quot;digitizationPolicy&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;holdings.digitizationPolicy&quot;,&quot;value&quot;:&quot;300$a&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;retentionPolicy&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;holdings.retentionPolicy&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;notes&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;holdings.notes[]&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[{&quot;order&quot;:0,&quot;path&quot;:&quot;holdings.notes[]&quot;,&quot;fields&quot;:[{&quot;name&quot;:&quot;noteType&quot;,&quot;enabled&quot;:true,&quot;required&quot;:true,&quot;path&quot;:&quot;holdings.notes[].holdingsNoteTypeId&quot;,&quot;value&quot;:&quot;\&quot;${NoteTypes_name}\&quot;&quot;,&quot;acceptedValues&quot;:{&quot;${NoteTypes_id}&quot;:&quot;${NoteTypes_name}&quot;}},{&quot;name&quot;:&quot;note&quot;,&quot;enabled&quot;:true,&quot;required&quot;:true,&quot;path&quot;:&quot;holdings.notes[].note&quot;,&quot;value&quot;:&quot;\&quot;Did this get added?\&quot;&quot;},{&quot;name&quot;:&quot;staffOnly&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;holdings.notes[].staffOnly&quot;,&quot;value&quot;:null,&quot;booleanFieldAction&quot;:&quot;ALL_TRUE&quot;}]}],&quot;repeatableFieldAction&quot;:&quot;EXTEND_EXISTING&quot;},{&quot;name&quot;:&quot;electronicAccess&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;holdings.electronicAccess[]&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;receivingHistory.entries&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;holdings.receivingHistory.entries[]&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]}]}},&quot;addedRelations&quot;:[],&quot;deletedRelations&quot;:[]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">data-import-profiles/mappingProfiles</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor holding_mappingProfiles_id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">holding_mappingProfiles_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="DIU_TC: Update item Field mapping profiles ${tenant}" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET/material-types" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">cql.allRecords=1%20sortby%20name</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">material-types</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor mtypes_id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">mtypes_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.mtypes.[0]..id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor mtypes_name" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">mtypes_name</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.mtypes.[0]..name</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion mtypes_id" enabled="true">
              <stringProp name="JSON_PATH">$.mtypes.[0]..id</stringProp>
              <stringProp name="EXPECTED_VALUE"></stringProp>
              <boolProp name="JSONVALIDATION">false</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion mtypes_name" enabled="true">
              <stringProp name="JSON_PATH">$.mtypes.[0]..name</stringProp>
              <stringProp name="EXPECTED_VALUE"></stringProp>
              <boolProp name="JSONVALIDATION">false</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET/locations" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">cql.allRecords=1%20sortby%20name</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">locations</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor locations_id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">locations_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.locations.[0]..id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor locations_name" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">locations_name</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.locations.[0]..name</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor locations_code" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">locations_code</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.locations.[0]..code</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET/call-number-types" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">cql.allRecords=1%20sortby%20name</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">call-number-types</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor callNumberTypes_name" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">callNumberTypes_name</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.callNumberTypes.[0]..name</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor callNumberTypes_id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">callNumberTypes_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.callNumberTypes.[0]..id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET/loan-types" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">cql.allRecords=1%20sortby%20name</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">loan-types</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor loantypes_id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">loantypes_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.loantypes.[0]..id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor loantypes_name" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">loantypes_name</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.loantypes.[0]..name</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET/item-note-types" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">cql.allRecords=1%20sortby%20name</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">item-note-types</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor itemNoteTypes_id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">itemNoteTypes_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.itemNoteTypes.[0]..id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor itemNoteTypes_name" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">itemNoteTypes_name</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.itemNoteTypes.[0]..name</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET/item-damaged-statuses" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">cql.allRecords=1%20sortby%20name</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">item-damaged-statuses</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor itemDamageStatuses_id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">itemDamageStatuses_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.itemDamageStatuses.[0]..id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor itemDamageStatuses_name" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">itemDamageStatuses_name</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.itemDamageStatuses.[0]..name</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST/mappingProfiles" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;profile&quot;:{&quot;name&quot;:&quot;PTF - Update item 1(script)&quot;,&quot;incomingRecordType&quot;:&quot;MARC_BIBLIOGRAPHIC&quot;,&quot;existingRecordType&quot;:&quot;ITEM&quot;,&quot;description&quot;:&quot;Adds Item HRID as the barcode number (902$a); Adds copy number from 300$c. Adds an item note (1). Adds temporary loan type&quot;,&quot;mappingDetails&quot;:{&quot;name&quot;:&quot;item&quot;,&quot;recordType&quot;:&quot;ITEM&quot;,&quot;mappingFields&quot;:[{&quot;name&quot;:&quot;discoverySuppress&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;item.discoverySuppress&quot;,&quot;value&quot;:null,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;hrid&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;item.hrid&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;barcode&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;item.barcode&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;accessionNumber&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;item.accessionNumber&quot;,&quot;value&quot;:&quot;902$a&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;itemIdentifier&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;item.itemIdentifier&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;formerIds&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;item.formerIds[]&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;statisticalCodeIds&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;item.statisticalCodeIds[]&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;administrativeNotes&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;item.administrativeNotes[]&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;materialType.id&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;item.materialType.id&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[],&quot;acceptedValues&quot;:{&quot;${mtypes_id}&quot;:&quot;${mtypes_name}&quot;}},{&quot;name&quot;:&quot;copyNumber&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;item.copyNumber&quot;,&quot;value&quot;:&quot;300$c&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;itemLevelCallNumberTypeId&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;item.itemLevelCallNumberTypeId&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[],&quot;acceptedValues&quot;:{&quot;${callNumberTypes_id}&quot;:&quot;${callNumberTypes_name}&quot;}},{&quot;name&quot;:&quot;itemLevelCallNumberPrefix&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;item.itemLevelCallNumberPrefix&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;itemLevelCallNumber&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;item.itemLevelCallNumber&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;itemLevelCallNumberSuffix&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;item.itemLevelCallNumberSuffix&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;numberOfPieces&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;item.numberOfPieces&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;descriptionOfPieces&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;item.descriptionOfPieces&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;enumeration&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;item.enumeration&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;chronology&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;item.chronology&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;volume&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;item.volume&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;yearCaption&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;item.yearCaption[]&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;numberOfMissingPieces&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;item.numberOfMissingPieces&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;missingPieces&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;item.missingPieces&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;missingPiecesDate&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;item.missingPiecesDate&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;itemDamagedStatusId&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;item.itemDamagedStatusId&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[],&quot;acceptedValues&quot;:{&quot;${itemDamageStatuses_id}&quot;:&quot;${itemDamageStatuses_name}&quot;}},{&quot;name&quot;:&quot;itemDamagedStatusDate&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;item.itemDamagedStatusDate&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;notes&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;item.notes[]&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[{&quot;order&quot;:0,&quot;path&quot;:&quot;item.notes[]&quot;,&quot;fields&quot;:[{&quot;name&quot;:&quot;itemNoteTypeId&quot;,&quot;enabled&quot;:true,&quot;required&quot;:true,&quot;path&quot;:&quot;item.notes[].itemNoteTypeId&quot;,&quot;value&quot;:&quot;\&quot;${itemNoteTypes_name}\&quot;&quot;,&quot;acceptedValues&quot;:{&quot;${itemNoteTypes_id}&quot;:&quot;${itemNoteTypes_name}&quot;}},{&quot;name&quot;:&quot;note&quot;,&quot;enabled&quot;:true,&quot;required&quot;:true,&quot;path&quot;:&quot;item.notes[].note&quot;,&quot;value&quot;:&quot;\&quot;Here&apos;s an update note (note 1)\&quot;&quot;},{&quot;name&quot;:&quot;staffOnly&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;item.notes[].staffOnly&quot;,&quot;value&quot;:null,&quot;booleanFieldAction&quot;:&quot;ALL_TRUE&quot;}]}],&quot;repeatableFieldAction&quot;:&quot;EXTEND_EXISTING&quot;},{&quot;name&quot;:&quot;permanentLoanType.id&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;item.permanentLoanType.id&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[],&quot;acceptedValues&quot;:{&quot;${loantypes_id}&quot;:&quot;${loantypes_name}&quot;}},{&quot;name&quot;:&quot;temporaryLoanType.id&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;item.temporaryLoanType.id&quot;,&quot;value&quot;:&quot;\&quot;${loantypes_name}\&quot;&quot;,&quot;subfields&quot;:[],&quot;acceptedValues&quot;:{&quot;${loantypes_id}&quot;:&quot;${loantypes_name}&quot;}},{&quot;name&quot;:&quot;status.name&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;item.status.name&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;circulationNotes&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;item.circulationNotes[]&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;permanentLocation.id&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;item.permanentLocation.id&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[],&quot;acceptedValues&quot;:{&quot;${locations_id}&quot;:&quot;${locations_name} (${locations_code})&quot;}},{&quot;name&quot;:&quot;temporaryLocation.id&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;item.temporaryLocation.id&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[],&quot;acceptedValues&quot;:{&quot;${locations_id}&quot;:&quot;${locations_name} (${locations_code})&quot;}},{&quot;name&quot;:&quot;electronicAccess&quot;,&quot;enabled&quot;:true,&quot;path&quot;:&quot;item.electronicAccess[]&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]}]}},&quot;addedRelations&quot;:[],&quot;deletedRelations&quot;:[]}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">data-import-profiles/mappingProfiles</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor item_mappingProfiles_id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">item_mappingProfiles_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="DIU_TC: Create MARC Bib Action profiles ${tenant}" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST/MARC_BIB actionProfiles" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;profile&quot;:{&quot;name&quot;:&quot;PTF - Modify MARC Bib(script)&quot;,&quot;description&quot;:&quot;&quot;,&quot;action&quot;:&quot;MODIFY&quot;,&quot;folioRecord&quot;:&quot;MARC_BIBLIOGRAPHIC&quot;},&quot;addedRelations&quot;:[{&quot;masterProfileId&quot;:null,&quot;masterProfileType&quot;:&quot;ACTION_PROFILE&quot;,&quot;detailProfileId&quot;:&quot;${mbib_mappingProfiles_id}&quot;,&quot;detailProfileType&quot;:&quot;MAPPING_PROFILE&quot;}],&quot;deletedRelations&quot;:[]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">data-import-profiles/actionProfiles</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor mbib_actionProfiles_id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">mbib_actionProfiles_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="DIU_TC: Create holding Action profiles ${tenant}" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST/holding actionProfiles" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;profile&quot;:{&quot;name&quot;:&quot;PTF - Update holdings 1(script)&quot;,&quot;description&quot;:&quot;&quot;,&quot;action&quot;:&quot;UPDATE&quot;,&quot;folioRecord&quot;:&quot;HOLDINGS&quot;},&quot;addedRelations&quot;:[{&quot;masterProfileId&quot;:null,&quot;masterProfileType&quot;:&quot;ACTION_PROFILE&quot;,&quot;detailProfileId&quot;:&quot;${holding_mappingProfiles_id}&quot;,&quot;detailProfileType&quot;:&quot;MAPPING_PROFILE&quot;}],&quot;deletedRelations&quot;:[]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">data-import-profiles/actionProfiles</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor holding_actionProfiles_id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">holding_actionProfiles_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="DIU_TC: Create item Action profiles ${tenant}" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST/item actionProfiles" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;profile&quot;:{&quot;name&quot;:&quot;PTF - Update item 1(script)&quot;,&quot;description&quot;:&quot;&quot;,&quot;action&quot;:&quot;UPDATE&quot;,&quot;folioRecord&quot;:&quot;ITEM&quot;},&quot;addedRelations&quot;:[{&quot;masterProfileId&quot;:null,&quot;masterProfileType&quot;:&quot;ACTION_PROFILE&quot;,&quot;detailProfileId&quot;:&quot;${item_mappingProfiles_id}&quot;,&quot;detailProfileType&quot;:&quot;MAPPING_PROFILE&quot;}],&quot;deletedRelations&quot;:[]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">data-import-profiles/actionProfiles</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor item_actionProfiles_id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">item_actionProfiles_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="DIU_TC: Create Match profile: &quot;001 to 001&quot;  ${tenant}" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST/Match profile: &quot;001 to 001&quot;  " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;profile&quot;:{&quot;name&quot;:&quot;001 to 001(script)&quot;,&quot;description&quot;:&quot;&quot;,&quot;incomingRecordType&quot;:&quot;MARC_BIBLIOGRAPHIC&quot;,&quot;matchDetails&quot;:[{&quot;incomingRecordType&quot;:&quot;MARC_BIBLIOGRAPHIC&quot;,&quot;incomingMatchExpression&quot;:{&quot;fields&quot;:[{&quot;label&quot;:&quot;field&quot;,&quot;value&quot;:&quot;001&quot;},{&quot;label&quot;:&quot;indicator1&quot;,&quot;value&quot;:&quot;&quot;},{&quot;label&quot;:&quot;indicator2&quot;,&quot;value&quot;:&quot;&quot;},{&quot;label&quot;:&quot;recordSubfield&quot;,&quot;value&quot;:&quot;&quot;}],&quot;staticValueDetails&quot;:null,&quot;dataValueType&quot;:&quot;VALUE_FROM_RECORD&quot;},&quot;existingRecordType&quot;:&quot;MARC_BIBLIOGRAPHIC&quot;,&quot;existingMatchExpression&quot;:{&quot;fields&quot;:[{&quot;label&quot;:&quot;field&quot;,&quot;value&quot;:&quot;001&quot;},{&quot;label&quot;:&quot;indicator1&quot;,&quot;value&quot;:&quot;&quot;},{&quot;label&quot;:&quot;indicator2&quot;,&quot;value&quot;:&quot;&quot;},{&quot;label&quot;:&quot;recordSubfield&quot;,&quot;value&quot;:&quot;&quot;}],&quot;staticValueDetails&quot;:null,&quot;dataValueType&quot;:&quot;VALUE_FROM_RECORD&quot;},&quot;matchCriterion&quot;:&quot;EXACTLY_MATCHES&quot;}],&quot;existingRecordType&quot;:&quot;MARC_BIBLIOGRAPHIC&quot;},&quot;addedRelations&quot;:[],&quot;deletedRelations&quot;:[]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">data-import-profiles/matchProfiles</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor match001_Profiles_id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">match001_Profiles_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="DIU_TC: Create Match profile: &quot;901a to Holdings HRID&quot;  ${tenant}" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST/Match profile: &quot;901a to Holdings HRID&quot;  " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;profile&quot;:{&quot;name&quot;:&quot;901a to Holdings HRID(script)&quot;,&quot;description&quot;:&quot;&quot;,&quot;incomingRecordType&quot;:&quot;MARC_BIBLIOGRAPHIC&quot;,&quot;matchDetails&quot;:[{&quot;incomingRecordType&quot;:&quot;MARC_BIBLIOGRAPHIC&quot;,&quot;incomingMatchExpression&quot;:{&quot;fields&quot;:[{&quot;label&quot;:&quot;field&quot;,&quot;value&quot;:&quot;901&quot;},{&quot;label&quot;:&quot;indicator1&quot;,&quot;value&quot;:&quot;&quot;},{&quot;label&quot;:&quot;indicator2&quot;,&quot;value&quot;:&quot;&quot;},{&quot;label&quot;:&quot;recordSubfield&quot;,&quot;value&quot;:&quot;a&quot;}],&quot;staticValueDetails&quot;:null,&quot;dataValueType&quot;:&quot;VALUE_FROM_RECORD&quot;},&quot;existingRecordType&quot;:&quot;HOLDINGS&quot;,&quot;existingMatchExpression&quot;:{&quot;fields&quot;:[{&quot;label&quot;:&quot;field&quot;,&quot;value&quot;:&quot;holdingsrecord.hrid&quot;}],&quot;dataValueType&quot;:&quot;VALUE_FROM_RECORD&quot;},&quot;matchCriterion&quot;:&quot;EXACTLY_MATCHES&quot;}],&quot;existingRecordType&quot;:&quot;HOLDINGS&quot;},&quot;addedRelations&quot;:[],&quot;deletedRelations&quot;:[]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">data-import-profiles/matchProfiles</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor match901a_Profiles_id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">match901a_Profiles_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="DIU_TC: Create Match profile: &quot;902a to Item HRID&quot; ${tenant}" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST/Match profile: &quot;902a to Item HRID&quot;  " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;profile&quot;:{&quot;name&quot;:&quot;902a to Item HRID(script)&quot;,&quot;description&quot;:&quot;&quot;,&quot;incomingRecordType&quot;:&quot;MARC_BIBLIOGRAPHIC&quot;,&quot;matchDetails&quot;:[{&quot;incomingRecordType&quot;:&quot;MARC_BIBLIOGRAPHIC&quot;,&quot;incomingMatchExpression&quot;:{&quot;fields&quot;:[{&quot;label&quot;:&quot;field&quot;,&quot;value&quot;:&quot;902&quot;},{&quot;label&quot;:&quot;indicator1&quot;,&quot;value&quot;:&quot;&quot;},{&quot;label&quot;:&quot;indicator2&quot;,&quot;value&quot;:&quot;&quot;},{&quot;label&quot;:&quot;recordSubfield&quot;,&quot;value&quot;:&quot;a&quot;}],&quot;staticValueDetails&quot;:null,&quot;dataValueType&quot;:&quot;VALUE_FROM_RECORD&quot;},&quot;existingRecordType&quot;:&quot;ITEM&quot;,&quot;existingMatchExpression&quot;:{&quot;fields&quot;:[{&quot;label&quot;:&quot;field&quot;,&quot;value&quot;:&quot;item.hrid&quot;}],&quot;dataValueType&quot;:&quot;VALUE_FROM_RECORD&quot;},&quot;matchCriterion&quot;:&quot;EXACTLY_MATCHES&quot;}],&quot;existingRecordType&quot;:&quot;ITEM&quot;},&quot;addedRelations&quot;:[],&quot;deletedRelations&quot;:[]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">data-import-profiles/matchProfiles</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor match901a_Profiles_id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">match902a_Profiles_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="DIU_TC: Create Job profiles ${tenant}" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST/jobProfiles" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;profile&quot;:{&quot;name&quot;:&quot;PTF - Updates Success - 1(script)&quot;,&quot;description&quot;:&quot;&quot;,&quot;dataType&quot;:&quot;MARC&quot;},&quot;addedRelations&quot;:[{&quot;masterProfileId&quot;:null,&quot;masterWrapperId&quot;:null,&quot;masterProfileType&quot;:&quot;JOB_PROFILE&quot;,&quot;detailProfileId&quot;:&quot;${match001_Profiles_id}&quot;,&quot;detailWrapperId&quot;:null,&quot;detailProfileType&quot;:&quot;MATCH_PROFILE&quot;,&quot;order&quot;:0},{&quot;masterProfileId&quot;:&quot;${match001_Profiles_id}&quot;,&quot;masterWrapperId&quot;:null,&quot;masterProfileType&quot;:&quot;MATCH_PROFILE&quot;,&quot;detailProfileId&quot;:&quot;${mbib_actionProfiles_id}&quot;,&quot;detailWrapperId&quot;:null,&quot;detailProfileType&quot;:&quot;ACTION_PROFILE&quot;,&quot;order&quot;:0,&quot;reactTo&quot;:&quot;MATCH&quot;},{&quot;masterProfileId&quot;:null,&quot;masterWrapperId&quot;:null,&quot;masterProfileType&quot;:&quot;JOB_PROFILE&quot;,&quot;detailProfileId&quot;:&quot;${match901a_Profiles_id}&quot;,&quot;detailWrapperId&quot;:null,&quot;detailProfileType&quot;:&quot;MATCH_PROFILE&quot;,&quot;order&quot;:1},{&quot;masterProfileId&quot;:&quot;${match901a_Profiles_id}&quot;,&quot;masterWrapperId&quot;:null,&quot;masterProfileType&quot;:&quot;MATCH_PROFILE&quot;,&quot;detailProfileId&quot;:&quot;${holding_actionProfiles_id}&quot;,&quot;detailWrapperId&quot;:null,&quot;detailProfileType&quot;:&quot;ACTION_PROFILE&quot;,&quot;order&quot;:0,&quot;reactTo&quot;:&quot;MATCH&quot;},{&quot;masterProfileId&quot;:null,&quot;masterWrapperId&quot;:null,&quot;masterProfileType&quot;:&quot;JOB_PROFILE&quot;,&quot;detailProfileId&quot;:&quot;${match902a_Profiles_id}&quot;,&quot;detailWrapperId&quot;:null,&quot;detailProfileType&quot;:&quot;MATCH_PROFILE&quot;,&quot;order&quot;:2},{&quot;masterProfileId&quot;:&quot;${match902a_Profiles_id}&quot;,&quot;masterWrapperId&quot;:null,&quot;masterProfileType&quot;:&quot;MATCH_PROFILE&quot;,&quot;detailProfileId&quot;:&quot;${item_actionProfiles_id}&quot;,&quot;detailWrapperId&quot;:null,&quot;detailProfileType&quot;:&quot;ACTION_PROFILE&quot;,&quot;order&quot;:0,&quot;reactTo&quot;:&quot;MATCH&quot;}],&quot;deletedRelations&quot;:[]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">data-import-profiles/jobProfiles</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Circulation policy" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${total_tenants}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${Global_ramp-up}</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV UsersInfo" enabled="true">
          <stringProp name="filename">${global_BaseDir}/jmeter-supported-data/UsersInfo.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">x-okapi-token,current_userID,servicePointId,hostname,tenant</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </ConfigTestElement>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="X-Okapi-Token" elementType="Header">
              <stringProp name="Header.name">X-Okapi-Tenant</stringProp>
              <stringProp name="Header.value">${tenant}</stringProp>
            </elementProp>
            <elementProp name="X-Okapi-Tenant" elementType="Header">
              <stringProp name="Header.name">X-Okapi-Token</stringProp>
              <stringProp name="Header.value">${x-okapi-token}</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TC: Circulation policy ${tenant}" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST_loan-policy-storage/loan-policies" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;name&quot;:&quot;PTF simple loan policy&quot;,&quot;loanable&quot;:true,&quot;loansPolicy&quot;:{&quot;profileId&quot;:&quot;Rolling&quot;,&quot;period&quot;:{&quot;duration&quot;:1,&quot;intervalId&quot;:&quot;Days&quot;},&quot;closedLibraryDueDateManagementId&quot;:&quot;CURRENT_DUE_DATE&quot;},&quot;renewable&quot;:true,&quot;renewalsPolicy&quot;:{&quot;unlimited&quot;:true,&quot;renewFromId&quot;:&quot;SYSTEM_DATE&quot;},&quot;metadata&quot;:{&quot;createdDate&quot;:&quot;2024-01-22T00:00:00.000+00:00&quot;,&quot;createdByUserId&quot;:&quot;${__P(current_userID)}&quot;,&quot;updatedDate&quot;:&quot;2024-01-22T00:00:00.000+00:00&quot;,&quot;updatedByUserId&quot;:&quot;${__P(current_userID)}&quot;},&quot;id&quot;:&quot;${__UUID()}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">loan-policy-storage/loan-policies</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/plain</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor loan_policy_id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">loan_policy_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST_request-policy-storage/request-policies" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;name&quot;:&quot;PTF simple request policy&quot;,&quot;description&quot;:&quot;Allow all types of requests&quot;,&quot;requestTypes&quot;:[&quot;Hold&quot;, &quot;Page&quot;, &quot;Recall&quot;],&quot;metadata&quot;:{&quot;createdDate&quot;:&quot;2024-01-22T00:00:00.000+00:00&quot;,&quot;createdByUserId&quot;:&quot;${__P(current_userID)}&quot;,&quot;updatedDate&quot;:&quot;2024-01-22T00:00:00.000+00:00&quot;,&quot;updatedByUserId&quot;:&quot;${__P(current_userID)}&quot;},&quot;id&quot;:&quot;${__UUID()}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">request-policy-storage/request-policies</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/plain</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor request_policy_id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">request_policy_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST_patron-notice-policy-storage/patron-notice-policies" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;name&quot;:&quot;PTF Send no notices&quot;,&quot;description&quot;:&quot;Send no notices&quot;,&quot;active&quot;:true,&quot;metadata&quot;:{&quot;createdDate&quot;:&quot;2024-01-22T00:00:00.000+00:00&quot;,&quot;createdByUserId&quot;:&quot;${__P(current_userID)}&quot;,&quot;updatedDate&quot;:&quot;2024-01-22T00:00:00.000+00:00&quot;,&quot;updatedByUserId&quot;:&quot;${__P(current_userID)}&quot;},&quot;loanNotices&quot;:[],&quot;feeFineNotices&quot;:[],&quot;requestNotices&quot;:[],&quot;id&quot;:&quot;${__UUID()}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">patron-notice-policy-storage/patron-notice-policies</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/plain</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor notice_policy_id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">notice_policy_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST_overdue-fines-policies" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;name&quot;:&quot;PTF overdue policies - daily&quot;,&quot;description&quot;:&quot;Daily fines&quot;,&quot;overdueFine&quot;:{&quot;quantity&quot;:&quot;5.00&quot;,&quot;intervalId&quot;:&quot;day&quot;},&quot;countClosed&quot;:true,&quot;maxOverdueFine&quot;:&quot;100.00&quot;,&quot;forgiveOverdueFine&quot;:false,&quot;overdueRecallFine&quot;:{&quot;quantity&quot;:&quot;5.00&quot;,&quot;intervalId&quot;:&quot;day&quot;},&quot;gracePeriodRecall&quot;:true,&quot;maxOverdueRecallFine&quot;:&quot;100.00&quot;,&quot;metadata&quot;:{&quot;createdDate&quot;:&quot;2024-01-22T00:00:00.000+00:00&quot;,&quot;createdByUserId&quot;:&quot;${__P(current_userID)}&quot;,&quot;updatedDate&quot;:&quot;2024-01-22T00:00:00.000+00:00&quot;,&quot;updatedByUserId&quot;:&quot;${__P(current_userID)}&quot;},&quot;reminderFeesPolicy&quot;:{&quot;countClosed&quot;:false,&quot;ignoreGracePeriodRecall&quot;:false,&quot;ignoreGracePeriodHolds&quot;:false,&quot;allowRenewalOfItemsWithReminderFees&quot;:false,&quot;clearPatronBlockWhenPaid&quot;:false},&quot;id&quot;:&quot;${__UUID()}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">overdue-fines-policies</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/plain</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor notice_policy_id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">overdue_policy_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST_lost-item-fees-policies" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;name&quot;:&quot;PTF lost item fees policies&quot;,&quot;itemAgedLostOverdue&quot;:{&quot;duration&quot;:24,&quot;intervalId&quot;:&quot;Months&quot;},&quot;patronBilledAfterAgedLost&quot;:{&quot;duration&quot;:1,&quot;intervalId&quot;:&quot;Minutes&quot;},&quot;recalledItemAgedLostOverdue&quot;:{&quot;duration&quot;:1,&quot;intervalId&quot;:&quot;Minutes&quot;},&quot;patronBilledAfterRecalledItemAgedLost&quot;:{&quot;duration&quot;:1,&quot;intervalId&quot;:&quot;Minutes&quot;},&quot;chargeAmountItem&quot;:{&quot;amount&quot;:&quot;10.00&quot;,&quot;chargeType&quot;:&quot;anotherCost&quot;},&quot;lostItemProcessingFee&quot;:&quot;5.00&quot;,&quot;chargeAmountItemPatron&quot;:true,&quot;chargeAmountItemSystem&quot;:true,&quot;returnedLostItemProcessingFee&quot;:true,&quot;replacedLostItemProcessingFee&quot;:false,&quot;replacementProcessingFee&quot;:&quot;0.00&quot;,&quot;replacementAllowed&quot;:false,&quot;lostItemReturned&quot;:&quot;Charge&quot;,&quot;metadata&quot;:{&quot;createdDate&quot;:&quot;2024-01-22T00:00:00.000+00:00&quot;,&quot;createdByUserId&quot;:&quot;${__P(current_userID)}&quot;,&quot;updatedDate&quot;:&quot;2024-01-22T00:00:00.000+00:00&quot;,&quot;updatedByUserId&quot;:&quot;${__P(current_userID)}&quot;},&quot;id&quot;:&quot;${__UUID()}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">lost-item-fees-policies</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/plain</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor lost_policy_id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">lost_policy_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PUT_circulation/rules" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;rulesAsText&quot;:&quot;priority:g, m, t , s, b, c, a\nfallback-policy:  l ${loan_policy_id} r ${request_policy_id} n ${notice_policy_id} o ${overdue_policy_id} i ${lost_policy_id} &quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">circulation/rules</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/plain</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49590">204</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="PTF - Invoice CNR profile" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${total_tenants}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${Global_ramp-up}</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV UsersInfo" enabled="true">
          <stringProp name="filename">${global_BaseDir}/jmeter-supported-data/UsersInfo.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">x-okapi-token,current_userID,servicePointId,hostname,tenant</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </ConfigTestElement>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="X-Okapi-Token" elementType="Header">
              <stringProp name="Header.name">X-Okapi-Tenant</stringProp>
              <stringProp name="Header.value">${tenant}</stringProp>
            </elementProp>
            <elementProp name="X-Okapi-Tenant" elementType="Header">
              <stringProp name="Header.name">X-Okapi-Token</stringProp>
              <stringProp name="Header.value">${x-okapi-token}</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Create invoice Field mapping profiles ${tenant}" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET/acquisitions-units/units" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">cql.allRecords=1%20sortby%20name</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">acquisitions-units/units</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor acqUnitName" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">acqUnitName</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.acquisitionsUnits..name</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor acqUnitIds" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">acqUnitIds</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.acquisitionsUnits..id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET/batch-groups" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">cql.allRecords=1%20sortby%20name</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">batch-groups</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor batchGroupId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">batchGroupId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.batchGroups..id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor batchGroupName" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">batchGroupName</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.batchGroups..name</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET/configurations/entries" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">1000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">(module=TENANT and configName=tenant.addresses) sortBy value</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">configurations/entries</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET/organizations/organizations" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">(isVendor==&quot;true&quot; and status==&quot;Active&quot;) sortby name/sort.ascending</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">organizations/organizations</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor organizationsId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">organizationsId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET/organizations/organizations/id" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">cql.allRecords=1%20sortby%20name</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">organizations/organizations/${organizationsId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor erpCode" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">erpCode</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.erpCode</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">12345</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor vendorId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">vendorId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST/mappingProfiles" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;profile&quot;:{&quot;name&quot;:&quot;Invoice CNR(script)&quot;,&quot;description&quot;:&quot;&quot;,&quot;incomingRecordType&quot;:&quot;EDIFACT_INVOICE&quot;,&quot;existingRecordType&quot;:&quot;INVOICE&quot;,&quot;deleted&quot;:false,&quot;userInfo&quot;:{&quot;firstName&quot;:&quot;${firstName}&quot;,&quot;lastName&quot;:&quot;${lastName}&quot;,&quot;userName&quot;:&quot;${userName}&quot;},&quot;marcFieldProtectionSettings&quot;:[],&quot;mappingDetails&quot;:{&quot;name&quot;:&quot;invoice&quot;,&quot;recordType&quot;:&quot;INVOICE&quot;,&quot;mappingFields&quot;:[{&quot;name&quot;:&quot;invoiceDate&quot;,&quot;enabled&quot;:&quot;true&quot;,&quot;required&quot;:false,&quot;path&quot;:&quot;invoice.invoiceDate&quot;,&quot;value&quot;:&quot;DTM+137[2]&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;status&quot;,&quot;enabled&quot;:&quot;true&quot;,&quot;required&quot;:false,&quot;path&quot;:&quot;invoice.status&quot;,&quot;value&quot;:&quot;\&quot;Open\&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;paymentDue&quot;,&quot;enabled&quot;:&quot;true&quot;,&quot;required&quot;:false,&quot;path&quot;:&quot;invoice.paymentDue&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;paymentTerms&quot;,&quot;enabled&quot;:&quot;true&quot;,&quot;required&quot;:false,&quot;path&quot;:&quot;invoice.paymentTerms&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;approvalDate&quot;,&quot;enabled&quot;:&quot;false&quot;,&quot;required&quot;:false,&quot;path&quot;:&quot;invoice.approvalDate&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;approvedBy&quot;,&quot;enabled&quot;:&quot;false&quot;,&quot;required&quot;:false,&quot;path&quot;:&quot;invoice.approvedBy&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;acqUnitIds&quot;,&quot;enabled&quot;:&quot;true&quot;,&quot;required&quot;:false,&quot;path&quot;:&quot;invoice.acqUnitIds[]&quot;,&quot;value&quot;:&quot;&quot;,&quot;repeatableFieldAction&quot;:&quot;EXTEND_EXISTING&quot;,&quot;subfields&quot;:[{&quot;order&quot;:0,&quot;path&quot;:&quot;invoice.acqUnitIds[]&quot;,&quot;fields&quot;:[{&quot;name&quot;:&quot;acqUnitIds&quot;,&quot;enabled&quot;:&quot;true&quot;,&quot;required&quot;:false,&quot;path&quot;:&quot;invoice.acqUnitIds[]&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]}]}],&quot;acceptedValues&quot;:{&quot;${acqUnitIds}&quot;:&quot;${acqUnitName}&quot;}},{&quot;name&quot;:&quot;billTo&quot;,&quot;enabled&quot;:&quot;true&quot;,&quot;required&quot;:false,&quot;path&quot;:&quot;invoice.billTo&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[],&quot;acceptedValues&quot;:{}},{&quot;name&quot;:&quot;billToAddress&quot;,&quot;enabled&quot;:&quot;false&quot;,&quot;required&quot;:false,&quot;path&quot;:&quot;invoice.billToAddress&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;batchGroupId&quot;,&quot;enabled&quot;:&quot;true&quot;,&quot;required&quot;:false,&quot;path&quot;:&quot;invoice.batchGroupId&quot;,&quot;value&quot;:&quot;\&quot;${batchGroupName}\&quot;&quot;,&quot;subfields&quot;:[],&quot;acceptedValues&quot;:{&quot;${batchGroupId}&quot;:&quot;${batchGroupName}&quot;}},{&quot;name&quot;:&quot;subTotal&quot;,&quot;enabled&quot;:&quot;false&quot;,&quot;required&quot;:false,&quot;path&quot;:&quot;invoice.subTotal&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;adjustmentsTotal&quot;,&quot;enabled&quot;:&quot;false&quot;,&quot;required&quot;:false,&quot;path&quot;:&quot;invoice.adjustmentsTotal&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;total&quot;,&quot;enabled&quot;:&quot;false&quot;,&quot;required&quot;:false,&quot;path&quot;:&quot;invoice.total&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;lockTotal&quot;,&quot;enabled&quot;:&quot;true&quot;,&quot;required&quot;:false,&quot;path&quot;:&quot;invoice.lockTotal&quot;,&quot;value&quot;:&quot;MOA+9[2]&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;note&quot;,&quot;enabled&quot;:&quot;true&quot;,&quot;required&quot;:false,&quot;path&quot;:&quot;invoice.note&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;adjustments&quot;,&quot;enabled&quot;:&quot;true&quot;,&quot;required&quot;:false,&quot;path&quot;:&quot;invoice.adjustments[]&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;vendorInvoiceNo&quot;,&quot;enabled&quot;:&quot;true&quot;,&quot;required&quot;:false,&quot;path&quot;:&quot;invoice.vendorInvoiceNo&quot;,&quot;value&quot;:&quot;BGM+380+[1]&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;vendorId&quot;,&quot;enabled&quot;:&quot;true&quot;,&quot;required&quot;:false,&quot;path&quot;:&quot;invoice.vendorId&quot;,&quot;value&quot;:&quot;\&quot;${vendorId}\&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;accountingCode&quot;,&quot;enabled&quot;:&quot;true&quot;,&quot;required&quot;:false,&quot;path&quot;:&quot;invoice.accountingCode&quot;,&quot;value&quot;:&quot;\&quot;${erpCode}\&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;folioInvoiceNo&quot;,&quot;enabled&quot;:&quot;false&quot;,&quot;required&quot;:false,&quot;path&quot;:&quot;invoice.folioInvoiceNo&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;paymentMethod&quot;,&quot;enabled&quot;:&quot;true&quot;,&quot;required&quot;:false,&quot;path&quot;:&quot;invoice.paymentMethod&quot;,&quot;value&quot;:&quot;\&quot;Deposit Account\&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;chkSubscriptionOverlap&quot;,&quot;enabled&quot;:&quot;true&quot;,&quot;required&quot;:false,&quot;path&quot;:&quot;invoice.chkSubscriptionOverlap&quot;,&quot;booleanFieldAction&quot;:&quot;ALL_FALSE&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;exportToAccounting&quot;,&quot;enabled&quot;:&quot;true&quot;,&quot;required&quot;:false,&quot;path&quot;:&quot;invoice.exportToAccounting&quot;,&quot;booleanFieldAction&quot;:&quot;ALL_TRUE&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;currency&quot;,&quot;enabled&quot;:&quot;true&quot;,&quot;required&quot;:false,&quot;path&quot;:&quot;invoice.currency&quot;,&quot;value&quot;:&quot;CUX+2[2]&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;currentExchangeRate&quot;,&quot;enabled&quot;:&quot;false&quot;,&quot;required&quot;:false,&quot;path&quot;:&quot;invoice.currentExchangeRate&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;exchangeRate&quot;,&quot;enabled&quot;:&quot;true&quot;,&quot;required&quot;:false,&quot;path&quot;:&quot;invoice.exchangeRate&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;invoiceLines&quot;,&quot;enabled&quot;:&quot;true&quot;,&quot;required&quot;:false,&quot;path&quot;:&quot;invoice.invoiceLines[]&quot;,&quot;value&quot;:&quot;&quot;,&quot;repeatableFieldAction&quot;:&quot;EXTEND_EXISTING&quot;,&quot;subfields&quot;:[{&quot;order&quot;:0,&quot;path&quot;:&quot;invoice.invoiceLines[]&quot;,&quot;fields&quot;:[{&quot;name&quot;:&quot;description&quot;,&quot;enabled&quot;:&quot;true&quot;,&quot;required&quot;:false,&quot;path&quot;:&quot;invoice.invoiceLines[].description&quot;,&quot;value&quot;:&quot;{POL_title}; else IMD+F+050+[4-5]&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;poLineId&quot;,&quot;enabled&quot;:&quot;true&quot;,&quot;required&quot;:false,&quot;path&quot;:&quot;invoice.invoiceLines[].poLineId&quot;,&quot;value&quot;:&quot;RFF+SNL[2]&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;invoiceLineNumber&quot;,&quot;enabled&quot;:&quot;false&quot;,&quot;required&quot;:false,&quot;path&quot;:&quot;invoice.invoiceLines[].invoiceLineNumber&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;invoiceLineStatus&quot;,&quot;enabled&quot;:&quot;false&quot;,&quot;required&quot;:false,&quot;path&quot;:&quot;invoice.invoiceLines[].invoiceLineStatus&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;referenceNumbers&quot;,&quot;enabled&quot;:&quot;true&quot;,&quot;required&quot;:false,&quot;path&quot;:&quot;invoice.invoiceLines[].referenceNumbers[]&quot;,&quot;value&quot;:&quot;&quot;,&quot;repeatableFieldAction&quot;:&quot;EXTEND_EXISTING&quot;,&quot;subfields&quot;:[{&quot;order&quot;:0,&quot;path&quot;:&quot;invoice.invoiceLines[].referenceNumbers[]&quot;,&quot;fields&quot;:[{&quot;name&quot;:&quot;refNumber&quot;,&quot;enabled&quot;:&quot;true&quot;,&quot;required&quot;:false,&quot;path&quot;:&quot;invoice.invoiceLines[].referenceNumbers[].refNumber&quot;,&quot;value&quot;:&quot;RFF+SNA[2]&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;refNumberType&quot;,&quot;enabled&quot;:&quot;true&quot;,&quot;required&quot;:false,&quot;path&quot;:&quot;invoice.invoiceLines[].referenceNumbers[].refNumberType&quot;,&quot;value&quot;:&quot;\&quot;Vendor order reference number\&quot;&quot;,&quot;subfields&quot;:[]}]}]},{&quot;name&quot;:&quot;subscriptionInfo&quot;,&quot;enabled&quot;:&quot;true&quot;,&quot;required&quot;:false,&quot;path&quot;:&quot;invoice.invoiceLines[].subscriptionInfo&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;subscriptionStart&quot;,&quot;enabled&quot;:&quot;true&quot;,&quot;required&quot;:false,&quot;path&quot;:&quot;invoice.invoiceLines[].subscriptionStart&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;subscriptionEnd&quot;,&quot;enabled&quot;:&quot;true&quot;,&quot;required&quot;:false,&quot;path&quot;:&quot;invoice.invoiceLines[].subscriptionEnd&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;comment&quot;,&quot;enabled&quot;:&quot;true&quot;,&quot;required&quot;:false,&quot;path&quot;:&quot;invoice.invoiceLines[].comment&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;lineAccountingCode&quot;,&quot;enabled&quot;:&quot;false&quot;,&quot;required&quot;:false,&quot;path&quot;:&quot;invoice.invoiceLines[].accountingCode&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;accountNumber&quot;,&quot;enabled&quot;:&quot;true&quot;,&quot;required&quot;:false,&quot;path&quot;:&quot;invoice.invoiceLines[].accountNumber&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;quantity&quot;,&quot;enabled&quot;:&quot;true&quot;,&quot;required&quot;:false,&quot;path&quot;:&quot;invoice.invoiceLines[].quantity&quot;,&quot;value&quot;:&quot;QTY+47[2]&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;lineSubTotal&quot;,&quot;enabled&quot;:&quot;true&quot;,&quot;required&quot;:false,&quot;path&quot;:&quot;invoice.invoiceLines[].subTotal&quot;,&quot;value&quot;:&quot;MOA+203[2]&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;releaseEncumbrance&quot;,&quot;enabled&quot;:&quot;true&quot;,&quot;required&quot;:false,&quot;path&quot;:&quot;invoice.invoiceLines[].releaseEncumbrance&quot;,&quot;booleanFieldAction&quot;:&quot;ALL_TRUE&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;fundDistributions&quot;,&quot;enabled&quot;:&quot;true&quot;,&quot;required&quot;:false,&quot;path&quot;:&quot;invoice.invoiceLines[].fundDistributions[]&quot;,&quot;value&quot;:&quot;{POL_FUND_DISTRIBUTIONS}&quot;,&quot;subfields&quot;:[]},{&quot;name&quot;:&quot;lineAdjustments&quot;,&quot;enabled&quot;:&quot;true&quot;,&quot;required&quot;:false,&quot;path&quot;:&quot;invoice.invoiceLines[].adjustments[]&quot;,&quot;value&quot;:&quot;&quot;,&quot;subfields&quot;:[]}]}]}],&quot;marcMappingDetails&quot;:[]},&quot;hidden&quot;:false,&quot;metadata&quot;:{&quot;createdDate&quot;:&quot;2024-03-03T12:26:38.302+00:00&quot;,&quot;createdByUserId&quot;:&quot;${current_user_id}&quot;,&quot;updatedDate&quot;:&quot;2024-03-03T12:26:38.302+00:00&quot;,&quot;updatedByUserId&quot;:&quot;${current_user_id}&quot;}},&quot;addedRelations&quot;:[],&quot;deletedRelations&quot;:[]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">data-import-profiles/mappingProfiles</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor mappingProfiles_id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">mappingProfiles_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Create invoice Action profiles ${tenant}" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST/item actionProfiles" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;profile&quot;:{&quot;name&quot;:&quot;PTF - Invoice CNR(script)&quot;,&quot;description&quot;:&quot;&quot;,&quot;action&quot;:&quot;CREATE&quot;,&quot;folioRecord&quot;:&quot;INVOICE&quot;},&quot;addedRelations&quot;:[{&quot;masterProfileId&quot;:null,&quot;masterProfileType&quot;:&quot;ACTION_PROFILE&quot;,&quot;detailProfileId&quot;:&quot;${mappingProfiles_id}&quot;,&quot;detailProfileType&quot;:&quot;MAPPING_PROFILE&quot;}],&quot;deletedRelations&quot;:[]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">data-import-profiles/actionProfiles</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor actionProfiles_id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">actionProfiles_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Create Invoice Job profiles ${tenant}" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST/jobProfiles" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;profile&quot;:{&quot;name&quot;:&quot;PTF - Invoice CNR(script)&quot;,&quot;description&quot;:&quot;&quot;,&quot;dataType&quot;:&quot;EDIFACT&quot;},&quot;addedRelations&quot;:[{&quot;masterProfileId&quot;:null,&quot;masterWrapperId&quot;:null,&quot;masterProfileType&quot;:&quot;JOB_PROFILE&quot;,&quot;detailProfileId&quot;:&quot;${actionProfiles_id}&quot;,&quot;detailWrapperId&quot;:null,&quot;detailProfileType&quot;:&quot;ACTION_PROFILE&quot;,&quot;order&quot;:0}],&quot;deletedRelations&quot;:[]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">data-import-profiles/jobProfiles</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Z39.50 target profiles update" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${total_tenants}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${Global_ramp-up}</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV UsersInfo" enabled="true">
          <stringProp name="filename">${global_BaseDir}/jmeter-supported-data/UsersInfo.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">x-okapi-token,current_userID,servicePointId,hostname,tenant</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </ConfigTestElement>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="X-Okapi-Token" elementType="Header">
              <stringProp name="Header.name">X-Okapi-Tenant</stringProp>
              <stringProp name="Header.value">${tenant}</stringProp>
            </elementProp>
            <elementProp name="X-Okapi-Tenant" elementType="Header">
              <stringProp name="Header.name">X-Okapi-Token</stringProp>
              <stringProp name="Header.value">${x-okapi-token}</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Z39_TC: Z39.50 target profiles update ${tenant}" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Z39_GET_data-import-profiles_jobProfiles" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">5000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">data-import-profiles/jobProfiles</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor createJobProfileId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">createJobProfileId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.jobProfiles[?(@.name== &apos;Inventory Single Record - Default Create Instance&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">profile_name_not_found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor updateJobProfileId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">updateJobProfileId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.jobProfiles[?(@.name== &apos;Inventory Single Record - Default Update Instance&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">profile_name_not_found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Z39_GET_copycat/profiles" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">cql.allRecords=1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/copycat/profiles</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor JobProfileID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">JobProfileID</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.profiles[?(@.name== &apos;OCLC WorldCat&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">profile_name_not_found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Z39_GET_identifier-types" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">cql.allRecords=1%20sortby%20name</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">identifier-types</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">externalIdentifierType</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.identifierTypes[?(@.name== &apos;OCLC&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">profile_name_not_found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Z39_PUT_Authentication for Z39.50 target profile" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;id&quot;:&quot;${JobProfileID}&quot;,&quot;name&quot;:&quot;OCLC WorldCat&quot;,&quot;url&quot;:&quot;zcat.oclc.org/OLUCWorldCat&quot;,&quot;externalIdQueryMap&quot;:&quot;@attr 1=1211 $identifier&quot;,&quot;internalIdEmbedPath&quot;:&quot;999ff$i&quot;,&quot;createJobProfileId&quot;:&quot;${createJobProfileId}&quot;,&quot;updateJobProfileId&quot;:&quot;${updateJobProfileId}&quot;,&quot;allowedCreateJobProfileIds&quot;:[&quot;${createJobProfileId}&quot;],&quot;allowedUpdateJobProfileIds&quot;:[&quot;${updateJobProfileId}&quot;],&quot;targetOptions&quot;:{},&quot;externalIdentifierType&quot;:&quot;${externalIdentifierType}&quot;,&quot;enabled&quot;:true,&quot;authentication&quot;:&quot;${Authentication}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/copycat/profiles/${JobProfileID}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/plain</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49590">204</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <BackendListener guiclass="BackendListenerGui" testclass="BackendListener" testname="check" enabled="false">
        <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="profileName" elementType="Argument">
              <stringProp name="Argument.name">profileName</stringProp>
              <stringProp name="Argument.value">TEST</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="runId" elementType="Argument">
              <stringProp name="Argument.name">runId</stringProp>
              <stringProp name="Argument.value">R001</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="chUrl" elementType="Argument">
              <stringProp name="Argument.name">chUrl</stringProp>
              <stringProp name="Argument.value">localhost:8123</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="chUser" elementType="Argument">
              <stringProp name="Argument.name">chUser</stringProp>
              <stringProp name="Argument.value">default</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="chPassword" elementType="Argument">
              <stringProp name="Argument.name">chPassword</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="chDatabase" elementType="Argument">
              <stringProp name="Argument.name">chDatabase</stringProp>
              <stringProp name="Argument.value">default</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="samplersList" elementType="Argument">
              <stringProp name="Argument.name">samplersList</stringProp>
              <stringProp name="Argument.value">.*</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="useRegexForSamplerList" elementType="Argument">
              <stringProp name="Argument.name">useRegexForSamplerList</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="recordSubSamples" elementType="Argument">
              <stringProp name="Argument.name">recordSubSamples</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="groupBy" elementType="Argument">
              <stringProp name="Argument.name">groupBy</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="groupByCountOrBatchSize" elementType="Argument">
              <stringProp name="Argument.name">groupByCountOrBatchSize</stringProp>
              <stringProp name="Argument.value">100</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="recordAdditionalDataLevel" elementType="Argument">
              <stringProp name="Argument.name">recordAdditionalDataLevel</stringProp>
              <stringProp name="Argument.value">info</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="simulation" elementType="Argument">
              <stringProp name="Argument.name">simulation</stringProp>
              <stringProp name="Argument.value">${__P(test_name,test)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="influxDBPort" elementType="Argument">
              <stringProp name="Argument.name">influxDBPort</stringProp>
              <stringProp name="Argument.value">8086</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="testType" elementType="Argument">
              <stringProp name="Argument.name">testType</stringProp>
              <stringProp name="Argument.value">demo</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="buildID" elementType="Argument">
              <stringProp name="Argument.name">buildID</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="influxDBUser" elementType="Argument">
              <stringProp name="Argument.name">influxDBUser</stringProp>
              <stringProp name="Argument.value">${__P(influx.username,db_username)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="retentionPolicy" elementType="Argument">
              <stringProp name="Argument.name">retentionPolicy</stringProp>
              <stringProp name="Argument.value">${__P(influx.retention.policy,autogen)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="influxDBPassword" elementType="Argument">
              <stringProp name="Argument.name">influxDBPassword</stringProp>
              <stringProp name="Argument.value">${__P(influx.password,)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="influxDBDatabase" elementType="Argument">
              <stringProp name="Argument.name">influxDBDatabase</stringProp>
              <stringProp name="Argument.value">jmeter</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="influxDBHost" elementType="Argument">
              <stringProp name="Argument.name">influxDBHost</stringProp>
              <stringProp name="Argument.value">ec2-54-165-58-65.compute-1.amazonaws.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="envType" elementType="Argument">
              <stringProp name="Argument.name">envType</stringProp>
              <stringProp name="Argument.value">${__P(env_type,demo)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="periodicity" elementType="Argument">
              <stringProp name="Argument.name">periodicity</stringProp>
              <stringProp name="Argument.value">debug</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="periodicity_comment" elementType="Argument">
              <stringProp name="Argument.name">periodicity_comment</stringProp>
              <stringProp name="Argument.value">test_comment</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="loadGenerator" elementType="Argument">
              <stringProp name="Argument.name">loadGenerator</stringProp>
              <stringProp name="Argument.value">here</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </elementProp>
        <stringProp name="classname">cloud.testload.jmeter.ClickHouseBackendListenerClient</stringProp>
        <stringProp name="TestPlan.comments">http://carrier-io.int.folio.ebsco.comn Jenv_type test_name env_type</stringProp>
      </BackendListener>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
