<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.0 r1840935">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Share Instance" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables PCON" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="global_BaseDir" elementType="Argument">
            <stringProp name="Argument.name">global_BaseDir</stringProp>
            <stringProp name="Argument.value">${__BeanShell(import org.apache.jmeter.services.FileServer; FileServer.getFileServer().getBaseDir();)}${__BeanShell(File.separator,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="HOSTNAME" elementType="Argument">
            <stringProp name="Argument.name">HOSTNAME</stringProp>
            <stringProp name="Argument.value">${__P(HOSTNAME,okapi-ptf-consortium.int.aws.folio.org)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">[host-name]</stringProp>
          </elementProp>
          <elementProp name="Origin" elementType="Argument">
            <stringProp name="Argument.name">Origin</stringProp>
            <stringProp name="Argument.value">${__P(ORIGIN,ptf-consortium.int.aws.folio.org)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">[host-name] without &quot;okapi&quot;</stringProp>
          </elementProp>
          <elementProp name="username" elementType="Argument">
            <stringProp name="Argument.name">username</stringProp>
            <stringProp name="Argument.value">${__P(username,EBSCOAdmin)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="password" elementType="Argument">
            <stringProp name="Argument.name">password</stringProp>
            <stringProp name="Argument.value">${__P(password,oaK0zRrMqd0v40YfMUucpiGw)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="consortiumId" elementType="Argument">
            <stringProp name="Argument.name">consortiumId</stringProp>
            <stringProp name="Argument.value">${__P(consortiumId,1f06c60e-4431-432d-97a4-ca2bc6b152cb)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="sourceTenantId" elementType="Argument">
            <stringProp name="Argument.name">sourceTenantId</stringProp>
            <stringProp name="Argument.value">${__P(tenant,cs00000int_0001)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="targetTenantId" elementType="Argument">
            <stringProp name="Argument.name">targetTenantId</stringProp>
            <stringProp name="Argument.value">${__P(tenant,cs00000int)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Global_duration" elementType="Argument">
            <stringProp name="Argument.name">Global_duration</stringProp>
            <stringProp name="Argument.value">${__P(Global_duration, 1800)}</stringProp>
            <stringProp name="Argument.desc">Default duration | 1800 sec</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CSI //--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//" elementType="Argument">
            <stringProp name="Argument.name">CSI //--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//</stringProp>
            <stringProp name="Argument.value">Consortia Share Instance</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">/--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//</stringProp>
          </elementProp>
          <elementProp name="CSI_VUSERS" elementType="Argument">
            <stringProp name="Argument.name">CSI_VUSERS</stringProp>
            <stringProp name="Argument.value">${__P(CSI_VUSERS,1)}</stringProp>
            <stringProp name="Argument.desc">to run jobs simultaneously</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CSI_RAMP_UP" elementType="Argument">
            <stringProp name="Argument.name">CSI_RAMP_UP</stringProp>
            <stringProp name="Argument.value">${__P(CSI_RAMP_UP,0})}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">seconds</stringProp>
          </elementProp>
          <elementProp name="DI_pause" elementType="Argument">
            <stringProp name="Argument.name">DI_pause</stringProp>
            <stringProp name="Argument.value">${__P(DI_pause,300000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">miliseconds</stringProp>
          </elementProp>
          <elementProp name="instance_loop" elementType="Argument">
            <stringProp name="Argument.name">instance_loop</stringProp>
            <stringProp name="Argument.value">${__P(instance_loop,10)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables QCON" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="global_BaseDir" elementType="Argument">
            <stringProp name="Argument.name">global_BaseDir</stringProp>
            <stringProp name="Argument.value">${__BeanShell(import org.apache.jmeter.services.FileServer; FileServer.getFileServer().getBaseDir();)}${__BeanShell(File.separator,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="HOSTNAME" elementType="Argument">
            <stringProp name="Argument.name">HOSTNAME</stringProp>
            <stringProp name="Argument.value">${__P(HOSTNAME,kong-central-ecs-tenant.int.aws.folio.org)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">[host-name]</stringProp>
          </elementProp>
          <elementProp name="Origin" elementType="Argument">
            <stringProp name="Argument.name">Origin</stringProp>
            <stringProp name="Argument.value">${__P(ORIGIN,ptf-q-con.int.aws.folio.org)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">[host-name] without &quot;okapi&quot;</stringProp>
          </elementProp>
          <elementProp name="username" elementType="Argument">
            <stringProp name="Argument.name">username</stringProp>
            <stringProp name="Argument.value">${__P(username,EBSCOAdmin)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="password" elementType="Argument">
            <stringProp name="Argument.name">password</stringProp>
            <stringProp name="Argument.value">${__P(password,oaK0zRrMqd0v40YfMUucpiGw)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="consortiumId" elementType="Argument">
            <stringProp name="Argument.name">consortiumId</stringProp>
            <stringProp name="Argument.value">${__P(consortiumId,1f06c60e-4431-432d-97a4-ca2bc6b152cb)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="sourceTenantId" elementType="Argument">
            <stringProp name="Argument.name">sourceTenantId</stringProp>
            <stringProp name="Argument.value">${__P(tenant,cs00000int_0001)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="targetTenantId" elementType="Argument">
            <stringProp name="Argument.name">targetTenantId</stringProp>
            <stringProp name="Argument.value">${__P(tenant,cs00000int)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Global_duration" elementType="Argument">
            <stringProp name="Argument.name">Global_duration</stringProp>
            <stringProp name="Argument.value">${__P(Global_duration, 1800)}</stringProp>
            <stringProp name="Argument.desc">Default duration | 1800 sec</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CSI //--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//" elementType="Argument">
            <stringProp name="Argument.name">CSI //--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//</stringProp>
            <stringProp name="Argument.value">Consortia Share Instance</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">/--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//</stringProp>
          </elementProp>
          <elementProp name="CSI_VUSERS" elementType="Argument">
            <stringProp name="Argument.name">CSI_VUSERS</stringProp>
            <stringProp name="Argument.value">${__P(CSI_VUSERS,1)}</stringProp>
            <stringProp name="Argument.desc">to run jobs simultaneously</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CSI_RAMP_UP" elementType="Argument">
            <stringProp name="Argument.name">CSI_RAMP_UP</stringProp>
            <stringProp name="Argument.value">${__P(CSI_RAMP_UP,0})}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">seconds</stringProp>
          </elementProp>
          <elementProp name="DI_pause" elementType="Argument">
            <stringProp name="Argument.name">DI_pause</stringProp>
            <stringProp name="Argument.value">${__P(DI_pause,300000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">miliseconds</stringProp>
          </elementProp>
          <elementProp name="instance_loop" elementType="Argument">
            <stringProp name="Argument.name">instance_loop</stringProp>
            <stringProp name="Argument.value">${__P(instance_loop,10)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables QELC" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="global_BaseDir" elementType="Argument">
            <stringProp name="Argument.name">global_BaseDir</stringProp>
            <stringProp name="Argument.value">${__BeanShell(import org.apache.jmeter.services.FileServer; FileServer.getFileServer().getBaseDir();)}${__BeanShell(File.separator,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="HOSTNAME" elementType="Argument">
            <stringProp name="Argument.name">HOSTNAME</stringProp>
            <stringProp name="Argument.value">${__P(HOSTNAME,kong-central-ecs-tenant.int.aws.folio.org)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">[host-name]</stringProp>
          </elementProp>
          <elementProp name="Origin" elementType="Argument">
            <stringProp name="Argument.name">Origin</stringProp>
            <stringProp name="Argument.value">${__P(ORIGIN,central-ecs-tenant.int.aws.folio.org)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">[host-name] without &quot;okapi&quot;</stringProp>
          </elementProp>
          <elementProp name="username" elementType="Argument">
            <stringProp name="Argument.name">username</stringProp>
            <stringProp name="Argument.value">${__P(username,EBSCOAdmin)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="password" elementType="Argument">
            <stringProp name="Argument.name">password</stringProp>
            <stringProp name="Argument.value">${__P(password,jezxOjV4rwAoIIsOOs6Y4YCm)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ledgerId" elementType="Argument">
            <stringProp name="Argument.name">ledgerId</stringProp>
            <stringProp name="Argument.value">59a02ef2-d3a5-400e-83bb-cbde8b08bf99</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="token" elementType="Argument">
            <stringProp name="Argument.name">token</stringProp>
            <stringProp name="Argument.value">eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJpcU5ueFVCYjJ2X3NEY1huc3ZpSmdjNGRKMURydE1LOFJXVEJQYlhYVzhvIn0.eyJleHAiOjE3MTUzNDQ3MzIsImlhdCI6MTcxNTM0NDQzMiwiYXV0aF90aW1lIjoxNzE1MzQ0NDI5LCJqdGkiOiJhODAzMDMyMS1lNGU1LTQyZDQtYTcyNy0zNjA5OTI0YzUyMDUiLCJpc3MiOiJodHRwczovL2tleWNsb2FrLXFlbGMyLmludC5hd3MuZm9saW8ub3JnL3JlYWxtcy9jczAwMDAwaW50IiwiYXVkIjoiYWNjb3VudCIsInN1YiI6ImVic2NvYWRtaW4iLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJjczAwMDAwaW50LWFwcGxpY2F0aW9uIiwic2Vzc2lvbl9zdGF0ZSI6IjVmNGU0MTAzLTE4NDEtNDdjMS1hODUyLTQyNDlhYTk0YzQ0ZCIsImFjciI6IjAiLCJhbGxvd2VkLW9yaWdpbnMiOlsiLyoiXSwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwiZDRhMWRjZmY2ZmQxOGYyNDcxZTY2MzNkZTc5ZDkwMWM4ZTlhNmQ5MSIsImRlZmF1bHQtcm9sZXMtY3MwMDAwMGludCIsInVtYV9hdXRob3JpemF0aW9uIiwiU3lzdGVtIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgcHJvZmlsZSBlbWFpbCIsInNpZCI6IjVmNGU0MTAzLTE4NDEtNDdjMS1hODUyLTQyNDlhYTk0YzQ0ZCIsImVtYWlsX3ZlcmlmaWVkIjpmYWxzZSwidXNlcl9pZCI6IjlmOWQxYzQ2LTUyZTEtNGJiNy05YzZjLTU2ZTZiYjk0NWM0MiIsIm5hbWUiOiJFQlNDT0FkbWluIEVCU0NPQWRtaW4iLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJlYnNjb2FkbWluIiwiZ2l2ZW5fbmFtZSI6IkVCU0NPQWRtaW4iLCJmYW1pbHlfbmFtZSI6IkVCU0NPQWRtaW4iLCJlbWFpbCI6ImZzZS5ob3N0aW5nQGVic2NvLmNvbSJ9.GfvIHOw0aeTSTJkYB2FgxoYpz7CMDWfNtw7Ydq6zvIwxsebdnVr9v7ZscbpvpWHJSCuh-6VGup6ys3dDM3elvmXe6NnBwLa_K86HCmTHlfCFxohe_AN8F6lLeRdQRo7V5R6sjW9sfqlitf7_PYIHaEriSiaPaJ43-ANq31mlaQg-_tr-Twk67C7CWBURVAqsc4taYvHVF59AX8b5sfie1Y82hOFolAqnXLzoHMgUoaF-24niYHbFXG0K9lR7A0GcW61wLhYCz1Eleroz8jkpJp5zuMUBjp42rnzi4oCP7bBr6LvBj9p07ymOQQwGyxJdCzIz1DfpovdDGGO7u40w9A</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
      </CookieManager>
      <hashTree/>
      <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
        <boolProp name="clearEachIteration">true</boolProp>
        <boolProp name="useExpires">false</boolProp>
        <boolProp name="CacheManager.controlledByThread">false</boolProp>
      </CacheManager>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="sec-ch-ua" elementType="Header">
            <stringProp name="Header.name">sec-ch-ua</stringProp>
            <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;111&quot;, &quot;Not(A:Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;111&quot;</stringProp>
          </elementProp>
          <elementProp name="sec-ch-ua-mobile" elementType="Header">
            <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
            <stringProp name="Header.value">?0</stringProp>
          </elementProp>
          <elementProp name="sec-ch-ua-platform" elementType="Header">
            <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
            <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
          </elementProp>
          <elementProp name="User-Agent" elementType="Header">
            <stringProp name="Header.name">User-Agent</stringProp>
            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36</stringProp>
          </elementProp>
          <elementProp name="Accept-Language" elementType="Header">
            <stringProp name="Header.name">Accept-Language</stringProp>
            <stringProp name="Header.value">en-US</stringProp>
          </elementProp>
          <elementProp name="Sec-Fetch-Site" elementType="Header">
            <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
            <stringProp name="Header.value">same-site</stringProp>
          </elementProp>
          <elementProp name="Sec-Fetch-Mode" elementType="Header">
            <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
            <stringProp name="Header.value">cors</stringProp>
          </elementProp>
          <elementProp name="Sec-Fetch-Dest" elementType="Header">
            <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
            <stringProp name="Header.value">empty</stringProp>
          </elementProp>
          <elementProp name="Accept-Encoding" elementType="Header">
            <stringProp name="Header.name">Accept-Encoding</stringProp>
            <stringProp name="Header.value">gzip, deflate, br</stringProp>
          </elementProp>
          <elementProp name="X-Okapi-Tenant" elementType="Header">
            <stringProp name="Header.name">X-Okapi-Tenant</stringProp>
            <stringProp name="Header.value">${targetTenantId}</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Accept</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
          <elementProp name="Referer" elementType="Header">
            <stringProp name="Header.name">Referer</stringProp>
            <stringProp name="Header.value">https://${Origin}</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager for QELC" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="Accept" elementType="Header">
            <stringProp name="Header.name">Accept</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
          <elementProp name="Accept-Encoding" elementType="Header">
            <stringProp name="Header.name">Accept-Encoding</stringProp>
            <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
          </elementProp>
          <elementProp name="Accept-Language" elementType="Header">
            <stringProp name="Header.name">Accept-Language</stringProp>
            <stringProp name="Header.value">en-US</stringProp>
          </elementProp>
          <elementProp name="User-Agent" elementType="Header">
            <stringProp name="Header.name">User-Agent</stringProp>
            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36</stringProp>
          </elementProp>
          <elementProp name="Referer" elementType="Header">
            <stringProp name="Header.name">Referer</stringProp>
            <stringProp name="Header.value">https://central-ecs-tenant.int.aws.folio.org/</stringProp>
          </elementProp>
          <elementProp name="X-Okapi-Tenant" elementType="Header">
            <stringProp name="Header.name">X-Okapi-Tenant</stringProp>
            <stringProp name="Header.value">cs00000int</stringProp>
          </elementProp>
          <elementProp name="Content-Type" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="Login" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </SetupThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET bl-users/_self" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;username&quot;:&quot;${username}&quot;,&quot;password&quot;:&quot;${password}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/bl-users/login-with-expiry?expandPermissions=true&amp;fullPermissions=true</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResultAction guiclass="ResultActionGui" testclass="ResultAction" testname="Result Status Action Handler" enabled="true">
            <intProp name="OnError.action">2</intProp>
          </ResultAction>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - x-okapi-token" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
            <stringProp name="RegexExtractor.refname">x-okapi-token</stringProp>
            <stringProp name="RegexExtractor.regex">x-okapi-token: (.+)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Save to properties" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">props.put(&quot;x-okapi-token&quot;, vars.get(&quot;x-okapi-token&quot;));</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 201" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49587">201</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="MyCookie BeanShell" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">props.put(&quot;folioAccessToken&quot;,&quot;${COOKIE_folioAccessToken}&quot;);</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET bl-users/_self" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;username&quot;:&quot;${username}&quot;,&quot;password&quot;:&quot;${password}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/bl-users/login-with-expiry?expandPermissions=true&amp;fullPermissions=true</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResultAction guiclass="ResultActionGui" testclass="ResultAction" testname="Result Status Action Handler" enabled="true">
            <intProp name="OnError.action">2</intProp>
          </ResultAction>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - x-okapi-token" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
            <stringProp name="RegexExtractor.refname">x-okapi-token</stringProp>
            <stringProp name="RegexExtractor.regex">x-okapi-token: (.+)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Save to properties" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">props.put(&quot;x-okapi-token&quot;, vars.get(&quot;x-okapi-token&quot;));</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 201" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49587">201</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="MyCookie BeanShell" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">props.put(&quot;folioAccessToken&quot;,&quot;${COOKIE_folioAccessToken}&quot;);</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Finance" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">7</stringProp>
        <stringProp name="ThreadGroup.ramp_time">4</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="TestPlan.comments">${CSI_VUSERS} ${CSI_RAMP_UP}</stringProp>
      </ThreadGroup>
      <hashTree>
        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor folioAccessToken" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;

CookieManager manager = sampler.getCookieManager();
Cookie cookie = new Cookie(&quot;folioAccessToken&quot;,&quot;${token}&quot;, &quot;kong-central-ecs-tenant.int.aws.folio.org&quot;,&quot;/&quot;,false,0);
manager.add(cookie);</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223PreProcessor>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="X-Okapi-Tenant" elementType="Header">
              <stringProp name="Header.name">X-Okapi-Tenant</stringProp>
              <stringProp name="Header.value">cs00000int_0001</stringProp>
            </elementProp>
            <elementProp name="x-okapi-token" elementType="Header">
              <stringProp name="Header.name">COOKIE_folioAccessToken</stringProp>
              <stringProp name="Header.value">${__P(COOKIE_folioAccessToken)}</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CSI_POST /finance/funds - Create FUND" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;fund&quot;:{&quot;fundStatus&quot;:&quot;Active&quot;,&quot;restrictByLocations&quot;:false,&quot;name&quot;:&quot;Perf_fund_${rand}&quot;,&quot;code&quot;:&quot;Perf_fund_CODE_${rand}&quot;,&quot;ledgerId&quot;:&quot;${ledgerId}&quot;,&quot;externalAccountNo&quot;:&quot;${externalAccountNo}&quot;},&quot;groupIds&quot;:[]}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">kong-central-ecs-tenant.int.aws.folio.org</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/finance/funds</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="3492901">rand</stringProp>
              <stringProp name="1814990147">externalAccountNo</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-1539586634">
                <stringProp name="1071513569">${__Random(1000,9999,)}</stringProp>
                <stringProp name="1636144961">${__Random(100000,999999,)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">fundID</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.fund.id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">fundID_NOT_FOUND</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CSI_POST /finance/funds - Add budget to fund" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;fiscalYearId&quot;:&quot;7a4c4d30-3b63-4102-8e2d-3ee5792d7d02&quot;,&quot;budgetStatus&quot;:&quot;Active&quot;,&quot;allowableExpenditure&quot;:100,&quot;allowableEncumbrance&quot;:100,&quot;allocated&quot;:&quot;500&quot;,&quot;fundId&quot;:&quot;${fundID}&quot;,&quot;name&quot;:&quot;Perf_fund_CODE_${rand}-FY2024&quot;,&quot;id&quot;:&quot;${__UUID}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">kong-central-ecs-tenant.int.aws.folio.org</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/finance/budgets</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="3492901">rand</stringProp>
              <stringProp name="1814990147">externalAccountNo</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-1539586634">
                <stringProp name="1071513569">${__Random(1000,9999,)}</stringProp>
                <stringProp name="1636144961">${__Random(100000,999999,)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">budgetId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">budgetId_NOT_FOUND</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CSI_PUT /finance/funds - Add classes" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;id&quot;: &quot;${budgetId}&quot;,&#xd;
    &quot;_version&quot;: 2,&#xd;
    &quot;name&quot;: &quot;Perf_fund_CODE_${rand}-FY2024&quot;,&#xd;
    &quot;budgetStatus&quot;: &quot;Active&quot;,&#xd;
    &quot;allowableEncumbrance&quot;: 100,&#xd;
    &quot;allowableExpenditure&quot;: 100,&#xd;
    &quot;allocated&quot;: 500,&#xd;
    &quot;awaitingPayment&quot;: 0,&#xd;
    &quot;available&quot;: 500,&#xd;
    &quot;encumbered&quot;: 0,&#xd;
    &quot;expenditures&quot;: 0,&#xd;
    &quot;netTransfers&quot;: 0,&#xd;
    &quot;unavailable&quot;: 0,&#xd;
    &quot;overEncumbrance&quot;: 0,&#xd;
    &quot;overExpended&quot;: 0,&#xd;
    &quot;fundId&quot;: &quot;${fundID}&quot;,&#xd;
    &quot;fiscalYearId&quot;: &quot;7a4c4d30-3b63-4102-8e2d-3ee5792d7d02&quot;,&#xd;
    &quot;acqUnitIds&quot;: [],&#xd;
    &quot;metadata&quot;: {&#xd;
        &quot;createdDate&quot;: &quot;2024-05-10T09:53:58.784+00:00&quot;,&#xd;
        &quot;createdByUserId&quot;: &quot;9f9d1c46-52e1-4bb7-9c6c-56e6bb945c42&quot;,&#xd;
        &quot;updatedDate&quot;: &quot;2024-05-10T09:53:58.863+00:00&quot;,&#xd;
        &quot;updatedByUserId&quot;: &quot;9f9d1c46-52e1-4bb7-9c6c-56e6bb945c42&quot;&#xd;
    },&#xd;
    &quot;initialAllocation&quot;: 500,&#xd;
    &quot;allocationTo&quot;: 0,&#xd;
    &quot;allocationFrom&quot;: 0,&#xd;
    &quot;totalFunding&quot;: 500,&#xd;
    &quot;cashBalance&quot;: 500,&#xd;
    &quot;statusExpenseClasses&quot;: [{&#xd;
            &quot;status&quot;: &quot;Active&quot;,&#xd;
            &quot;expenseClassId&quot;: &quot;e77f9d0b-d39c-4c4c-b274-2621fdc24477&quot;&#xd;
        }, {&#xd;
            &quot;status&quot;: &quot;Active&quot;,&#xd;
            &quot;expenseClassId&quot;: &quot;284c78f9-27bd-4b01-a3f4-3944077b79e8&quot;&#xd;
        }, {&#xd;
            &quot;status&quot;: &quot;Active&quot;,&#xd;
            &quot;expenseClassId&quot;: &quot;a5189cbf-05f3-4d70-8faa-d4c241e8e0ae&quot;&#xd;
        }, {&#xd;
            &quot;status&quot;: &quot;Active&quot;,&#xd;
            &quot;expenseClassId&quot;: &quot;094b3973-b1e5-4e2b-85e6-ca7e4370e042&quot;&#xd;
        }, {&#xd;
            &quot;status&quot;: &quot;Active&quot;,&#xd;
            &quot;expenseClassId&quot;: &quot;8c474586-78bb-4860-ab8e-15c0af42340c&quot;&#xd;
        }, {&#xd;
            &quot;status&quot;: &quot;Active&quot;,&#xd;
            &quot;expenseClassId&quot;: &quot;decc2bc9-5b73-4630-9359-b41324562499&quot;&#xd;
        }, {&#xd;
            &quot;status&quot;: &quot;Active&quot;,&#xd;
            &quot;expenseClassId&quot;: &quot;3e713ee4-58dd-4add-b67c-12a017db24c4&quot;&#xd;
        }, {&#xd;
            &quot;status&quot;: &quot;Active&quot;,&#xd;
            &quot;expenseClassId&quot;: &quot;ed51733d-7737-4b4a-8cf5-8b7fc4355dd6&quot;&#xd;
        }, {&#xd;
            &quot;status&quot;: &quot;Active&quot;,&#xd;
            &quot;expenseClassId&quot;: &quot;6774d3a8-a12c-4ed9-8fe9-aff3360088a1&quot;&#xd;
        }, {&#xd;
            &quot;status&quot;: &quot;Active&quot;,&#xd;
            &quot;expenseClassId&quot;: &quot;f8ed15cb-cdd3-4992-8726-507a5561cd55&quot;&#xd;
        }, {&#xd;
            &quot;status&quot;: &quot;Active&quot;,&#xd;
            &quot;expenseClassId&quot;: &quot;046fd605-830a-462d-8472-2de7f8c60d65&quot;&#xd;
        }, {&#xd;
            &quot;status&quot;: &quot;Active&quot;,&#xd;
            &quot;expenseClassId&quot;: &quot;a5d8c0aa-1656-420b-9afe-d8938a21220b&quot;&#xd;
        }, {&#xd;
            &quot;status&quot;: &quot;Active&quot;,&#xd;
            &quot;expenseClassId&quot;: &quot;5d5d51e7-043d-4e36-b091-d239e804e4c9&quot;&#xd;
        }, {&#xd;
            &quot;status&quot;: &quot;Active&quot;,&#xd;
            &quot;expenseClassId&quot;: &quot;d0c029ed-72ca-4647-aa8b-5419b6c5340c&quot;&#xd;
        }, {&#xd;
            &quot;status&quot;: &quot;Active&quot;,&#xd;
            &quot;expenseClassId&quot;: &quot;ed6cea28-86a9-4749-8cc3-0d9f1c616a67&quot;&#xd;
        }, {&#xd;
            &quot;status&quot;: &quot;Active&quot;,&#xd;
            &quot;expenseClassId&quot;: &quot;0649251e-08f4-4ef2-ab5f-633e3fbd31ce&quot;&#xd;
        }, {&#xd;
            &quot;status&quot;: &quot;Active&quot;,&#xd;
            &quot;expenseClassId&quot;: &quot;7fad64dc-6206-42f5-bf62-1f8ee5f3cc8d&quot;&#xd;
        }, {&#xd;
            &quot;status&quot;: &quot;Active&quot;,&#xd;
            &quot;expenseClassId&quot;: &quot;ac80420c-4b85-4cec-9feb-22604c5e584f&quot;&#xd;
        }, {&#xd;
            &quot;status&quot;: &quot;Active&quot;,&#xd;
            &quot;expenseClassId&quot;: &quot;9628e2f0-0fde-4346-8466-c7bbe60ca6da&quot;&#xd;
        }, {&#xd;
            &quot;status&quot;: &quot;Active&quot;,&#xd;
            &quot;expenseClassId&quot;: &quot;00a69514-021e-45df-9380-8a1d3b8afbf3&quot;&#xd;
        }, {&#xd;
            &quot;status&quot;: &quot;Active&quot;,&#xd;
            &quot;expenseClassId&quot;: &quot;8b6ecdb4-e306-4288-b1a4-fc555178c8bf&quot;&#xd;
        }, {&#xd;
            &quot;status&quot;: &quot;Active&quot;,&#xd;
            &quot;expenseClassId&quot;: &quot;43ff6908-2a05-4145-8730-e43505320c23&quot;&#xd;
        }, {&#xd;
            &quot;status&quot;: &quot;Active&quot;,&#xd;
            &quot;expenseClassId&quot;: &quot;4a8ba918-463b-48a1-a24b-e926faad2025&quot;&#xd;
        }, {&#xd;
            &quot;status&quot;: &quot;Active&quot;,&#xd;
            &quot;expenseClassId&quot;: &quot;61ee8b21-c800-4722-ba0b-05d4ca602cf5&quot;&#xd;
        }, {&#xd;
            &quot;status&quot;: &quot;Active&quot;,&#xd;
            &quot;expenseClassId&quot;: &quot;0616b415-25a1-46cf-b1aa-1985b8b2e849&quot;&#xd;
        }, {&#xd;
            &quot;status&quot;: &quot;Active&quot;,&#xd;
            &quot;expenseClassId&quot;: &quot;da3dfb85-5a68-4436-90fc-2fd5bc72110b&quot;&#xd;
        }, {&#xd;
            &quot;status&quot;: &quot;Active&quot;,&#xd;
            &quot;expenseClassId&quot;: &quot;316a0727-0bed-4d6c-9e50-f1641d6070c2&quot;&#xd;
        }, {&#xd;
            &quot;status&quot;: &quot;Active&quot;,&#xd;
            &quot;expenseClassId&quot;: &quot;84da2903-5a02-4e01-96ab-3835c786bebf&quot;&#xd;
        }, {&#xd;
            &quot;status&quot;: &quot;Active&quot;,&#xd;
            &quot;expenseClassId&quot;: &quot;e8648157-26e7-4813-ab90-4de178dc23a9&quot;&#xd;
        }, {&#xd;
            &quot;status&quot;: &quot;Active&quot;,&#xd;
            &quot;expenseClassId&quot;: &quot;ea93795c-aefe-4c21-b0c3-8703c7da6add&quot;&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">kong-central-ecs-tenant.int.aws.folio.org</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/finance/budgets/${budgetId}</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="3492901">rand</stringProp>
              <stringProp name="1814990147">externalAccountNo</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-1539586634">
                <stringProp name="1071513569">${__Random(1000,9999,)}</stringProp>
                <stringProp name="1636144961">${__Random(100000,999999,)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">true</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
        <boolProp name="displayJMeterProperties">false</boolProp>
        <boolProp name="displayJMeterVariables">true</boolProp>
        <boolProp name="displaySamplerProperties">true</boolProp>
        <boolProp name="displaySystemProperties">false</boolProp>
      </DebugPostProcessor>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
