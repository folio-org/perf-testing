<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="ASA" enabled="true">
      <stringProp name="TestPlan.comments">This script was created by PTF team</stringProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables RCON" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="Global_duration" elementType="Argument">
            <stringProp name="Argument.name">Global_duration</stringProp>
            <stringProp name="Argument.value">${__P(Global_duration,700)}</stringProp>
            <stringProp name="Argument.desc">Default duration | 1800 sec</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="global_BaseDir" elementType="Argument">
            <stringProp name="Argument.name">global_BaseDir</stringProp>
            <stringProp name="Argument.value">${__BeanShell(import org.apache.jmeter.services.FileServer; FileServer.getFileServer().getBaseDir();)}${__BeanShell(File.separator,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="hostName" elementType="Argument">
            <stringProp name="Argument.name">hostName</stringProp>
            <stringProp name="Argument.value">${__P(HOSTNAME,ecs-folio-etesting-snapshot-kong.ci.folio.org)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">kong-[host-name]</stringProp>
          </elementProp>
          <elementProp name="Origin" elementType="Argument">
            <stringProp name="Argument.name">Origin</stringProp>
            <stringProp name="Argument.value">${__P(ORIGIN,folio-etesting-snapshot-consortium.ci.folio.org)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">[host-name]</stringProp>
          </elementProp>
          <elementProp name="username" elementType="Argument">
            <stringProp name="Argument.name">username</stringProp>
            <stringProp name="Argument.value">${__P(username,XXXXX)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="password" elementType="Argument">
            <stringProp name="Argument.name">password</stringProp>
            <stringProp name="Argument.value">${__P(password,XXXXX )}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AIE //--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//" elementType="Argument">
            <stringProp name="Argument.name">AIE //--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//</stringProp>
            <stringProp name="Argument.value">AIE Manage invoices GROUP</stringProp>
            <stringProp name="Argument.desc">//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AIE_vusers" elementType="Argument">
            <stringProp name="Argument.name">AIE_vusers</stringProp>
            <stringProp name="Argument.value">${__P(AIE_vusers, 3)}</stringProp>
            <stringProp name="Argument.desc">Default users: 1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AIE_rampup" elementType="Argument">
            <stringProp name="Argument.name">AIE_rampup</stringProp>
            <stringProp name="Argument.value">${__P(AIE_rampup, 1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AIE_view_distribution" elementType="Argument">
            <stringProp name="Argument.name">AIE_view_distribution</stringProp>
            <stringProp name="Argument.value">${__P(AIE_view_distribution, 50-50)}</stringProp>
            <stringProp name="Argument.desc">Default 50-50 search open, by name</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AIE_Throughput" elementType="Argument">
            <stringProp name="Argument.name">AIE_Throughput</stringProp>
            <stringProp name="Argument.value">${__P(AIE_Throughput, 135.0)} </stringProp>
            <stringProp name="Argument.desc">operations per minute</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="EI //--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//" elementType="Argument">
            <stringProp name="Argument.name">EI //--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//</stringProp>
            <stringProp name="Argument.value">Export Invoice to CSV</stringProp>
            <stringProp name="Argument.desc">//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="EI_vusers" elementType="Argument">
            <stringProp name="Argument.name">EI_vusers</stringProp>
            <stringProp name="Argument.value">${__P(EI_vusers, 1)}</stringProp>
            <stringProp name="Argument.desc">Default users: 1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="EI_rampup" elementType="Argument">
            <stringProp name="Argument.name">EI_rampup</stringProp>
            <stringProp name="Argument.value">${__P(EI_rampup, 1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="EI_loops" elementType="Argument">
            <stringProp name="Argument.name">EI_loops</stringProp>
            <stringProp name="Argument.value">${__P(EI_loops, 1)}</stringProp>
            <stringProp name="Argument.desc">Default Infinite</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SVO //--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//" elementType="Argument">
            <stringProp name="Argument.name">SVO //--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//</stringProp>
            <stringProp name="Argument.value">Search View Orders</stringProp>
            <stringProp name="Argument.desc">//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SVO_vusers" elementType="Argument">
            <stringProp name="Argument.name">SVO_vusers</stringProp>
            <stringProp name="Argument.value">${__P(SVO_vusers, 41)}</stringProp>
            <stringProp name="Argument.desc">Default users: 35</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SVO_rampup" elementType="Argument">
            <stringProp name="Argument.name">SVO_rampup</stringProp>
            <stringProp name="Argument.value">${__P(SVO_rampup, 1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SVO_Throughput" elementType="Argument">
            <stringProp name="Argument.name">SVO_Throughput</stringProp>
            <stringProp name="Argument.value">${__P(SVO_Throughput, 70.0)} </stringProp>
            <stringProp name="Argument.desc">operations per minute</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="POO //--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//" elementType="Argument">
            <stringProp name="Argument.name">POO //--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//</stringProp>
            <stringProp name="Argument.value">Purchase orders operations</stringProp>
            <stringProp name="Argument.desc">//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="POO_distribution" elementType="Argument">
            <stringProp name="Argument.name">POO_distribution</stringProp>
            <stringProp name="Argument.value">${__P(POO_distribution, 90-10)}</stringProp>
            <stringProp name="Argument.desc">Default 50-50 approve,delete</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="POO_vusers" elementType="Argument">
            <stringProp name="Argument.name">POO_vusers</stringProp>
            <stringProp name="Argument.value">${__P(POO_vusers, 1)}</stringProp>
            <stringProp name="Argument.desc">Default users: 1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="POO_rampup" elementType="Argument">
            <stringProp name="Argument.name">POO_rampup</stringProp>
            <stringProp name="Argument.value">${__P(POO_rampup, 10)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="POO_Throughput" elementType="Argument">
            <stringProp name="Argument.name">POO_Throughput</stringProp>
            <stringProp name="Argument.value">${__P(POO_Throughput, 325.0)} </stringProp>
            <stringProp name="Argument.desc">operations per minute</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="VRO //--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//" elementType="Argument">
            <stringProp name="Argument.name">VRO //--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//</stringProp>
            <stringProp name="Argument.value">Vendor records operations</stringProp>
            <stringProp name="Argument.desc">//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="VRO_vusers" elementType="Argument">
            <stringProp name="Argument.name">VRO_vusers</stringProp>
            <stringProp name="Argument.value">${__P(VRO_vusers, 1)}</stringProp>
            <stringProp name="Argument.desc">Default users: 1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="VRO_rampup" elementType="Argument">
            <stringProp name="Argument.name">VRO_rampup</stringProp>
            <stringProp name="Argument.value">${__P(VRO_rampup, 1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="VRO_Throughput" elementType="Argument">
            <stringProp name="Argument.name">VRO_Throughput</stringProp>
            <stringProp name="Argument.value">${__P(VRO_Throughput, 20.0)} </stringProp>
            <stringProp name="Argument.desc">operations per minute</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LO  //--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//" elementType="Argument">
            <stringProp name="Argument.name">LO  //--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//</stringProp>
            <stringProp name="Argument.value">Ledger operationsa</stringProp>
            <stringProp name="Argument.desc"> /--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LO_vusers" elementType="Argument">
            <stringProp name="Argument.name">LO_vusers</stringProp>
            <stringProp name="Argument.value">${__P(LO_vusers,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LO_rampup" elementType="Argument">
            <stringProp name="Argument.name">LO_rampup</stringProp>
            <stringProp name="Argument.value">${__P(LO_rampup,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LO_Throughput" elementType="Argument">
            <stringProp name="Argument.name">LO_Throughput</stringProp>
            <stringProp name="Argument.value">${__P(LO_Throughput, 18.0)} </stringProp>
            <stringProp name="Argument.desc">operations per minute</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FFBA //--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//" elementType="Argument">
            <stringProp name="Argument.name">FFBA //--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//</stringProp>
            <stringProp name="Argument.value">Finance Fund Budget Allocation</stringProp>
            <stringProp name="Argument.desc">/--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FFBA_vusers" elementType="Argument">
            <stringProp name="Argument.name">FFBA_vusers</stringProp>
            <stringProp name="Argument.value">${__P(FFBA_vusers,1)}</stringProp>
            <stringProp name="Argument.desc">to run jobs simultaneously</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FFBA_rampup" elementType="Argument">
            <stringProp name="Argument.name">FFBA_rampup</stringProp>
            <stringProp name="Argument.value">${__P(FFBA_rampup,1)}</stringProp>
            <stringProp name="Argument.desc">seconds</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FFBA_Throughput" elementType="Argument">
            <stringProp name="Argument.name">FFBA_Throughput</stringProp>
            <stringProp name="Argument.value">${__P(FFBA_Throughput, 70.0)} </stringProp>
            <stringProp name="Argument.desc">operations per minute</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="allocated_sum" elementType="Argument">
            <stringProp name="Argument.name">allocated_sum</stringProp>
            <stringProp name="Argument.value">${__P(allocated_sum,100000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="allocate_increase_decrease" elementType="Argument">
            <stringProp name="Argument.name">allocate_increase_decrease</stringProp>
            <stringProp name="Argument.value">${__P(allocate_increase_decrease,50)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="allocation_loops" elementType="Argument">
            <stringProp name="Argument.name">allocation_loops</stringProp>
            <stringProp name="Argument.value">${__P(allocation_loops,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="allocation_loops_pause" elementType="Argument">
            <stringProp name="Argument.name">allocation_loops_pause</stringProp>
            <stringProp name="Argument.value">${__P(allocation_loops_pause,1000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TB //--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//" elementType="Argument">
            <stringProp name="Argument.name">TB //--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//</stringProp>
            <stringProp name="Argument.value">Transfer Budgets</stringProp>
            <stringProp name="Argument.desc">/--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TB_TRANSFER_COUNT" elementType="Argument">
            <stringProp name="Argument.name">TB_TRANSFER_COUNT</stringProp>
            <stringProp name="Argument.value">${__P(TB_TRANSFER_COUNT,5)}</stringProp>
            <stringProp name="Argument.desc">Count Transfer transaction</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TB_vusers" elementType="Argument">
            <stringProp name="Argument.name">TB_vusers</stringProp>
            <stringProp name="Argument.value">${__P(TB_vusers,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TB_rampup" elementType="Argument">
            <stringProp name="Argument.name">TB_rampup</stringProp>
            <stringProp name="Argument.value">${__P(TB_rampup,1})}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TB_Throughput" elementType="Argument">
            <stringProp name="Argument.name">TB_Throughput</stringProp>
            <stringProp name="Argument.value">${__P(TB_Throughput, 15.0)} </stringProp>
            <stringProp name="Argument.desc">operations per minute</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ERW //--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//" elementType="Argument">
            <stringProp name="Argument.name">ERW //--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//</stringProp>
            <stringProp name="Argument.value">Exporting Receiving Information to CSV</stringProp>
            <stringProp name="Argument.desc">//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ERW_distribution" elementType="Argument">
            <stringProp name="Argument.name">ERW_distribution</stringProp>
            <stringProp name="Argument.value">${__P(ERW_distribution, 50-50)}</stringProp>
            <stringProp name="Argument.desc">Default 50-50 search open, by name</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ERW_vusers" elementType="Argument">
            <stringProp name="Argument.name">ERW_vusers</stringProp>
            <stringProp name="Argument.value">${__P(ERW_vusers, 1)}</stringProp>
            <stringProp name="Argument.desc">Default users: 1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ERW_rampup" elementType="Argument">
            <stringProp name="Argument.name">ERW_rampup</stringProp>
            <stringProp name="Argument.value">${__P(ERW_rampup, 1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ERW_Throughput" elementType="Argument">
            <stringProp name="Argument.name">ERW_Throughput</stringProp>
            <stringProp name="Argument.value">${__P(ERW_Throughput, 38.0)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ERW_loops" elementType="Argument">
            <stringProp name="Argument.name">ERW_loops</stringProp>
            <stringProp name="Argument.value">${__P(ERW_loops,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ERW_req_loop" elementType="Argument">
            <stringProp name="Argument.name">ERW_req_loop</stringProp>
            <stringProp name="Argument.value">500</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ERW_loops" elementType="Argument">
            <stringProp name="Argument.name">ERW_loops</stringProp>
            <stringProp name="Argument.value">${__P(ERW_loops,-1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RW //--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//" elementType="Argument">
            <stringProp name="Argument.name">RW //--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//</stringProp>
            <stringProp name="Argument.value">Receiving</stringProp>
            <stringProp name="Argument.desc">//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RW_vusers" elementType="Argument">
            <stringProp name="Argument.name">RW_vusers</stringProp>
            <stringProp name="Argument.value">${__P(RW_vusers, 3)}</stringProp>
            <stringProp name="Argument.desc">Default users: 1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RW_rampup" elementType="Argument">
            <stringProp name="Argument.name">RW_rampup</stringProp>
            <stringProp name="Argument.value">${__P(RW_rampup, 1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RW_Throughput" elementType="Argument">
            <stringProp name="Argument.name">RW_Throughput</stringProp>
            <stringProp name="Argument.value">${__P(RW_Throughput,205.0)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="APO //--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//" elementType="Argument">
            <stringProp name="Argument.name">APO //--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//</stringProp>
            <stringProp name="Argument.value">Adding POLines</stringProp>
            <stringProp name="Argument.desc">//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="APO_vusers" elementType="Argument">
            <stringProp name="Argument.name">APO_vusers</stringProp>
            <stringProp name="Argument.value">${__P(APO_vusers, 1)}</stringProp>
            <stringProp name="Argument.desc">Default users: 1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="APO_rampup" elementType="Argument">
            <stringProp name="Argument.name">APO_rampup</stringProp>
            <stringProp name="Argument.value">${__P(APO_rampup, 1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="APO_Throughput" elementType="Argument">
            <stringProp name="Argument.name">APO_Throughput</stringProp>
            <stringProp name="Argument.value">${__P(APO_Throughput, 305.0)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="APO_po_lines" elementType="Argument">
            <stringProp name="Argument.name">APO_po_lines</stringProp>
            <stringProp name="Argument.value">${__P(APO_po_lines,85)}</stringProp>
            <stringProp name="Argument.desc">By requirements APO_po_lines should be 85 per invoice. No description added for load. This throughput switched off to get baseline numbers.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="APO_distribution" elementType="Argument">
            <stringProp name="Argument.name">APO_distribution</stringProp>
            <stringProp name="Argument.value">${__P(APO_distribution, 50-50)}</stringProp>
            <stringProp name="Argument.desc">Default 50-50 search open, by name</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="APO_loop_pause" elementType="Argument">
            <stringProp name="Argument.name">APO_loop_pause</stringProp>
            <stringProp name="Argument.value">${__P(APO_loop_pause,1000)}</stringProp>
            <stringProp name="Argument.desc">By requirements APO_po_lines should be 85 per invoice. No description added for load. This throughput switched off to get baseline numbers.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UP  //--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//" elementType="Argument">
            <stringProp name="Argument.name">UP  //--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//</stringProp>
            <stringProp name="Argument.value">Updating Pieces</stringProp>
            <stringProp name="Argument.desc"> /--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UP_vusers" elementType="Argument">
            <stringProp name="Argument.name">UP_vusers</stringProp>
            <stringProp name="Argument.value">${__P(UP_vusers,30)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UP_rampup" elementType="Argument">
            <stringProp name="Argument.name">UP_rampup</stringProp>
            <stringProp name="Argument.value">${__P(UP_rampup,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UP_Throughput" elementType="Argument">
            <stringProp name="Argument.name">UP_Throughput</stringProp>
            <stringProp name="Argument.value">${__P(UP_Throughput, 34.0)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="consortiumId" elementType="Argument">
            <stringProp name="Argument.name">consortiumId</stringProp>
            <stringProp name="Argument.value">${__P(consortiumId,5d520da9-bad3-4558-ada1-aa9715255b31)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="delay" elementType="Argument">
            <stringProp name="Argument.name">delay</stringProp>
            <stringProp name="Argument.value">3</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="tenant" elementType="Argument">
            <stringProp name="Argument.name">tenant</stringProp>
            <stringProp name="Argument.value">${__P(tenant,cs00000int)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
      </CookieManager>
      <hashTree/>
      <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
        <boolProp name="clearEachIteration">true</boolProp>
        <boolProp name="useExpires">false</boolProp>
        <boolProp name="CacheManager.controlledByThread">false</boolProp>
      </CacheManager>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="User-Agent" elementType="Header">
            <stringProp name="Header.name">User-Agent</stringProp>
            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36</stringProp>
          </elementProp>
          <elementProp name="Accept-Language" elementType="Header">
            <stringProp name="Header.name">Accept-Language</stringProp>
            <stringProp name="Header.value">en-US</stringProp>
          </elementProp>
          <elementProp name="Accept-Encoding" elementType="Header">
            <stringProp name="Header.name">Accept-Encoding</stringProp>
            <stringProp name="Header.value">gzip, deflate, br</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Accept</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="Login_Clear_Userinfo files" enabled="false">
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </SetupThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler Clear file" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import org.apache.jmeter.services.FileServer;
import java.io.FileWriter;
import java.io.IOException;

try {
    FileWriter writer = new FileWriter(FileServer.getFileServer().getBaseDir() + &quot;/jmeter-supported-data/UsersInfo_central.csv&quot;, false);
    writer.close();
} catch (IOException ex) {
    log.error(&quot;Failed to clear the CSV file:UsersInfo_central &quot; + ex.getMessage());
}



try {
    FileWriter writer = new FileWriter(FileServer.getFileServer().getBaseDir() + &quot;/jmeter-supported-data/UsersInfo.csv&quot;, false);
    writer.close();
} catch (IOException ex) {
    log.error(&quot;Failed to clear the CSV file:UsersInfo &quot; + ex.getMessage());
}</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="Login with Cookies" enabled="false">
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">30</stringProp>
        <stringProp name="ThreadGroup.delay">5</stringProp>
      </SetupThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${global_BaseDir}/jmeter-supported-data/tenants_credentials.csv</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="variableNames">username,password,tenant,hostName,origin</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostName}</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </ConfigTestElement>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DMS_data: Credentials" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${dms}</stringProp>
          <stringProp name="HTTPSampler.port">${dms_port}</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${env_type}/tenants_credentials</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">username;password;tenant;hostName;origin;API_KEY</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.username;$.password;$.tenant;$.hostName;$.origin;$.API_KEY</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">not_found;not_found;not_found;not_found;not_found;not_found</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">5000</stringProp>
        </TestAction>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SC: Authorization" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FOLIO: Login" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;username&quot;:&quot;${username}&quot;,&quot;password&quot;:&quot;${password}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/authn/login-with-expiry</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Okapi-Tenant</stringProp>
                  <stringProp name="Header.value">${tenant}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 201" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResultAction guiclass="ResultActionGui" testclass="ResultAction" testname="Result Status Action Handler" enabled="true">
              <intProp name="OnError.action">2</intProp>
            </ResultAction>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor FAT" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">folioAccessToken</stringProp>
              <stringProp name="RegexExtractor.regex">folioAccessToken=(.*?);</stringProp>
              <stringProp name="RegexExtractor.template">1</stringProp>
              <stringProp name="RegexExtractor.default">folioAccessToken_not_found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor FRT" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">folioRefreshToken</stringProp>
              <stringProp name="RegexExtractor.regex">folioRefreshToken=(.*?);</stringProp>
              <stringProp name="RegexExtractor.template">1</stringProp>
              <stringProp name="RegexExtractor.default">folioRefreshToken_not_found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor accessTokenGenerationTime" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">accessTokenGenerationTime</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.accessTokenExpiration</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">tokenGenerationTime_not_found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor refreshTokenGenerationTime" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">refreshTokenGenerationTime</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.refreshTokenExpiration</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">tokenGenerationTime_not_found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">def this_tenant = vars.get(&quot;tenant&quot;);

props.put(this_tenant + &quot;accessTokenGenerationTime&quot;, vars.get(&quot;accessTokenGenerationTime&quot;));
props.put(this_tenant + &quot;refreshTokenGenerationTime&quot;, vars.get(&quot;refreshTokenGenerationTime&quot;));
props.put(this_tenant + &quot;MyCookie&quot;, vars.get(&quot;folioAccessToken_g1&quot;));
props.put(this_tenant + &quot;MyCookie2&quot;, vars.get(&quot;folioRefreshToken_g1&quot;));</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET bl-users/_self" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/bl-users/_self</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-Okapi-Tenant" elementType="Header">
                  <stringProp name="Header.name">X-Okapi-Tenant</stringProp>
                  <stringProp name="Header.value">${tenant}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">current_userID;servicePointId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.user.id;$..defaultServicePointId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">current_userID_not_found;servicePointI_not_found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler User info extractor" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import org.apache.jmeter.services.FileServer;
import java.io.FileWriter;
import java.io.IOException;

String current_userID = vars.get(&quot;current_userID&quot;);
String servicePointId = vars.get(&quot;servicePointId&quot;);
String hostname = vars.get(&quot;hostName&quot;);
String origin = vars.get(&quot;origin&quot;);
String tenant = vars.get(&quot;tenant&quot;);
String separator = &quot;,&quot;;

try {
    FileWriter writer = new FileWriter(FileServer.getFileServer().getBaseDir() + &quot;/jmeter-supported-data/UsersInfo.csv&quot;, true);
    writer.append(current_userID + separator + servicePointId + separator + hostname + separator + origin + separator + tenant + &quot;\n&quot;);
    writer.close();
} catch (IOException ex) {
    log.error(&quot;Failed to write to CSV file: &quot; + ex.getMessage());
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="ASA Script" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">100</stringProp>
        <stringProp name="ThreadGroup.ramp_time">10</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </ConfigTestElement>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV UsersInfo" enabled="true">
          <stringProp name="filename">${global_BaseDir}/jmeter-supported-data/UsersInfoASA.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">current_userID,servicePointId,hostname,origin,tenant</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
        </CSVDataSet>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="X-Okapi-Token" elementType="Header">
              <stringProp name="Header.name">X-Okapi-Tenant</stringProp>
              <stringProp name="Header.value">${tenant}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJnb3BhY19ndWVzdCIsInR5cGUiOiJsZWdhY3ktYWNjZXNzIiwidXNlcl9pZCI6IjMxMDJjYWFjLWQ1MTEtNGI1Zi1iNzQ1LTNmNjgxMWMzNGRlNyIsImlhdCI6MTczMzc0MjAyMCwidGVuYW50IjoiYXNhMDAxIn0.k_2vXlhYlqwgCaT-YgSqwZiIJ4LyyHb04Ax6twcZbxg</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor folioAccessToken" enabled="false">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;
import org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase

def this_tenant = vars.get(&quot;tenant&quot;);
CookieManager cookieManager = sampler.getCookieManager()

Cookie cookie = new Cookie(&quot;folioAccessToken&quot;,props.get(this_tenant + &quot;MyCookie&quot;),&quot;${hostname}&quot;,&quot;/&quot;,false,0);
cookieManager.add(cookie);

</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223PreProcessor>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller Test 1" enabled="false">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">4</stringProp>
        </LoopController>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV searchTerm" enabled="true">
            <stringProp name="filename">${global_BaseDir}/jmeter-supported-data/searcTerm.csv</stringProp>
            <stringProp name="fileEncoding">UTF-8</stringProp>
            <stringProp name="variableNames">searchTerm</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <stringProp name="delimiter"></stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.group</stringProp>
          </CSVDataSet>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="R_NAME GET /search/authoritiesExtended" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="headingTypes" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">headingTypes</stringProp>
                </elementProp>
                <elementProp name="includeInstanceSubjects" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">includeInstanceSubjects</stringProp>
                </elementProp>
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">100</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                </elementProp>
                <elementProp name="searchFields" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">ALL</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">searchFields</stringProp>
                </elementProp>
                <elementProp name="searchTerm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${searchTerm}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">searchTerm</stringProp>
                </elementProp>
                <elementProp name="searchType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">CONTAINS_ALL</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">searchType</stringProp>
                </elementProp>
                <elementProp name="thesauri" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">thesauri</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/search/authoritiesExtended</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor record" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">record</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.records[*]</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">record_not_found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">
def jsonString = vars.get(&quot;record&quot;)


def json = new groovy.json.JsonSlurper().parseText(jsonString)


def id = json.id
def headingRef = json.headingRef


vars.put(&quot;records_id&quot;, id)
vars.put(&quot;headingRef&quot;, headingRef)

</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor record" enabled="false">
            <stringProp name="JSONPostProcessor.referenceNames">records_id;headingRef</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.records[*].id;$.records[*].headingRef</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">records_id_not_found;headingRef_not_found</stringProp>
            <stringProp name="Sample.scope">variable</stringProp>
            <stringProp name="Scope.variable">${record}</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="R_NAME GET/search/authoritiesExtended/facets" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="headingTypes" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">headingTypes</stringProp>
                </elementProp>
                <elementProp name="includeInstanceSubjects" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">includeInstanceSubjects</stringProp>
                </elementProp>
                <elementProp name="searchFields" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">ALL</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">searchFields</stringProp>
                </elementProp>
                <elementProp name="searchTerm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${searchTerm}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">searchTerm</stringProp>
                </elementProp>
                <elementProp name="searchType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">CONTAINS_ALL</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">searchType</stringProp>
                </elementProp>
                <elementProp name="thesauri" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">thesauri</stringProp>
                </elementProp>
                <elementProp name="facet" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">THESAURUS,HEADING_TYPE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">facet</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/search/authoritiesExtended/facets</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="R_NAME GET /search/authoritiesExtended" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="headingTypes" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">headingTypes</stringProp>
                </elementProp>
                <elementProp name="includeInstanceSubjects" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">includeInstanceSubjects</stringProp>
                </elementProp>
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                </elementProp>
                <elementProp name="searchFields" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">ALL</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">searchFields</stringProp>
                </elementProp>
                <elementProp name="searchTerm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${searchTerm}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">searchTerm</stringProp>
                </elementProp>
                <elementProp name="searchType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">CONTAINS_ALL</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">searchType</stringProp>
                </elementProp>
                <elementProp name="thesauri" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">thesauri</stringProp>
                </elementProp>
                <elementProp name="headingRef" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">${headingRef}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">headingRef</stringProp>
                </elementProp>
                <elementProp name="id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${records_id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">id</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/search/authoritiesExtended</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="R_NAME GET /opac-inventory/authorities/source-records/[id]" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/opac-inventory/authorities/source-records/${records_id}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller Test 2 Name authority headings | Term begins with | A-Z" enabled="false">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">2</stringProp>
        </LoopController>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV searchTerm" enabled="false">
            <stringProp name="filename">${global_BaseDir}/jmeter-supported-data/searcTerm.csv</stringProp>
            <stringProp name="fileEncoding">UTF-8</stringProp>
            <stringProp name="variableNames">searchTerm</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <stringProp name="delimiter"></stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.group</stringProp>
          </CSVDataSet>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String randomString = ((&apos;A&apos;..&apos;Z&apos;).toList().get(new Random().nextInt(26)))
vars.put(&quot;RandomString&quot;, randomString)
</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="R_NAME GET /search/authoritiesExtended" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="headingTypes" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">headingTypes</stringProp>
                </elementProp>
                <elementProp name="includeInstanceSubjects" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">includeInstanceSubjects</stringProp>
                </elementProp>
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">100</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                </elementProp>
                <elementProp name="searchFields" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">NAME</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">searchFields</stringProp>
                </elementProp>
                <elementProp name="searchTerm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${RandomString}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">searchTerm</stringProp>
                </elementProp>
                <elementProp name="searchType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">BROWSE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">searchType</stringProp>
                </elementProp>
                <elementProp name="thesauri" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">thesauri</stringProp>
                </elementProp>
                <elementProp name="precedingRecordsCount" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">5</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">precedingRecordsCount</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/search/authoritiesExtended</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor record" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">record</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.records[*]</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">record_not_found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">
def jsonString = vars.get(&quot;record&quot;)


def json = new groovy.json.JsonSlurper().parseText(jsonString)


def id = json.id
def headingRef = json.headingRef


vars.put(&quot;records_id&quot;, id)
vars.put(&quot;headingRef&quot;, headingRef)

</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="R_NAME GET/search/authoritiesExtended/facets" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="headingTypes" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">headingTypes</stringProp>
                </elementProp>
                <elementProp name="includeInstanceSubjects" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">includeInstanceSubjects</stringProp>
                </elementProp>
                <elementProp name="searchFields" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">NAME</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">searchFields</stringProp>
                </elementProp>
                <elementProp name="searchTerm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${RandomString}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">searchTerm</stringProp>
                </elementProp>
                <elementProp name="searchType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">BROWSE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">searchType</stringProp>
                </elementProp>
                <elementProp name="thesauri" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">thesauri</stringProp>
                </elementProp>
                <elementProp name="facet" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">THESAURUS,HEADING_TYPE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">facet</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/search/authoritiesExtended/facets</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller Test 3 All headings | Term begins with | Relevance" enabled="false">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">2</stringProp>
        </LoopController>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV searchTerm" enabled="false">
            <stringProp name="filename">${global_BaseDir}/jmeter-supported-data/searcTerm.csv</stringProp>
            <stringProp name="fileEncoding">UTF-8</stringProp>
            <stringProp name="variableNames">searchTerm</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <stringProp name="delimiter"></stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.group</stringProp>
          </CSVDataSet>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String randomString = ((&apos;A&apos;..&apos;Z&apos;).toList().get(new Random().nextInt(26)))
vars.put(&quot;RandomString&quot;, randomString)
</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="R_NAME GET /search/authoritiesExtended" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="headingTypes" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">headingTypes</stringProp>
                </elementProp>
                <elementProp name="includeInstanceSubjects" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">includeInstanceSubjects</stringProp>
                </elementProp>
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">100</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                </elementProp>
                <elementProp name="searchFields" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">ALL</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">searchFields</stringProp>
                </elementProp>
                <elementProp name="searchTerm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${RandomString}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">searchTerm</stringProp>
                </elementProp>
                <elementProp name="searchType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">BEGINS</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">searchType</stringProp>
                </elementProp>
                <elementProp name="thesauri" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">thesauri</stringProp>
                </elementProp>
                <elementProp name="token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">token</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/search/authoritiesExtended</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor record" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">record</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.records[*]</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">record_not_found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">
def jsonString = vars.get(&quot;record&quot;)


def json = new groovy.json.JsonSlurper().parseText(jsonString)


def id = json.id
def headingRef = json.headingRef


vars.put(&quot;records_id&quot;, id)
vars.put(&quot;headingRef&quot;, headingRef)

</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="R_NAME GET/search/authoritiesExtended/facets" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="facet" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">THESAURUS,HEADING_TYPE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">facet</stringProp>
                </elementProp>
                <elementProp name="headingTypes" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">headingTypes</stringProp>
                </elementProp>
                <elementProp name="includeInstanceSubjects" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">includeInstanceSubjects</stringProp>
                </elementProp>
                <elementProp name="searchFields" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">ALL</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">searchFields</stringProp>
                </elementProp>
                <elementProp name="searchTerm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${RandomString}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">searchTerm</stringProp>
                </elementProp>
                <elementProp name="searchType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">BEGINS</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">searchType</stringProp>
                </elementProp>
                <elementProp name="thesauri" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">thesauri</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/search/authoritiesExtended/facets</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller Test 4 Title and Name/Title Authority Headings | Term contains all" enabled="false">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">2</stringProp>
        </LoopController>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV searchTerm" enabled="false">
            <stringProp name="filename">${global_BaseDir}/jmeter-supported-data/searcTerm.csv</stringProp>
            <stringProp name="fileEncoding">UTF-8</stringProp>
            <stringProp name="variableNames">searchTerm</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <stringProp name="delimiter"></stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.group</stringProp>
          </CSVDataSet>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String randomString = ((&apos;A&apos;..&apos;Z&apos;).toList().get(new Random().nextInt(26)))
vars.put(&quot;RandomString&quot;, randomString)
</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="R_NAME GET /search/authoritiesExtended" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="headingTypes" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">headingTypes</stringProp>
                </elementProp>
                <elementProp name="includeInstanceSubjects" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">includeInstanceSubjects</stringProp>
                </elementProp>
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">100</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                </elementProp>
                <elementProp name="searchFields" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">TITLE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">searchFields</stringProp>
                </elementProp>
                <elementProp name="searchTerm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${RandomString}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">searchTerm</stringProp>
                </elementProp>
                <elementProp name="searchType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">CONTAINS_ALL</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">searchType</stringProp>
                </elementProp>
                <elementProp name="thesauri" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">thesauri</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/search/authoritiesExtended</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor record" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">record</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.records[*]</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">record_not_found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">
def jsonString = vars.get(&quot;record&quot;)


def json = new groovy.json.JsonSlurper().parseText(jsonString)


def id = json.id
def headingRef = json.headingRef


vars.put(&quot;records_id&quot;, id)
vars.put(&quot;headingRef&quot;, headingRef)

</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="R_NAME GET/search/authoritiesExtended/facets" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="facet" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">THESAURUS,HEADING_TYPE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">facet</stringProp>
                </elementProp>
                <elementProp name="headingTypes" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">headingTypes</stringProp>
                </elementProp>
                <elementProp name="includeInstanceSubjects" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">includeInstanceSubjects</stringProp>
                </elementProp>
                <elementProp name="searchFields" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">TITLE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">searchFields</stringProp>
                </elementProp>
                <elementProp name="searchTerm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${RandomString}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">searchTerm</stringProp>
                </elementProp>
                <elementProp name="searchType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">CONTAINS_ALL</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">searchType</stringProp>
                </elementProp>
                <elementProp name="thesauri" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">thesauri</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/search/authoritiesExtended/facets</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller all TYPES of criteria" enabled="false">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">100</stringProp>
        </LoopController>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables FOR THIS TEST" enabled="false">
            <collectionProp name="Arguments.arguments">
              <elementProp name="instanceId" elementType="Argument">
                <stringProp name="Argument.name">instanceId</stringProp>
                <stringProp name="Argument.value">${__P(instanceId, 917c2d98-eeca-4282-9f10-6a49bc45e657)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="requesterId" elementType="Argument">
                <stringProp name="Argument.name">requesterId</stringProp>
                <stringProp name="Argument.value">${__P(requesterId, 94dd52f3-025a-4f20-b91e-3147624e1289)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pickupServicePointId" elementType="Argument">
                <stringProp name="Argument.name">pickupServicePointId</stringProp>
                <stringProp name="Argument.value">${__P(pickupServicePointId, 3a40852d-49fd-4df2-a1f9-6e2641a6e91f)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV searchTerm" enabled="false">
            <stringProp name="filename">${global_BaseDir}/jmeter-supported-data/searcTerm.csv</stringProp>
            <stringProp name="fileEncoding">UTF-8</stringProp>
            <stringProp name="variableNames">searchTerm</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <stringProp name="delimiter"></stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.group</stringProp>
          </CSVDataSet>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">//  summ have to be 100 = 100%
vars.put(&quot;subject_contains_all_pct&quot;, &quot;7&quot;)
vars.put(&quot;subject_contains_any_pct&quot;, &quot;7&quot;)
vars.put(&quot;subject_begins_pct&quot;, &quot;10&quot;)
vars.put(&quot;subject_exact_pct&quot;, &quot;6&quot;)

vars.put(&quot;name_contains_all_pct&quot;, &quot;2&quot;)
vars.put(&quot;name_contains_any_pct&quot;, &quot;2&quot;)
vars.put(&quot;name_begins_pct&quot;, &quot;3&quot;)
vars.put(&quot;name_exact_pct&quot;, &quot;3&quot;)

vars.put(&quot;title_contains_all_pct&quot;, &quot;2&quot;)
vars.put(&quot;title_contains_any_pct&quot;, &quot;2&quot;)
vars.put(&quot;title_begins_pct&quot;, &quot;3&quot;)
vars.put(&quot;title_exact_pct&quot;, &quot;3&quot;)

vars.put(&quot;all_contains_all_pct&quot;, &quot;10&quot;)
vars.put(&quot;all_contains_any_pct&quot;, &quot;10&quot;)
vars.put(&quot;all_begins_pct&quot;, &quot;20&quot;)
vars.put(&quot;all_exact_pct&quot;, &quot;10&quot;)
</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String randomString = ((&apos;A&apos;..&apos;Z&apos;).toList().get(new Random().nextInt(26)))
vars.put(&quot;RandomString&quot;, randomString)
</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">def rand = new Random().nextInt(100)
def searchFields = &quot;&quot;
def searchType = &quot;&quot;

//  SUBJECT
def subjectStart = vars.get(&quot;subject_contains_all_pct&quot;).toInteger()
def subjectContainsAnyEnd = subjectStart + vars.get(&quot;subject_contains_any_pct&quot;).toInteger()
def subjectBeginsEnd = subjectContainsAnyEnd + vars.get(&quot;subject_begins_pct&quot;).toInteger()
def subjectExactEnd = subjectBeginsEnd + vars.get(&quot;subject_exact_pct&quot;).toInteger()

//  NAME
def nameStart = subjectExactEnd
def nameContainsAllEnd = nameStart + vars.get(&quot;name_contains_all_pct&quot;).toInteger()
def nameContainsAnyEnd = nameContainsAllEnd + vars.get(&quot;name_contains_any_pct&quot;).toInteger()
def nameBeginsEnd = nameContainsAnyEnd + vars.get(&quot;name_begins_pct&quot;).toInteger()
def nameExactEnd = nameBeginsEnd + vars.get(&quot;name_exact_pct&quot;).toInteger()

//  TITLE
def titleStart = nameExactEnd
def titleContainsAllEnd = titleStart + vars.get(&quot;title_contains_all_pct&quot;).toInteger()
def titleContainsAnyEnd = titleContainsAllEnd + vars.get(&quot;title_contains_any_pct&quot;).toInteger()
def titleBeginsEnd = titleContainsAnyEnd + vars.get(&quot;title_begins_pct&quot;).toInteger()
def titleExactEnd = titleBeginsEnd + vars.get(&quot;title_exact_pct&quot;).toInteger()

//  ALL
def allStart = titleExactEnd
def allContainsAllEnd = allStart + vars.get(&quot;all_contains_all_pct&quot;).toInteger()
def allContainsAnyEnd = allContainsAllEnd + vars.get(&quot;all_contains_any_pct&quot;).toInteger()
def allBeginsEnd = allContainsAnyEnd + vars.get(&quot;all_begins_pct&quot;).toInteger()
def allExactEnd = allBeginsEnd + vars.get(&quot;all_exact_pct&quot;).toInteger()

//  SUBJECT
if (rand &lt; subjectStart) {
    searchFields = &quot;SUBJECT&quot;
    searchType = &quot;CONTAINS_ALL&quot;
} else if (rand &lt; subjectContainsAnyEnd) {
    searchFields = &quot;SUBJECT&quot;
    searchType = &quot;CONTAINS_ANY&quot;
} else if (rand &lt; subjectBeginsEnd) {
    searchFields = &quot;SUBJECT&quot;
    searchType = &quot;BEGINS&quot;
} else if (rand &lt; subjectExactEnd) {
    searchFields = &quot;SUBJECT&quot;
    searchType = &quot;EXACT&quot;
} 

//  NAME
else if (rand &lt; nameContainsAllEnd) {
    searchFields = &quot;NAME&quot;
    searchType = &quot;CONTAINS_ALL&quot;
} else if (rand &lt; nameContainsAnyEnd) {
    searchFields = &quot;NAME&quot;
    searchType = &quot;CONTAINS_ANY&quot;
} else if (rand &lt; nameBeginsEnd) {
    searchFields = &quot;NAME&quot;
    searchType = &quot;BEGINS&quot;
} else if (rand &lt; nameExactEnd) {
    searchFields = &quot;NAME&quot;
    searchType = &quot;EXACT&quot;
}

//  TITLE
else if (rand &lt; titleContainsAllEnd) {
    searchFields = &quot;TITLE&quot;
    searchType = &quot;CONTAINS_ALL&quot;
} else if (rand &lt; titleContainsAnyEnd) {
    searchFields = &quot;TITLE&quot;
    searchType = &quot;CONTAINS_ANY&quot;
} else if (rand &lt; titleBeginsEnd) {
    searchFields = &quot;TITLE&quot;
    searchType = &quot;BEGINS&quot;
} else if (rand &lt; titleExactEnd) {
    searchFields = &quot;TITLE&quot;
    searchType = &quot;EXACT&quot;
}

//  ALL
else if (rand &lt; allContainsAllEnd) {
    searchFields = &quot;ALL&quot;
    searchType = &quot;CONTAINS_ALL&quot;
} else if (rand &lt; allContainsAnyEnd) {
    searchFields = &quot;ALL&quot;
    searchType = &quot;CONTAINS_ANY&quot;
} else if (rand &lt; allBeginsEnd) {
    searchFields = &quot;ALL&quot;
    searchType = &quot;BEGINS&quot;
} else {
    searchFields = &quot;ALL&quot;
    searchType = &quot;EXACT&quot;
}

// ------------------------
vars.put(&quot;searchFields&quot;, searchFields)
vars.put(&quot;searchType&quot;, searchType)
//log.info(&quot;Selected: ${searchFields} ${searchType}, rand=${rand}&quot;)
</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">def rand = new Random().nextInt(100)
def searchFields = &quot;&quot;
def searchType = &quot;&quot;

//  SUBJECT
if (rand &lt; vars.get(&quot;subject_contains_all_pct&quot;).toInteger()) {
    searchFields = &quot;SUBJECT&quot;
    searchType = &quot;CONTAINS_ALL&quot;
} else if (rand &lt; vars.get(&quot;subject_contains_all_pct&quot;).toInteger() + vars.get(&quot;subject_contains_any_pct&quot;).toInteger()) {
    searchFields = &quot;SUBJECT&quot;
    searchType = &quot;CONTAINS_ANY&quot;
} else if (rand &lt; vars.get(&quot;subject_contains_all_pct&quot;).toInteger() + vars.get(&quot;subject_contains_any_pct&quot;).toInteger() + vars.get(&quot;subject_begins_pct&quot;).toInteger()) {
    searchFields = &quot;SUBJECT&quot;
    searchType = &quot;BEGINS&quot;
} else if (rand &lt; vars.get(&quot;subject_contains_all_pct&quot;).toInteger() + vars.get(&quot;subject_contains_any_pct&quot;).toInteger() + vars.get(&quot;subject_begins_pct&quot;).toInteger() + vars.get(&quot;subject_exact_pct&quot;).toInteger()) {
    searchFields = &quot;SUBJECT&quot;
    searchType = &quot;EXACT&quot;
} 

//  NAME
else if (rand &lt; vars.get(&quot;subject_contains_all_pct&quot;).toInteger() + vars.get(&quot;subject_contains_any_pct&quot;).toInteger() + vars.get(&quot;subject_begins_pct&quot;).toInteger() + vars.get(&quot;subject_exact_pct&quot;).toInteger() + vars.get(&quot;name_contains_all_pct&quot;).toInteger()) {
    searchFields = &quot;NAME&quot;
    searchType = &quot;CONTAINS_ALL&quot;
} else if (rand &lt; vars.get(&quot;subject_contains_all_pct&quot;).toInteger() + vars.get(&quot;subject_contains_any_pct&quot;).toInteger() + vars.get(&quot;subject_begins_pct&quot;).toInteger() + vars.get(&quot;subject_exact_pct&quot;).toInteger() + vars.get(&quot;name_contains_all_pct&quot;).toInteger() + vars.get(&quot;name_contains_any_pct&quot;).toInteger()) {
    searchFields = &quot;NAME&quot;
    searchType = &quot;CONTAINS_ANY&quot;
} else if (rand &lt; vars.get(&quot;subject_contains_all_pct&quot;).toInteger() + vars.get(&quot;subject_contains_any_pct&quot;).toInteger() + vars.get(&quot;subject_begins_pct&quot;).toInteger() + vars.get(&quot;subject_exact_pct&quot;).toInteger() + vars.get(&quot;name_contains_all_pct&quot;).toInteger() + vars.get(&quot;name_contains_any_pct&quot;).toInteger() + vars.get(&quot;name_begins_pct&quot;).toInteger()) {
    searchFields = &quot;NAME&quot;
    searchType = &quot;BEGINS&quot;
} else if (rand &lt; vars.get(&quot;subject_contains_all_pct&quot;).toInteger() + vars.get(&quot;subject_contains_any_pct&quot;).toInteger() + vars.get(&quot;subject_begins_pct&quot;).toInteger() + vars.get(&quot;subject_exact_pct&quot;).toInteger() + vars.get(&quot;name_contains_all_pct&quot;).toInteger() + vars.get(&quot;name_contains_any_pct&quot;).toInteger() + vars.get(&quot;name_begins_pct&quot;).toInteger() + vars.get(&quot;name_exact_pct&quot;).toInteger()) {
    searchFields = &quot;NAME&quot;
    searchType = &quot;EXACT&quot;
}

//  TITLE
else if (rand &lt; vars.get(&quot;subject_contains_all_pct&quot;).toInteger() + vars.get(&quot;subject_contains_any_pct&quot;).toInteger() + vars.get(&quot;subject_begins_pct&quot;).toInteger() + vars.get(&quot;subject_exact_pct&quot;).toInteger() + vars.get(&quot;name_contains_all_pct&quot;).toInteger() + vars.get(&quot;name_contains_any_pct&quot;).toInteger() + vars.get(&quot;name_begins_pct&quot;).toInteger() + vars.get(&quot;name_exact_pct&quot;).toInteger() + vars.get(&quot;title_contains_all_pct&quot;).toInteger()) {
    searchFields = &quot;TITLE&quot;
    searchType = &quot;CONTAINS_ALL&quot;
} else if (rand &lt; vars.get(&quot;subject_contains_all_pct&quot;).toInteger() + vars.get(&quot;subject_contains_any_pct&quot;).toInteger() + vars.get(&quot;subject_begins_pct&quot;).toInteger() + vars.get(&quot;subject_exact_pct&quot;).toInteger() + vars.get(&quot;name_contains_all_pct&quot;).toInteger() + vars.get(&quot;name_contains_any_pct&quot;).toInteger() + vars.get(&quot;name_begins_pct&quot;).toInteger() + vars.get(&quot;name_exact_pct&quot;).toInteger() + vars.get(&quot;title_contains_all_pct&quot;).toInteger() + vars.get(&quot;title_contains_any_pct&quot;).toInteger()) {
    searchFields = &quot;TITLE&quot;
    searchType = &quot;CONTAINS_ANY&quot;
} else if (rand &lt; vars.get(&quot;subject_contains_all_pct&quot;).toInteger() + vars.get(&quot;subject_contains_any_pct&quot;).toInteger() + vars.get(&quot;subject_begins_pct&quot;).toInteger() + vars.get(&quot;subject_exact_pct&quot;).toInteger() + vars.get(&quot;name_contains_all_pct&quot;).toInteger() + vars.get(&quot;name_contains_any_pct&quot;).toInteger() + vars.get(&quot;name_begins_pct&quot;).toInteger() + vars.get(&quot;name_exact_pct&quot;).toInteger() + vars.get(&quot;title_contains_all_pct&quot;).toInteger() + vars.get(&quot;title_contains_any_pct&quot;).toInteger() + vars.get(&quot;title_begins_pct&quot;).toInteger()) {
    searchFields = &quot;TITLE&quot;
    searchType = &quot;BEGINS&quot;
} else if (rand &lt; vars.get(&quot;subject_contains_all_pct&quot;).toInteger() + vars.get(&quot;subject_contains_any_pct&quot;).toInteger() + vars.get(&quot;subject_begins_pct&quot;).toInteger() + vars.get(&quot;subject_exact_pct&quot;).toInteger() + vars.get(&quot;name_contains_all_pct&quot;).toInteger() + vars.get(&quot;name_contains_any_pct&quot;).toInteger() + vars.get(&quot;name_begins_pct&quot;).toInteger() + vars.get(&quot;name_exact_pct&quot;).toInteger() + vars.get(&quot;title_contains_all_pct&quot;).toInteger() + vars.get(&quot;title_contains_any_pct&quot;).toInteger() + vars.get(&quot;title_begins_pct&quot;).toInteger() + vars.get(&quot;title_exact_pct&quot;).toInteger()) {
    searchFields = &quot;TITLE&quot;
    searchType = &quot;EXACT&quot;
}

//  ALL
else if (rand &lt; vars.get(&quot;subject_contains_all_pct&quot;).toInteger() + vars.get(&quot;subject_contains_any_pct&quot;).toInteger() + vars.get(&quot;subject_begins_pct&quot;).toInteger() + vars.get(&quot;subject_exact_pct&quot;).toInteger() + vars.get(&quot;name_contains_all_pct&quot;).toInteger() + vars.get(&quot;name_contains_any_pct&quot;).toInteger() + vars.get(&quot;name_begins_pct&quot;).toInteger() + vars.get(&quot;name_exact_pct&quot;).toInteger() + vars.get(&quot;title_contains_all_pct&quot;).toInteger() + vars.get(&quot;title_contains_any_pct&quot;).toInteger() + vars.get(&quot;title_begins_pct&quot;).toInteger() + vars.get(&quot;title_exact_pct&quot;).toInteger() + vars.get(&quot;all_contains_all_pct&quot;).toInteger()) {
    searchFields = &quot;ALL&quot;
    searchType = &quot;CONTAINS_ALL&quot;
} else if (rand &lt; vars.get(&quot;subject_contains_all_pct&quot;).toInteger() + vars.get(&quot;subject_contains_any_pct&quot;).toInteger() + vars.get(&quot;subject_begins_pct&quot;).toInteger() + vars.get(&quot;subject_exact_pct&quot;).toInteger() + vars.get(&quot;name_contains_all_pct&quot;).toInteger() + vars.get(&quot;name_contains_any_pct&quot;).toInteger() + vars.get(&quot;name_begins_pct&quot;).toInteger() + vars.get(&quot;name_exact_pct&quot;).toInteger() + vars.get(&quot;title_contains_all_pct&quot;).toInteger() + vars.get(&quot;title_contains_any_pct&quot;).toInteger() + vars.get(&quot;title_begins_pct&quot;).toInteger() + vars.get(&quot;title_exact_pct&quot;).toInteger() + vars.get(&quot;all_contains_all_pct&quot;).toInteger() + vars.get(&quot;all_contains_any_pct&quot;).toInteger()) {
    searchFields = &quot;ALL&quot;
    searchType = &quot;CONTAINS_ANY&quot;
} else if (rand &lt; vars.get(&quot;subject_contains_all_pct&quot;).toInteger() + vars.get(&quot;subject_contains_any_pct&quot;).toInteger() + vars.get(&quot;subject_begins_pct&quot;).toInteger() + vars.get(&quot;subject_exact_pct&quot;).toInteger() + vars.get(&quot;name_contains_all_pct&quot;).toInteger() + vars.get(&quot;name_contains_any_pct&quot;).toInteger() + vars.get(&quot;name_begins_pct&quot;).toInteger() + vars.get(&quot;name_exact_pct&quot;).toInteger() + vars.get(&quot;title_contains_all_pct&quot;).toInteger() + vars.get(&quot;title_contains_any_pct&quot;).toInteger() + vars.get(&quot;title_begins_pct&quot;).toInteger() + vars.get(&quot;title_exact_pct&quot;).toInteger() + vars.get(&quot;all_contains_all_pct&quot;).toInteger() + vars.get(&quot;all_contains_any_pct&quot;).toInteger() + vars.get(&quot;all_begins_pct&quot;).toInteger()) {
    searchFields = &quot;ALL&quot;
    searchType = &quot;BEGINS&quot;
} else {
    searchFields = &quot;ALL&quot;
    searchType = &quot;EXACT&quot;
}

// ------------------------
vars.put(&quot;searchFields&quot;, searchFields)
vars.put(&quot;searchType&quot;, searchType)
log.info(&quot;Selected: ${searchFields} ${searchType}, rand=${rand}&quot;)
</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="R_NAME GET /search/authoritiesExtended" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="headingTypes" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">headingTypes</stringProp>
                </elementProp>
                <elementProp name="includeInstanceSubjects" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">includeInstanceSubjects</stringProp>
                </elementProp>
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">100</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                </elementProp>
                <elementProp name="searchFields" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${searchFields}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">searchFields</stringProp>
                </elementProp>
                <elementProp name="searchTerm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${RandomString}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">searchTerm</stringProp>
                </elementProp>
                <elementProp name="searchType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${searchType}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">searchType</stringProp>
                </elementProp>
                <elementProp name="thesauri" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">thesauri</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/search/authoritiesExtended</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor record" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">record</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.records[*]</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">record_not_found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">
def jsonString = vars.get(&quot;record&quot;)


def json = new groovy.json.JsonSlurper().parseText(jsonString)


def id = json.id
def headingRef = json.headingRef


vars.put(&quot;records_id&quot;, id)
vars.put(&quot;headingRef&quot;, headingRef)

</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="R_NAME GET/search/authoritiesExtended/facets" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="facet" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">THESAURUS,HEADING_TYPE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">facet</stringProp>
                </elementProp>
                <elementProp name="headingTypes" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">headingTypes</stringProp>
                </elementProp>
                <elementProp name="includeInstanceSubjects" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">includeInstanceSubjects</stringProp>
                </elementProp>
                <elementProp name="searchFields" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${searchFields}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">searchFields</stringProp>
                </elementProp>
                <elementProp name="searchTerm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${RandomString}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">searchTerm</stringProp>
                </elementProp>
                <elementProp name="searchType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${searchType}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">searchType</stringProp>
                </elementProp>
                <elementProp name="thesauri" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">thesauri</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/search/authoritiesExtended/facets</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller all TYPES of criteria + view record" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">2</stringProp>
        </LoopController>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV searchTerm" enabled="true">
            <stringProp name="filename">${global_BaseDir}/jmeter-supported-data/searcTerm.csv</stringProp>
            <stringProp name="fileEncoding">UTF-8</stringProp>
            <stringProp name="variableNames">searchTerm</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <stringProp name="delimiter"></stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.group</stringProp>
          </CSVDataSet>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables FOR THIS TEST" enabled="false">
            <collectionProp name="Arguments.arguments">
              <elementProp name="subject_contains_all_pct" elementType="Argument">
                <stringProp name="Argument.name">subject_contains_all_pct</stringProp>
                <stringProp name="Argument.value">${__P(subject_contains_all_pct, 7)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="subject_contains_any_pct" elementType="Argument">
                <stringProp name="Argument.name">subject_contains_any_pct</stringProp>
                <stringProp name="Argument.value">${__P(subject_contains_any_pct, 7)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="subject_begins_pct" elementType="Argument">
                <stringProp name="Argument.name">subject_begins_pct</stringProp>
                <stringProp name="Argument.value">${__P(subject_begins_pct, 10)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="subject_exact_pct" elementType="Argument">
                <stringProp name="Argument.name">subject_exact_pct</stringProp>
                <stringProp name="Argument.value">${__P(subject_exact_pct, 6)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="name_contains_all_pct" elementType="Argument">
                <stringProp name="Argument.name">name_contains_all_pct</stringProp>
                <stringProp name="Argument.value">${__P(name_contains_all_pct, 2)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="name_contains_any_pct" elementType="Argument">
                <stringProp name="Argument.name">name_contains_any_pct</stringProp>
                <stringProp name="Argument.value">${__P(name_contains_any_pct, 2)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="name_begins_pct" elementType="Argument">
                <stringProp name="Argument.name">name_begins_pct</stringProp>
                <stringProp name="Argument.value">${__P(name_begins_pct, 3)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="name_exact_pct" elementType="Argument">
                <stringProp name="Argument.name">name_exact_pct</stringProp>
                <stringProp name="Argument.value">${__P(name_exact_pct, 3)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="title_contains_all_pct" elementType="Argument">
                <stringProp name="Argument.name">title_contains_all_pct</stringProp>
                <stringProp name="Argument.value">${__P(title_contains_all_pct, 2)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="title_contains_any_pct" elementType="Argument">
                <stringProp name="Argument.name">title_contains_any_pct</stringProp>
                <stringProp name="Argument.value">${__P(title_contains_any_pct, 2)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="title_begins_pct" elementType="Argument">
                <stringProp name="Argument.name">title_begins_pct</stringProp>
                <stringProp name="Argument.value">${__P(title_begins_pct, 3)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="title_exact_pct" elementType="Argument">
                <stringProp name="Argument.name">title_exact_pct</stringProp>
                <stringProp name="Argument.value">${__P(title_exact_pct, 3)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="all_contains_all_pct" elementType="Argument">
                <stringProp name="Argument.name">all_contains_all_pct</stringProp>
                <stringProp name="Argument.value">${__P(all_contains_all_pct, 10)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="all_contains_any_pct" elementType="Argument">
                <stringProp name="Argument.name">all_contains_any_pct</stringProp>
                <stringProp name="Argument.value">${__P(all_contains_any_pct, 10)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="all_begins_pct" elementType="Argument">
                <stringProp name="Argument.name">all_begins_pct</stringProp>
                <stringProp name="Argument.value">${__P(all_begins_pct, 20)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="all_exact_pct" elementType="Argument">
                <stringProp name="Argument.name">all_exact_pct</stringProp>
                <stringProp name="Argument.value">${__P(all_exact_pct, 10)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">//  summ have to be 100 = 100%
vars.put(&quot;subject_contains_all_pct&quot;, &quot;7&quot;)
vars.put(&quot;subject_contains_any_pct&quot;, &quot;7&quot;)
vars.put(&quot;subject_begins_pct&quot;, &quot;10&quot;)
vars.put(&quot;subject_exact_pct&quot;, &quot;6&quot;)

vars.put(&quot;name_contains_all_pct&quot;, &quot;2&quot;)
vars.put(&quot;name_contains_any_pct&quot;, &quot;2&quot;)
vars.put(&quot;name_begins_pct&quot;, &quot;3&quot;)
vars.put(&quot;name_exact_pct&quot;, &quot;3&quot;)

vars.put(&quot;title_contains_all_pct&quot;, &quot;2&quot;)
vars.put(&quot;title_contains_any_pct&quot;, &quot;2&quot;)
vars.put(&quot;title_begins_pct&quot;, &quot;3&quot;)
vars.put(&quot;title_exact_pct&quot;, &quot;3&quot;)

vars.put(&quot;all_contains_all_pct&quot;, &quot;10&quot;)
vars.put(&quot;all_contains_any_pct&quot;, &quot;10&quot;)
vars.put(&quot;all_begins_pct&quot;, &quot;20&quot;)
vars.put(&quot;all_exact_pct&quot;, &quot;10&quot;)
</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler Generate Params for request" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">def rand = new Random().nextInt(100)
def searchFields = &quot;&quot;
def searchType = &quot;&quot;

//  SUBJECT
def subjectStart = vars.get(&quot;subject_contains_all_pct&quot;).toInteger()
def subjectContainsAnyEnd = subjectStart + vars.get(&quot;subject_contains_any_pct&quot;).toInteger()
def subjectBeginsEnd = subjectContainsAnyEnd + vars.get(&quot;subject_begins_pct&quot;).toInteger()
def subjectExactEnd = subjectBeginsEnd + vars.get(&quot;subject_exact_pct&quot;).toInteger()

//  NAME
def nameStart = subjectExactEnd
def nameContainsAllEnd = nameStart + vars.get(&quot;name_contains_all_pct&quot;).toInteger()
def nameContainsAnyEnd = nameContainsAllEnd + vars.get(&quot;name_contains_any_pct&quot;).toInteger()
def nameBeginsEnd = nameContainsAnyEnd + vars.get(&quot;name_begins_pct&quot;).toInteger()
def nameExactEnd = nameBeginsEnd + vars.get(&quot;name_exact_pct&quot;).toInteger()

//  TITLE
def titleStart = nameExactEnd
def titleContainsAllEnd = titleStart + vars.get(&quot;title_contains_all_pct&quot;).toInteger()
def titleContainsAnyEnd = titleContainsAllEnd + vars.get(&quot;title_contains_any_pct&quot;).toInteger()
def titleBeginsEnd = titleContainsAnyEnd + vars.get(&quot;title_begins_pct&quot;).toInteger()
def titleExactEnd = titleBeginsEnd + vars.get(&quot;title_exact_pct&quot;).toInteger()

//  ALL
def allStart = titleExactEnd
def allContainsAllEnd = allStart + vars.get(&quot;all_contains_all_pct&quot;).toInteger()
def allContainsAnyEnd = allContainsAllEnd + vars.get(&quot;all_contains_any_pct&quot;).toInteger()
def allBeginsEnd = allContainsAnyEnd + vars.get(&quot;all_begins_pct&quot;).toInteger()
def allExactEnd = allBeginsEnd + vars.get(&quot;all_exact_pct&quot;).toInteger()

//  SUBJECT
if (rand &lt; subjectStart) {
    searchFields = &quot;SUBJECT&quot;
    searchType = &quot;CONTAINS_ALL&quot;
} else if (rand &lt; subjectContainsAnyEnd) {
    searchFields = &quot;SUBJECT&quot;
    searchType = &quot;CONTAINS_ANY&quot;
} else if (rand &lt; subjectBeginsEnd) {
    searchFields = &quot;SUBJECT&quot;
    searchType = &quot;BEGINS&quot;
} else if (rand &lt; subjectExactEnd) {
    searchFields = &quot;SUBJECT&quot;
    searchType = &quot;EXACT&quot;
} 

//  NAME
else if (rand &lt; nameContainsAllEnd) {
    searchFields = &quot;NAME&quot;
    searchType = &quot;CONTAINS_ALL&quot;
} else if (rand &lt; nameContainsAnyEnd) {
    searchFields = &quot;NAME&quot;
    searchType = &quot;CONTAINS_ANY&quot;
} else if (rand &lt; nameBeginsEnd) {
    searchFields = &quot;NAME&quot;
    searchType = &quot;BEGINS&quot;
} else if (rand &lt; nameExactEnd) {
    searchFields = &quot;NAME&quot;
    searchType = &quot;EXACT&quot;
}

//  TITLE
else if (rand &lt; titleContainsAllEnd) {
    searchFields = &quot;TITLE&quot;
    searchType = &quot;CONTAINS_ALL&quot;
} else if (rand &lt; titleContainsAnyEnd) {
    searchFields = &quot;TITLE&quot;
    searchType = &quot;CONTAINS_ANY&quot;
} else if (rand &lt; titleBeginsEnd) {
    searchFields = &quot;TITLE&quot;
    searchType = &quot;BEGINS&quot;
} else if (rand &lt; titleExactEnd) {
    searchFields = &quot;TITLE&quot;
    searchType = &quot;EXACT&quot;
}

//  ALL
else if (rand &lt; allContainsAllEnd) {
    searchFields = &quot;ALL&quot;
    searchType = &quot;CONTAINS_ALL&quot;
} else if (rand &lt; allContainsAnyEnd) {
    searchFields = &quot;ALL&quot;
    searchType = &quot;CONTAINS_ANY&quot;
} else if (rand &lt; allBeginsEnd) {
    searchFields = &quot;ALL&quot;
    searchType = &quot;BEGINS&quot;
} else {
    searchFields = &quot;ALL&quot;
    searchType = &quot;EXACT&quot;
}

// ------------------------
vars.put(&quot;searchFields&quot;, searchFields)
vars.put(&quot;searchType&quot;, searchType)
//log.info(&quot;Selected: ${searchFields} ${searchType}, rand=${rand}&quot;)

</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Searcing + view record" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Searching" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">false</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="R_NAME GET /search/authoritiesExtended (search)" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="headingTypes" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">headingTypes</stringProp>
                    </elementProp>
                    <elementProp name="includeInstanceSubjects" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">includeInstanceSubjects</stringProp>
                    </elementProp>
                    <elementProp name="limit" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">100</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">limit</stringProp>
                    </elementProp>
                    <elementProp name="searchFields" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${searchFields}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">searchFields</stringProp>
                    </elementProp>
                    <elementProp name="searchTerm" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">${searchTerm}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">searchTerm</stringProp>
                    </elementProp>
                    <elementProp name="searchType" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${searchType}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">searchType</stringProp>
                    </elementProp>
                    <elementProp name="thesauri" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">thesauri</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/search/authoritiesExtended</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor record" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">record</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.records[*]</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">record_not_found</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor records_id + headingRef" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">records_id;headingRef</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.id;$.headingRef</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">records_id_not_found;headingRef_not_found</stringProp>
                  <stringProp name="Sample.scope">variable</stringProp>
                  <stringProp name="Scope.variable">record</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="R_NAME GET/search/authoritiesExtended/facets" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="facet" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">THESAURUS,HEADING_TYPE</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">facet</stringProp>
                    </elementProp>
                    <elementProp name="headingTypes" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">headingTypes</stringProp>
                    </elementProp>
                    <elementProp name="includeInstanceSubjects" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">includeInstanceSubjects</stringProp>
                    </elementProp>
                    <elementProp name="searchFields" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${searchFields}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">searchFields</stringProp>
                    </elementProp>
                    <elementProp name="searchTerm" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">${searchTerm}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">searchTerm</stringProp>
                    </elementProp>
                    <elementProp name="searchType" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${searchType}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">searchType</stringProp>
                    </elementProp>
                    <elementProp name="thesauri" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">thesauri</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/search/authoritiesExtended/facets</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(&quot;${records_id}&quot; != &quot;records_id_not_found&quot;)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="View Record" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">false</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="R_NAME GET /search/authoritiesExtended (view)" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="headingRef" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.value">${headingRef}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">headingRef</stringProp>
                      </elementProp>
                      <elementProp name="headingTypes" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">headingTypes</stringProp>
                      </elementProp>
                      <elementProp name="id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${records_id}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">id</stringProp>
                      </elementProp>
                      <elementProp name="includeInstanceSubjects" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">includeInstanceSubjects</stringProp>
                      </elementProp>
                      <elementProp name="limit" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">limit</stringProp>
                      </elementProp>
                      <elementProp name="searchFields" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">ALL</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">searchFields</stringProp>
                      </elementProp>
                      <elementProp name="searchTerm" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.value">${searchTerm}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">searchTerm</stringProp>
                      </elementProp>
                      <elementProp name="searchType" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">CONTAINS_ALL</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">searchType</stringProp>
                      </elementProp>
                      <elementProp name="thesauri" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">thesauri</stringProp>
                      </elementProp>
                      <elementProp name="token" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">token</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/search/authoritiesExtended</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="R_NAME GET /opac-inventory/authorities/source-records/[id]" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/opac-inventory/authorities/source-records/${records_id}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="R_NAME GET /search/authority_aggregated_data/[id]" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/search/authority_aggregated_data/${records_id}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller all TYPES of criteria + view record DEBUG" enabled="false">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">5</stringProp>
        </LoopController>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV searchTerm" enabled="true">
            <stringProp name="filename">${global_BaseDir}/jmeter-supported-data/searcTerm - Copy.csv</stringProp>
            <stringProp name="fileEncoding">UTF-8</stringProp>
            <stringProp name="variableNames">searchTerm</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <stringProp name="delimiter"></stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.group</stringProp>
          </CSVDataSet>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables FOR THIS TEST" enabled="false">
            <collectionProp name="Arguments.arguments">
              <elementProp name="instanceId" elementType="Argument">
                <stringProp name="Argument.name">instanceId</stringProp>
                <stringProp name="Argument.value">${__P(instanceId, 917c2d98-eeca-4282-9f10-6a49bc45e657)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="requesterId" elementType="Argument">
                <stringProp name="Argument.name">requesterId</stringProp>
                <stringProp name="Argument.value">${__P(requesterId, 94dd52f3-025a-4f20-b91e-3147624e1289)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pickupServicePointId" elementType="Argument">
                <stringProp name="Argument.name">pickupServicePointId</stringProp>
                <stringProp name="Argument.value">${__P(pickupServicePointId, 3a40852d-49fd-4df2-a1f9-6e2641a6e91f)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String randomString = ((&apos;A&apos;..&apos;Z&apos;).toList().get(new Random().nextInt(26)))
vars.put(&quot;searchTerm&quot;, randomString)
</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler Generate Params for request" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">def rand = new Random().nextInt(100)
def searchFields = &quot;&quot;
def searchType = &quot;&quot;

//  SUBJECT
def subjectStart = vars.get(&quot;subject_contains_all_pct&quot;).toInteger()
def subjectContainsAnyEnd = subjectStart + vars.get(&quot;subject_contains_any_pct&quot;).toInteger()
def subjectBeginsEnd = subjectContainsAnyEnd + vars.get(&quot;subject_begins_pct&quot;).toInteger()
def subjectExactEnd = subjectBeginsEnd + vars.get(&quot;subject_exact_pct&quot;).toInteger()

//  NAME
def nameStart = subjectExactEnd
def nameContainsAllEnd = nameStart + vars.get(&quot;name_contains_all_pct&quot;).toInteger()
def nameContainsAnyEnd = nameContainsAllEnd + vars.get(&quot;name_contains_any_pct&quot;).toInteger()
def nameBeginsEnd = nameContainsAnyEnd + vars.get(&quot;name_begins_pct&quot;).toInteger()
def nameExactEnd = nameBeginsEnd + vars.get(&quot;name_exact_pct&quot;).toInteger()

//  TITLE
def titleStart = nameExactEnd
def titleContainsAllEnd = titleStart + vars.get(&quot;title_contains_all_pct&quot;).toInteger()
def titleContainsAnyEnd = titleContainsAllEnd + vars.get(&quot;title_contains_any_pct&quot;).toInteger()
def titleBeginsEnd = titleContainsAnyEnd + vars.get(&quot;title_begins_pct&quot;).toInteger()
def titleExactEnd = titleBeginsEnd + vars.get(&quot;title_exact_pct&quot;).toInteger()

//  ALL
def allStart = titleExactEnd
def allContainsAllEnd = allStart + vars.get(&quot;all_contains_all_pct&quot;).toInteger()
def allContainsAnyEnd = allContainsAllEnd + vars.get(&quot;all_contains_any_pct&quot;).toInteger()
def allBeginsEnd = allContainsAnyEnd + vars.get(&quot;all_begins_pct&quot;).toInteger()
def allExactEnd = allBeginsEnd + vars.get(&quot;all_exact_pct&quot;).toInteger()

//  SUBJECT
if (rand &lt; subjectStart) {
    searchFields = &quot;SUBJECT&quot;
    searchType = &quot;CONTAINS_ALL&quot;
} else if (rand &lt; subjectContainsAnyEnd) {
    searchFields = &quot;SUBJECT&quot;
    searchType = &quot;CONTAINS_ANY&quot;
} else if (rand &lt; subjectBeginsEnd) {
    searchFields = &quot;SUBJECT&quot;
    searchType = &quot;BEGINS&quot;
} else if (rand &lt; subjectExactEnd) {
    searchFields = &quot;SUBJECT&quot;
    searchType = &quot;EXACT&quot;
} 

//  NAME
else if (rand &lt; nameContainsAllEnd) {
    searchFields = &quot;NAME&quot;
    searchType = &quot;CONTAINS_ALL&quot;
} else if (rand &lt; nameContainsAnyEnd) {
    searchFields = &quot;NAME&quot;
    searchType = &quot;CONTAINS_ANY&quot;
} else if (rand &lt; nameBeginsEnd) {
    searchFields = &quot;NAME&quot;
    searchType = &quot;BEGINS&quot;
} else if (rand &lt; nameExactEnd) {
    searchFields = &quot;NAME&quot;
    searchType = &quot;EXACT&quot;
}

//  TITLE
else if (rand &lt; titleContainsAllEnd) {
    searchFields = &quot;TITLE&quot;
    searchType = &quot;CONTAINS_ALL&quot;
} else if (rand &lt; titleContainsAnyEnd) {
    searchFields = &quot;TITLE&quot;
    searchType = &quot;CONTAINS_ANY&quot;
} else if (rand &lt; titleBeginsEnd) {
    searchFields = &quot;TITLE&quot;
    searchType = &quot;BEGINS&quot;
} else if (rand &lt; titleExactEnd) {
    searchFields = &quot;TITLE&quot;
    searchType = &quot;EXACT&quot;
}

//  ALL
else if (rand &lt; allContainsAllEnd) {
    searchFields = &quot;ALL&quot;
    searchType = &quot;CONTAINS_ALL&quot;
} else if (rand &lt; allContainsAnyEnd) {
    searchFields = &quot;ALL&quot;
    searchType = &quot;CONTAINS_ANY&quot;
} else if (rand &lt; allBeginsEnd) {
    searchFields = &quot;ALL&quot;
    searchType = &quot;BEGINS&quot;
} else {
    searchFields = &quot;ALL&quot;
    searchType = &quot;EXACT&quot;
}

// ------------------------
vars.put(&quot;searchFields&quot;, searchFields)
vars.put(&quot;searchType&quot;, searchType)
//log.info(&quot;Selected: ${searchFields} ${searchType}, rand=${rand}&quot;)


def threadNumber2 = ctx.getThreadNum() // Получаем номер потока

vars.put(&quot;threadNumber2&quot;, String.valueOf(threadNumber2))
</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Searcing + view record ${threadNumber2}" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Searching" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">false</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="R_NAME GET /search/authoritiesExtended (search)" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="headingTypes" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">headingTypes</stringProp>
                    </elementProp>
                    <elementProp name="includeInstanceSubjects" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">includeInstanceSubjects</stringProp>
                    </elementProp>
                    <elementProp name="limit" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">100</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">limit</stringProp>
                    </elementProp>
                    <elementProp name="searchFields" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${searchFields}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">searchFields</stringProp>
                    </elementProp>
                    <elementProp name="searchTerm" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">${searchTerm}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">searchTerm</stringProp>
                    </elementProp>
                    <elementProp name="searchType" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${searchType}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">searchType</stringProp>
                    </elementProp>
                    <elementProp name="thesauri" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">thesauri</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/search/authoritiesExtended</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor record" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">record</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.records[*]</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">record_not_found</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor records_id + headingRef" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">records_id;headingRef</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.id;$.headingRef</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">records_id_not_found;headingRef_not_found</stringProp>
                  <stringProp name="Sample.scope">variable</stringProp>
                  <stringProp name="Scope.variable">record</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor Parsed Record JSON" enabled="false">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonString = vars.get(&quot;record&quot;)
def searchTerm = vars.get(&quot;searchTerm&quot;)
def searchFields = vars.get(&quot;searchFields&quot;)
def searchType = vars.get(&quot;searchType&quot;)


if (jsonString == &apos;record_not_found&apos;) {
     //vars.put(&quot;records_id&quot;, &apos;records_id_not_found&apos;)
    log.info(&quot;Variable &apos;record&apos; is &apos;record_not_found&apos;. Skipping JSON parsing.&quot;)
    
    log.info(&quot;&apos;${searchFields}&apos; &apos;${searchType}&apos; searchTerm  is &apos;${searchTerm}&apos;&quot;)
} else {
    
    try {
        def json = new groovy.json.JsonSlurper().parseText(jsonString)
        def id = json.id
        def headingRef = json.headingRef

        
//        vars.put(&quot;records_id&quot;, id)
//        vars.put(&quot;headingRef&quot;, headingRef)
    } catch (Exception e) {
        log.error(&quot;Failed to parse JSON: ${e.message}&quot;)
        
    }
}</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="R_NAME GET/search/authoritiesExtended/facets" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="facet" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">THESAURUS,HEADING_TYPE</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">facet</stringProp>
                    </elementProp>
                    <elementProp name="headingTypes" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">headingTypes</stringProp>
                    </elementProp>
                    <elementProp name="includeInstanceSubjects" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">includeInstanceSubjects</stringProp>
                    </elementProp>
                    <elementProp name="searchFields" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${searchFields}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">searchFields</stringProp>
                    </elementProp>
                    <elementProp name="searchTerm" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">${searchTerm}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">searchTerm</stringProp>
                    </elementProp>
                    <elementProp name="searchType" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${searchType}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">searchType</stringProp>
                    </elementProp>
                    <elementProp name="thesauri" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">thesauri</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/search/authoritiesExtended/facets</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">def jsonString = vars.get(&quot;record&quot;)
def searchTerm = vars.get(&quot;searchTerm&quot;)
def searchFields = vars.get(&quot;searchFields&quot;)
def searchType = vars.get(&quot;searchType&quot;)
def records_id = vars.get(&quot;records_id&quot;)
def threadNumber = ctx.getThreadNum() // Получаем номер потока



if (jsonString == &apos;record_not_found&apos;) {
    log.info(&quot;Thread ${threadNumber}: Variable &apos;record&apos; is &apos;record_not_found&apos;. Skipping JSON parsing.&quot;)
    log.info(&quot;Thread ${threadNumber}: log2 &apos;${searchFields}&apos; &apos;${searchType}&apos; searchTerm is &apos;${searchTerm}&apos;&quot;)
    log.info(&quot;Thread ${threadNumber}: log3 records_id is &apos;${records_id}&apos;&quot;)
} else {
    try {
        def json = new groovy.json.JsonSlurper().parseText(jsonString)
        def id = json.id
        def headingRef = json.headingRef
        
        // Здесь можно добавить действия с id или headingRef, если требуется
       // log.info(&quot;Parsed JSON successfully. ID: ${id}, headingRef: ${headingRef}&quot;)
    } catch (Exception e) {
        log.error(&quot;Failed to parse JSON: ${e.message}&quot;)
    }
}

// Этот блок будет выполняться независимо от проверки jsonString
if (records_id == &apos;records_id_not_found&apos;) {
    log.info(&quot;Thread ${threadNumber}: log4 records_id is &apos;${records_id}&apos;&quot;)
}
</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(&quot;${records_id}&quot; != &quot;records_id_not_found&quot;)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="View Record" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">false</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="R_NAME GET /search/authoritiesExtended (view)" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="headingRef" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.value">${headingRef}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">headingRef</stringProp>
                      </elementProp>
                      <elementProp name="headingTypes" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">headingTypes</stringProp>
                      </elementProp>
                      <elementProp name="id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${records_id}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">id</stringProp>
                      </elementProp>
                      <elementProp name="includeInstanceSubjects" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">includeInstanceSubjects</stringProp>
                      </elementProp>
                      <elementProp name="limit" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">limit</stringProp>
                      </elementProp>
                      <elementProp name="searchFields" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">ALL</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">searchFields</stringProp>
                      </elementProp>
                      <elementProp name="searchTerm" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.value">${searchTerm}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">searchTerm</stringProp>
                      </elementProp>
                      <elementProp name="searchType" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">CONTAINS_ALL</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">searchType</stringProp>
                      </elementProp>
                      <elementProp name="thesauri" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">thesauri</stringProp>
                      </elementProp>
                      <elementProp name="token" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">token</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/search/authoritiesExtended</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="R_NAME GET /opac-inventory/authorities/source-records/[id]" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/opac-inventory/authorities/source-records/${records_id}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="R_NAME GET /search/authority_aggregated_data/[id]" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/search/authority_aggregated_data/${records_id}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Refresh token" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${Global_duration}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV UsersInfo" enabled="true">
          <stringProp name="filename">${global_BaseDir}/jmeter-supported-data/UsersInfo.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">current_userID,servicePointId,hostname,origin,tenant</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </ConfigTestElement>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="X-Okapi-Token" elementType="Header">
              <stringProp name="Header.name">X-Okapi-Tenant</stringProp>
              <stringProp name="Header.value">${tenant}</stringProp>
            </elementProp>
            <elementProp name="Origin&#x9;https" elementType="Header">
              <stringProp name="Header.name">Origin</stringProp>
              <stringProp name="Header.value">https://${origin}</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler- expire time" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">SampleResult.setIgnore()
import java.text.SimpleDateFormat
import java.util.Date
import java.util.TimeZone

def this_tenant = vars.get(&quot;tenant&quot;); 
def now = System.currentTimeMillis();
def dateString  = props.get(this_tenant + &quot;accessTokenGenerationTime&quot;);
def dateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss&apos;Z&apos;&quot;)
dateFormat.setTimeZone(TimeZone.getTimeZone(&quot;UTC&quot;))
def date = dateFormat.parse(dateString)
def exp_timestamp = date.time  // Convert milliseconds to seconds
vars.put(&quot;exp_timestamp&quot;,exp_timestamp.toString());
vars.put(&quot;now&quot;,now.toString());

vars.put(&quot;accessTokenGenerationTime&quot;, props.get(this_tenant + &quot;accessTokenGenerationTime&quot;));
vars.put(&quot;refreshTokenGenerationTime&quot;, props.get(this_tenant + &quot;refreshTokenGenerationTime&quot;));</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">${__groovy((${exp_timestamp} - ${now}) &lt; 50000)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST /authn/refresh" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;accessTokenExpiration&quot;: &quot;${accessTokenGenerationTime}&quot;,&#xd;
    &quot;refreshTokenExpiration&quot;: &quot;${refreshTokenGenerationTime}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">authn/refresh</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor folioAccessToken" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;
import org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase

def this_tenant = vars.get(&quot;tenant&quot;);
CookieManager cookieManager = sampler.getCookieManager()

Cookie cookie = new Cookie(&quot;folioRefreshToken&quot;,props.get(this_tenant + &quot;MyCookie2&quot;),&quot;${hostname}&quot;,&quot;/&quot;,false,0);
cookieManager.add(cookie);</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor FAT" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">folioAccessToken</stringProp>
              <stringProp name="RegexExtractor.regex">folioAccessToken=(.*?);</stringProp>
              <stringProp name="RegexExtractor.template">1</stringProp>
              <stringProp name="RegexExtractor.default">folioAccessToken_not_found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor FRT" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">folioRefreshToken</stringProp>
              <stringProp name="RegexExtractor.regex">folioRefreshToken=(.*?);</stringProp>
              <stringProp name="RegexExtractor.template">1</stringProp>
              <stringProp name="RegexExtractor.default">folioRefreshToken_not_found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor accessTokenGenerationTime" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">accessTokenGenerationTime</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.accessTokenExpiration</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">tokenGenerationTime_not_found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor refreshTokenGenerationTime" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">refreshTokenGenerationTime</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.refreshTokenExpiration</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">tokenGenerationTime_not_found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">def this_tenant = vars.get(&quot;tenant&quot;);

props.put(this_tenant + &quot;accessTokenGenerationTime&quot;, vars.get(&quot;accessTokenGenerationTime&quot;));
props.put(this_tenant + &quot;refreshTokenGenerationTime&quot;, vars.get(&quot;refreshTokenGenerationTime&quot;));
props.put(this_tenant + &quot;MyCookie&quot;, vars.get(&quot;folioAccessToken_g1&quot;));
props.put(this_tenant + &quot;MyCookie2&quot;, vars.get(&quot;folioRefreshToken_g1&quot;));</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">30000</stringProp>
        </TestAction>
        <hashTree/>
      </hashTree>
      <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
        <boolProp name="displayJMeterProperties">false</boolProp>
        <boolProp name="displayJMeterVariables">true</boolProp>
        <boolProp name="displaySamplerProperties">true</boolProp>
        <boolProp name="displaySystemProperties">false</boolProp>
      </DebugPostProcessor>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>false</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <JSR223Listener guiclass="TestBeanGUI" testclass="JSR223Listener" testname="JSR223 Listener - Logger" enabled="true">
        <stringProp name="cacheKey">true</stringProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="parameters"></stringProp>
        <stringProp name="script">// Import necessary libraries
import org.apache.jmeter.samplers.SampleResult;
import org.apache.jmeter.assertions.AssertionResult;

// Check if the previous sampler or current sampler result is not successful
if (!prev.isSuccessful() || !sampleResult.isSuccessful()) {
    // Get the response body as a string
    def responseBody = sampleResult.getResponseDataAsString();

    // Get the end time of the sample
    def endTime = sampleResult.getEndTime();

    // Convert the timestamp to a human-readable format
    def formattedEndTime = new Date(endTime).toString();

    // Get the sample label HTTP requesr Name
    def sampleLabel = sampleResult.getSampleLabel();

    // Format the message
    def message = &quot;Assertion failed for sampler &apos;${sampleLabel}&apos; at ${formattedEndTime}: ${responseBody}&quot;;

    // Log the message to the JMeter log
    log.info(message);

    // Log the message to the console output
    println(&quot;Assertion failed: ${message}&quot;);
}</stringProp>
        <stringProp name="scriptLanguage">groovy</stringProp>
      </JSR223Listener>
      <hashTree/>
      <BackendListener guiclass="BackendListenerGui" testclass="BackendListener" testname="Backend Listener" enabled="false">
        <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="influxdbMetricsSender" elementType="Argument">
              <stringProp name="Argument.name">influxdbMetricsSender</stringProp>
              <stringProp name="Argument.value">org.apache.jmeter.visualizers.backend.influxdb.HttpMetricsSender</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="influxdbUrl" elementType="Argument">
              <stringProp name="Argument.name">influxdbUrl</stringProp>
              <stringProp name="Argument.value">http://10.23.34.14:8086/write?db=JMETER</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="application" elementType="Argument">
              <stringProp name="Argument.name">application</stringProp>
              <stringProp name="Argument.value">history_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="measurement" elementType="Argument">
              <stringProp name="Argument.name">measurement</stringProp>
              <stringProp name="Argument.value">jmeter</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="summaryOnly" elementType="Argument">
              <stringProp name="Argument.name">summaryOnly</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="samplersRegex" elementType="Argument">
              <stringProp name="Argument.name">samplersRegex</stringProp>
              <stringProp name="Argument.value">.*</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="percentiles" elementType="Argument">
              <stringProp name="Argument.name">percentiles</stringProp>
              <stringProp name="Argument.value">90;95;99</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="testTitle" elementType="Argument">
              <stringProp name="Argument.name">testTitle</stringProp>
              <stringProp name="Argument.value">Test name</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="eventTags" elementType="Argument">
              <stringProp name="Argument.name">eventTags</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </elementProp>
        <stringProp name="classname">org.apache.jmeter.visualizers.backend.influxdb.InfluxdbBackendListenerClient</stringProp>
      </BackendListener>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
